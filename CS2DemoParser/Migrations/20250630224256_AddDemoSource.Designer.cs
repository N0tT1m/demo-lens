// <auto-generated />
using System;
using CS2DemoParser.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CS2DemoParser.Migrations
{
    [DbContext(typeof(CS2DemoContext))]
    [Migration("20250630224256_AddDemoSource")]
    partial class AddDemoSource
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CS2DemoParser.Models.AdvancedPlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AssistsPerRound")
                        .HasColumnType("real");

                    b.Property<float>("AverageDamagePerRound")
                        .HasColumnType("real");

                    b.Property<float>("AwpKillsPerRound")
                        .HasColumnType("real");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Clutch1v1Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v1Wins")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v2Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v2Wins")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v3Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v3Wins")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v4Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v4Wins")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v5Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Clutch1v5Wins")
                        .HasColumnType("int");

                    b.Property<float>("ClutchConsistency")
                        .HasColumnType("real");

                    b.Property<float>("CommunicationScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("DamageEfficiency")
                        .HasColumnType("real");

                    b.Property<float>("DamagePerRound")
                        .HasColumnType("real");

                    b.Property<float>("DeathsPerRound")
                        .HasColumnType("real");

                    b.Property<float>("DecisionMakingScore")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<int>("DoubleKills")
                        .HasColumnType("int");

                    b.Property<float>("EcoRoundsImpact")
                        .HasColumnType("real");

                    b.Property<float>("EconomicImpact")
                        .HasColumnType("real");

                    b.Property<float>("EconomyAdaptability")
                        .HasColumnType("real");

                    b.Property<float>("EffectiveDamagePerRound")
                        .HasColumnType("real");

                    b.Property<float>("EnemiesFlashedPerRound")
                        .HasColumnType("real");

                    b.Property<float>("EntryFragPercentage")
                        .HasColumnType("real");

                    b.Property<float>("FirstDeathsPerRound")
                        .HasColumnType("real");

                    b.Property<float>("FirstKillRatio")
                        .HasColumnType("real");

                    b.Property<float>("FirstKillsPerRound")
                        .HasColumnType("real");

                    b.Property<float>("FlashAssistsPerRound")
                        .HasColumnType("real");

                    b.Property<float>("ForceRoundsImpact")
                        .HasColumnType("real");

                    b.Property<float>("HLTVRating")
                        .HasColumnType("real");

                    b.Property<float>("HLTVRating1")
                        .HasColumnType("real");

                    b.Property<float>("HeadshotPercentage")
                        .HasColumnType("real");

                    b.Property<float>("HighImpactRounds")
                        .HasColumnType("real");

                    b.Property<float>("ImpactRating")
                        .HasColumnType("real");

                    b.Property<float>("KASTPercentage")
                        .HasColumnType("real");

                    b.Property<float>("KillAssistSurviveTradeRatio")
                        .HasColumnType("real");

                    b.Property<float>("KillDeathRatio")
                        .HasColumnType("real");

                    b.Property<float>("KillsPerRound")
                        .HasColumnType("real");

                    b.Property<float>("KillsPerShot")
                        .HasColumnType("real");

                    b.Property<float>("LeadershipScore")
                        .HasColumnType("real");

                    b.Property<float>("LurkKillsPercentage")
                        .HasColumnType("real");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<float>("MultiKillsPerRound")
                        .HasColumnType("real");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("OpeningDuelSuccessRate")
                        .HasColumnType("real");

                    b.Property<float>("OverallClutchSuccessRate")
                        .HasColumnType("real");

                    b.Property<int>("PentaKills")
                        .HasColumnType("int");

                    b.Property<float>("PerformanceVariance")
                        .HasColumnType("real");

                    b.Property<float>("PistolKillsPercentage")
                        .HasColumnType("real");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("QuadKills")
                        .HasColumnType("int");

                    b.Property<float>("RifleKillsPercentage")
                        .HasColumnType("real");

                    b.Property<float>("RotationTimingScore")
                        .HasColumnType("real");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<float>("RoundsWithKill")
                        .HasColumnType("real");

                    b.Property<float>("RoundsWithMultiKill")
                        .HasColumnType("real");

                    b.Property<float>("RoundsWithZeroKills")
                        .HasColumnType("real");

                    b.Property<int>("SampleSize")
                        .HasColumnType("int");

                    b.Property<float>("SavedRoundsImpact")
                        .HasColumnType("real");

                    b.Property<float>("ShotAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("SniperKillsPercentage")
                        .HasColumnType("real");

                    b.Property<string>("StatsType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("SupportRoundPercentage")
                        .HasColumnType("real");

                    b.Property<float>("SurvivalRate")
                        .HasColumnType("real");

                    b.Property<float>("TeamFlashesPerRound")
                        .HasColumnType("real");

                    b.Property<float>("TeamPlayScore")
                        .HasColumnType("real");

                    b.Property<float>("TradeFragPercentage")
                        .HasColumnType("real");

                    b.Property<float>("TradeKillPercentage")
                        .HasColumnType("real");

                    b.Property<int>("TripleKills")
                        .HasColumnType("int");

                    b.Property<float>("UtilityDamagePerRound")
                        .HasColumnType("real");

                    b.Property<float>("UtilitySuccessRate")
                        .HasColumnType("real");

                    b.Property<float>("WastedDamage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("RoundId");

                    b.HasIndex("DemoFileId", "RoundNumber");

                    b.HasIndex("PlayerId", "StatsType");

                    b.ToTable("AdvancedPlayerStats");
                });

            modelBuilder.Entity("CS2DemoParser.Models.AdvancedUserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamageGiven")
                        .HasColumnType("int");

                    b.Property<int?>("DamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("DisplayDuration")
                        .HasColumnType("real");

                    b.Property<string>("DisplayLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int?>("HitsGiven")
                        .HasColumnType("int");

                    b.Property<int?>("HitsTaken")
                        .HasColumnType("int");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServerMessage")
                        .HasColumnType("bit");

                    b.Property<int?>("LeaderboardRank")
                        .HasColumnType("int");

                    b.Property<int?>("LeaderboardScore")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MessageContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MessageData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MessageSubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MoneyChange")
                        .HasColumnType("int");

                    b.Property<string>("MoneyReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MoneyTotal")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestGoal")
                        .HasColumnType("int");

                    b.Property<string>("QuestName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("QuestProgress")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("StatCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatComparison")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("StatPercentile")
                        .HasColumnType("real");

                    b.Property<float?>("StatValue")
                        .HasColumnType("real");

                    b.Property<int?>("TargetPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<bool?>("VotePassed")
                        .HasColumnType("bit");

                    b.Property<string>("VoteReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VoteTarget")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VoteType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VotesAgainst")
                        .HasColumnType("int");

                    b.Property<int?>("VotesFor")
                        .HasColumnType("int");

                    b.Property<int?>("VotesRequired")
                        .HasColumnType("int");

                    b.Property<int?>("XpGained")
                        .HasColumnType("int");

                    b.Property<int?>("XpTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("TargetPlayerId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "MessageType");

                    b.ToTable("AdvancedUserMessages");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Bomb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CTPlayersInRange")
                        .HasColumnType("int");

                    b.Property<int>("ClutchSize")
                        .HasColumnType("int");

                    b.Property<float>("DefuseProgress")
                        .HasColumnType("real");

                    b.Property<float?>("DefuseTime")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("ExplodeTime")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("HasFlash")
                        .HasColumnType("bit");

                    b.Property<bool>("HasKit")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSmoke")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClutch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefuseCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefuseStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlantCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlantStarted")
                        .HasColumnType("bit");

                    b.Property<float>("NearestEnemyDistance")
                        .HasColumnType("real");

                    b.Property<float>("PlantProgress")
                        .HasColumnType("real");

                    b.Property<float?>("PlantTime")
                        .HasColumnType("real");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Site")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TPlayersInRange")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("TimeRemaining")
                        .HasColumnType("real");

                    b.Property<bool>("UnderFire")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId", "Tick");

                    b.ToTable("Bombs");
                });

            modelBuilder.Entity("CS2DemoParser.Models.BulletImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("DamageDealt")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<string>("HitGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HitPlayer")
                        .HasColumnType("bit");

                    b.Property<int?>("HitPlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ImpactPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ImpactPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ImpactPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsCrouching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoped")
                        .HasColumnType("bit");

                    b.Property<int>("PenetrationCount")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShootAngleX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ShootAngleY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ShooterPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ShooterPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ShooterPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("SurfaceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<string>("Weapon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("HitPlayerId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "Weapon");

                    b.ToTable("BulletImpacts");
                });

            modelBuilder.Entity("CS2DemoParser.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsAllChat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeadChat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRadioMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamMessage")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("RadioCommand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("DemoFileId", "Tick");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CS2DemoParser.Models.CommunicationPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AchievedObjective")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalAnalysis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CalloutCount")
                        .HasColumnType("int");

                    b.Property<bool>("CausedConfusion")
                        .HasColumnType("bit");

                    b.Property<float>("CommunicationDensity")
                        .HasColumnType("real");

                    b.Property<int>("ConfirmationCount")
                        .HasColumnType("int");

                    b.Property<float>("CoordinationQuality")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("EffectivenessScore")
                        .HasColumnType("real");

                    b.Property<int>("EndTick")
                        .HasColumnType("int");

                    b.Property<float>("EndTime")
                        .HasColumnType("real");

                    b.Property<float>("ImpactOnRound")
                        .HasColumnType("real");

                    b.Property<bool>("ImprovedCoordination")
                        .HasColumnType("bit");

                    b.Property<float>("InformationQuality")
                        .HasColumnType("real");

                    b.Property<bool>("IsAdaptiveResponse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExecutePattern")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInformationChain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInnovativePattern")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeadershipSequence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRetakePattern")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRotationPattern")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardProtocol")
                        .HasColumnType("bit");

                    b.Property<float>("LeadershipClarity")
                        .HasColumnType("real");

                    b.Property<string>("OptimalTiming")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<float>("OverlapPercentage")
                        .HasColumnType("real");

                    b.Property<int>("ParticipantCount")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantIds")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatternDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatternType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrimaryLeaderId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryTopic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<int>("ResponseCount")
                        .HasColumnType("int");

                    b.Property<float>("ResponseRate")
                        .HasColumnType("real");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryTopic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("TeamResponsiveness")
                        .HasColumnType("real");

                    b.Property<float>("TimingScore")
                        .HasColumnType("real");

                    b.Property<bool>("WastedTime")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryLeaderId");

                    b.HasIndex("DemoFileId", "Team");

                    b.HasIndex("RoundId", "PatternType");

                    b.ToTable("CommunicationPatterns");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Damage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<bool>("AttackerBlind")
                        .HasColumnType("bit");

                    b.Property<int?>("AttackerId")
                        .HasColumnType("int");

                    b.Property<decimal>("AttackerPositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AttackerPositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AttackerPositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AttackerTeam")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("AttackerViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AttackerViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DamageAmount")
                        .HasColumnType("int");

                    b.Property<int>("DamageArmor")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("FlashDuration")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("HitGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsFatal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadshot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoScope")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamDamage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWallbang")
                        .HasColumnType("bit");

                    b.Property<int>("Penetration")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<bool>("ThroughSmoke")
                        .HasColumnType("bit");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<bool>("VictimBlind")
                        .HasColumnType("bit");

                    b.Property<int>("VictimId")
                        .HasColumnType("int");

                    b.Property<decimal>("VictimPositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VictimPositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VictimPositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VictimTeam")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VictimViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VictimViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WeaponClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AttackerId");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("VictimId");

                    b.HasIndex("RoundId", "Tick");

                    b.ToTable("Damages");
                });

            modelBuilder.Entity("CS2DemoParser.Models.DemoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemoSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DemoType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("GameMode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MapName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NetworkProtocol")
                        .HasColumnType("int");

                    b.Property<DateTime>("ParsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SignonState")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TickRate")
                        .HasColumnType("int");

                    b.Property<int>("TotalTicks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DemoFiles");
                });

            modelBuilder.Entity("CS2DemoParser.Models.DroppedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmmoClip")
                        .HasColumnType("int");

                    b.Property<int>("AmmoReserve")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("DropPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DropPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DropPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("DropReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DropTick")
                        .HasColumnType("int");

                    b.Property<float>("DropTime")
                        .HasColumnType("real");

                    b.Property<decimal>("DropVelocityX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DropVelocityY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DropVelocityZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("DropperPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("DropperTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Durability")
                        .HasColumnType("real");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit");

                    b.Property<float>("FloatValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsStattrak")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PickerPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("PickerTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PickupPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PickupPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("PickupPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("PickupTick")
                        .HasColumnType("int");

                    b.Property<float?>("PickupTime")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SkinName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("TimeOnGround")
                        .HasColumnType("real");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<bool>("WasPickedUp")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.HasIndex("PickerPlayerId");

                    b.HasIndex("DropperPlayerId", "DropTick");

                    b.HasIndex("RoundId", "ItemType");

                    b.ToTable("DroppedItems");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EconomyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsBuyTimeActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInBuyZone")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ItemCost")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ItemQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MoneyAfter")
                        .HasColumnType("int");

                    b.Property<int>("MoneyBefore")
                        .HasColumnType("int");

                    b.Property<int>("MoneyChange")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "EventType");

                    b.ToTable("EconomyEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EconomyState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageMoney")
                        .HasColumnType("int");

                    b.Property<float>("BuyPercentage")
                        .HasColumnType("real");

                    b.Property<bool>("CanFullBuyNextRound")
                        .HasColumnType("bit");

                    b.Property<int>("ConsecutiveLosses")
                        .HasColumnType("int");

                    b.Property<int>("ConsecutiveWins")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("DamagePerDollar")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EconomicPressure")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<float>("KillsPerDollar")
                        .HasColumnType("real");

                    b.Property<int>("LossBonus")
                        .HasColumnType("int");

                    b.Property<int>("MaxMoney")
                        .HasColumnType("int");

                    b.Property<int>("MinMoney")
                        .HasColumnType("int");

                    b.Property<int>("MoneyLost")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<int>("NextRoundMoney")
                        .HasColumnType("int");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayersCanFullBuy")
                        .HasColumnType("int");

                    b.Property<int>("PlayersOnEco")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoundType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoundsUntilFullBuy")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("TotalArmorValue")
                        .HasColumnType("int");

                    b.Property<int>("TotalDefuseKitValue")
                        .HasColumnType("int");

                    b.Property<int>("TotalMoney")
                        .HasColumnType("int");

                    b.Property<int>("TotalUtilityValue")
                        .HasColumnType("int");

                    b.Property<int>("TotalWeaponValue")
                        .HasColumnType("int");

                    b.Property<float>("UtilityEfficiency")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId", "Phase");

                    b.HasIndex("RoundId", "Team");

                    b.ToTable("EconomyStates");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BlocksVision")
                        .HasColumnType("bit");

                    b.Property<bool>("CausesDamage")
                        .HasColumnType("bit");

                    b.Property<decimal>("CenterX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CenterY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CenterZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("CurrentIntensity")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EndTick")
                        .HasColumnType("int");

                    b.Property<float?>("EndTime")
                        .HasColumnType("real");

                    b.Property<int>("EnemiesAffected")
                        .HasColumnType("int");

                    b.Property<bool>("ImpairsMovement")
                        .HasColumnType("bit");

                    b.Property<float>("MaxDamageToSinglePlayer")
                        .HasColumnType("real");

                    b.Property<float>("MaxIntensity")
                        .HasColumnType("real");

                    b.Property<int>("PlayersAffected")
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Radius")
                        .HasColumnType("real");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SourceEntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SourceEntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SourcePlayerId")
                        .HasColumnType("int");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<string>("Team")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeammatesAffected")
                        .HasColumnType("int");

                    b.Property<float>("TotalDamageDealt")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("RoundId", "EffectType");

                    b.HasIndex("SourcePlayerId", "StartTick");

                    b.ToTable("EntityEffects");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Angle")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<float?>("Force")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int?>("InitiatorPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Properties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Result")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<string>("SourceEntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SourceEntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TargetEntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TargetEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TargetPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("TargetPlayerId");

                    b.HasIndex("InitiatorPlayerId", "Tick");

                    b.HasIndex("RoundId", "InteractionType");

                    b.ToTable("EntityInteractions");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityLifecycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("Durability")
                        .HasColumnType("real");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Properties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("EntityType", "EntityId");

                    b.HasIndex("RoundId", "EventType");

                    b.ToTable("EntityLifecycles");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityPropertyChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CausedByPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("ChangeContext")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("ChangeDelta")
                        .HasColumnType("real");

                    b.Property<string>("ChangeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EntityIndex")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsGameplayRelevant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignificantChange")
                        .HasColumnType("bit");

                    b.Property<string>("NewValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("NumericNewValue")
                        .HasColumnType("real");

                    b.Property<float?>("NumericOldValue")
                        .HasColumnType("real");

                    b.Property<string>("OldValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<string>("TriggerEvent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CausedByPlayerId");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("EntityIndex", "PropertyName");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "ChangeType");

                    b.ToTable("EntityPropertyChanges");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityVisibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("HasLineOfSight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInFieldOfView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ObserverPlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ObserverPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ObserverPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ObserverPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ObserverViewAngleX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ObserverViewAngleY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ObstructionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetPlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TargetPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TargetPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("ViewAngle")
                        .HasColumnType("real");

                    b.Property<float?>("VisibilityPercentage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("TargetPlayerId");

                    b.HasIndex("ObserverPlayerId", "Tick");

                    b.HasIndex("RoundId", "EntityType");

                    b.ToTable("EntityVisibilities");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ammo")
                        .HasColumnType("int");

                    b.Property<int>("AmmoReserve")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("CustomName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("FloatValue")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<decimal>("InventoryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDropped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNameTag")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPickedUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSouvenir")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStattrak")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaintSeed")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SkinName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatTrak")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StickerInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Stickers")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("Wear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("CS2DemoParser.Models.FireArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BlocksPath")
                        .HasColumnType("bit");

                    b.Property<float>("BurnoutTime")
                        .HasColumnType("real");

                    b.Property<decimal>("CenterX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CenterY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CenterZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("CurrentRadius")
                        .HasColumnType("real");

                    b.Property<float>("DamagePerSecond")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<int?>("EndTick")
                        .HasColumnType("int");

                    b.Property<float?>("EndTime")
                        .HasColumnType("real");

                    b.Property<int>("EnemiesAffected")
                        .HasColumnType("int");

                    b.Property<float?>("ExtinguishTime")
                        .HasColumnType("real");

                    b.Property<bool>("ExtinguishedBySmoke")
                        .HasColumnType("bit");

                    b.Property<int?>("ExtinguishingGrenadeId")
                        .HasColumnType("int");

                    b.Property<bool>("ForcesCrouch")
                        .HasColumnType("bit");

                    b.Property<int>("GrenadeEntityId")
                        .HasColumnType("int");

                    b.Property<string>("GrenadeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Intensity")
                        .HasColumnType("real");

                    b.Property<float>("MaxRadius")
                        .HasColumnType("real");

                    b.Property<float>("PeakTime")
                        .HasColumnType("real");

                    b.Property<int>("PlayersAffected")
                        .HasColumnType("int");

                    b.Property<bool>("PreventsBombDefuse")
                        .HasColumnType("bit");

                    b.Property<bool>("PreventsBombPlant")
                        .HasColumnType("bit");

                    b.Property<string>("Properties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SpreadPattern")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("SpreadTime")
                        .HasColumnType("real");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<string>("TacticalPurpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeammatesAffected")
                        .HasColumnType("int");

                    b.Property<int?>("ThrowerPlayerId")
                        .HasColumnType("int");

                    b.Property<float>("TotalDamageDealt")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("RoundId", "GrenadeType");

                    b.HasIndex("ThrowerPlayerId", "StartTick");

                    b.ToTable("FireAreas");
                });

            modelBuilder.Entity("CS2DemoParser.Models.FlashEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("FlashAlpha")
                        .HasColumnType("real");

                    b.Property<float>("FlashDuration")
                        .HasColumnType("real");

                    b.Property<int>("FlashedPlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("FlashedPlayerPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("FlashedPlayerPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("FlashedPlayerPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("FlashedPlayerTeam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FlasherPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("FlasherPlayerTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<decimal?>("GrenadePositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("GrenadePositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("GrenadePositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsSelfFlash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamFlash")
                        .HasColumnType("bit");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("FlasherPlayerId");

                    b.HasIndex("FlashedPlayerId", "Tick");

                    b.HasIndex("RoundId", "FlashDuration");

                    b.ToTable("FlashEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.GameEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BoolValue1")
                        .HasColumnType("bit");

                    b.Property<bool?>("BoolValue2")
                        .HasColumnType("bit");

                    b.Property<bool?>("BoolValue3")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EventData")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("FloatValue1")
                        .HasColumnType("real");

                    b.Property<float?>("FloatValue2")
                        .HasColumnType("real");

                    b.Property<float?>("FloatValue3")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("StringValue1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StringValue2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StringValue3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int?>("Value1")
                        .HasColumnType("int");

                    b.Property<int?>("Value2")
                        .HasColumnType("int");

                    b.Property<int?>("Value3")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventName");

                    b.HasIndex("PlayerId");

                    b.HasIndex("DemoFileId", "Tick");

                    b.ToTable("GameEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Grenade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BounceCount")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DetonatePositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DetonatePositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DetonatePositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DetonateTick")
                        .HasColumnType("int");

                    b.Property<float?>("DetonateTime")
                        .HasColumnType("real");

                    b.Property<float>("EffectRadius")
                        .HasColumnType("real");

                    b.Property<int>("EnemiesAffected")
                        .HasColumnType("int");

                    b.Property<float>("FlightTime")
                        .HasColumnType("real");

                    b.Property<string>("GrenadeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBounce")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrouchThrow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJumpThrow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLineup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRunThrow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandingThrow")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersAffected")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TeammatesAffected")
                        .HasColumnType("int");

                    b.Property<decimal>("ThrowAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThrowAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThrowPositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThrowPositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThrowPositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("ThrowStrength")
                        .HasColumnType("real");

                    b.Property<string>("ThrowStyle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ThrowTick")
                        .HasColumnType("int");

                    b.Property<float>("ThrowTime")
                        .HasColumnType("real");

                    b.Property<decimal>("ThrowVelocityX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThrowVelocityY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThrowVelocityZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("TotalDamage")
                        .HasColumnType("real");

                    b.Property<float>("TotalFlashDuration")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId", "ThrowTick");

                    b.ToTable("Grenades");
                });

            modelBuilder.Entity("CS2DemoParser.Models.GrenadeTrajectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BounceCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("DamageDealt")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("DetonatePositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("DetonatePositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("DetonatePositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("DetonateTick")
                        .HasColumnType("int");

                    b.Property<float?>("DetonateTime")
                        .HasColumnType("real");

                    b.Property<float?>("EffectRadius")
                        .HasColumnType("real");

                    b.Property<int>("EnemiesAffected")
                        .HasColumnType("int");

                    b.Property<float?>("FlashDuration")
                        .HasColumnType("real");

                    b.Property<float?>("FlightTime")
                        .HasColumnType("real");

                    b.Property<string>("GrenadeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCrouchThrow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJumpThrow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLineup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRunThrow")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersAffected")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeammatesAffected")
                        .HasColumnType("int");

                    b.Property<decimal>("ThrowAngleX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ThrowAngleY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ThrowPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ThrowPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ThrowPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ThrowStyle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ThrowTick")
                        .HasColumnType("int");

                    b.Property<float>("ThrowTime")
                        .HasColumnType("real");

                    b.Property<decimal>("ThrowVelocityX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ThrowVelocityY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ThrowVelocityZ")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "ThrowTick");

                    b.HasIndex("RoundId", "GrenadeType");

                    b.ToTable("GrenadeTrajectories");
                });

            modelBuilder.Entity("CS2DemoParser.Models.HostageEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackerWeapon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamageDealt")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("DistanceToRescueZone")
                        .HasColumnType("real");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("FollowDistance")
                        .HasColumnType("real");

                    b.Property<float?>("FollowDuration")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int?>("HealthRemaining")
                        .HasColumnType("int");

                    b.Property<int>("HostageEntityId")
                        .HasColumnType("int");

                    b.Property<string>("HostageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HostageState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsHeadshot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastHostage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoundWinning")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float?>("RescueTime")
                        .HasColumnType("real");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<bool>("WasBeingFollowed")
                        .HasColumnType("bit");

                    b.Property<bool>("WasBeingRescued")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("HostageEntityId", "EventType");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "EventType");

                    b.ToTable("HostageEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.InfernoEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaDenied")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("AverageIntensity")
                        .HasColumnType("real");

                    b.Property<bool>("BlockedPath")
                        .HasColumnType("bit");

                    b.Property<bool>("CausedRoundLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("ClearedPosition")
                        .HasColumnType("bit");

                    b.Property<bool>("ContributedToRoundWin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamageDealt")
                        .HasColumnType("int");

                    b.Property<int?>("DeathsCaused")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("Duration")
                        .HasColumnType("real");

                    b.Property<float?>("EffectivenessScore")
                        .HasColumnType("real");

                    b.Property<int?>("EndTick")
                        .HasColumnType("int");

                    b.Property<float?>("EndTime")
                        .HasColumnType("real");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ExtinguishedByPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("GrenadeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasWaterNearby")
                        .HasColumnType("bit");

                    b.Property<int>("InfernoEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("KillsEnabled")
                        .HasColumnType("int");

                    b.Property<float?>("MaxIntensity")
                        .HasColumnType("real");

                    b.Property<decimal>("OriginX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OriginY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OriginZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float?>("PlacementQuality")
                        .HasColumnType("real");

                    b.Property<int?>("PlayersAffected")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<float?>("SpreadArea")
                        .HasColumnType("real");

                    b.Property<int?>("SpreadDirections")
                        .HasColumnType("int");

                    b.Property<string>("SpreadPattern")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("SpreadRadius")
                        .HasColumnType("real");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<string>("SurfaceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TacticalPurpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ThrowerPlayerId")
                        .HasColumnType("int");

                    b.Property<float?>("TimingScore")
                        .HasColumnType("real");

                    b.Property<bool>("WasExtinguished")
                        .HasColumnType("bit");

                    b.Property<bool>("WastedFire")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("ExtinguishedByPlayerId");

                    b.HasIndex("InfernoEntityId", "EventType");

                    b.HasIndex("RoundId", "EventType");

                    b.HasIndex("ThrowerPlayerId", "StartTick");

                    b.ToTable("InfernoEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Kill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AssistDistance")
                        .HasColumnType("real");

                    b.Property<string>("AssistType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AssisterId")
                        .HasColumnType("int");

                    b.Property<bool>("AttackerBlind")
                        .HasColumnType("bit");

                    b.Property<int>("ClutchSize")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("FlashDuration")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<string>("HitGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlind")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClutch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollateral")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDominating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstKill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFlash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadshot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoScope")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevenge")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevengeKill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmoke")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamKill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTradeKill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWallbang")
                        .HasColumnType("bit");

                    b.Property<int>("KillerArmor")
                        .HasColumnType("int");

                    b.Property<int>("KillerHealth")
                        .HasColumnType("int");

                    b.Property<int?>("KillerId")
                        .HasColumnType("int");

                    b.Property<decimal>("KillerPositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KillerPositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KillerPositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("KillerTeam")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("KillerViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KillerViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Penetration")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<bool>("ThroughSmoke")
                        .HasColumnType("bit");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("TimeSinceLastDamage")
                        .HasColumnType("real");

                    b.Property<int>("VictimArmor")
                        .HasColumnType("int");

                    b.Property<bool>("VictimBlind")
                        .HasColumnType("bit");

                    b.Property<int>("VictimHealth")
                        .HasColumnType("int");

                    b.Property<int>("VictimId")
                        .HasColumnType("int");

                    b.Property<decimal>("VictimPositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VictimPositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VictimPositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VictimTeam")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VictimViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VictimViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WeaponClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssisterId");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("KillerId");

                    b.HasIndex("VictimId");

                    b.HasIndex("RoundId", "Tick");

                    b.ToTable("Kills");
                });

            modelBuilder.Entity("CS2DemoParser.Models.MapControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("ASiteControl")
                        .HasColumnType("real");

                    b.Property<int>("AdvantageousPositions")
                        .HasColumnType("int");

                    b.Property<float>("BSiteControl")
                        .HasColumnType("real");

                    b.Property<float>("CTAreaControl")
                        .HasColumnType("real");

                    b.Property<int>("CTPlayersInAsite")
                        .HasColumnType("int");

                    b.Property<int>("CTPlayersInBsite")
                        .HasColumnType("int");

                    b.Property<int>("CTPlayersInMid")
                        .HasColumnType("int");

                    b.Property<bool>("CTRotatingToA")
                        .HasColumnType("bit");

                    b.Property<bool>("CTRotatingToB")
                        .HasColumnType("bit");

                    b.Property<bool>("CTStackedOneSite")
                        .HasColumnType("bit");

                    b.Property<float>("ControlMomentum")
                        .HasColumnType("real");

                    b.Property<string>("ControlNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ControlledChokes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DisadvantageousPositions")
                        .HasColumnType("int");

                    b.Property<string>("DominantTeamZone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExpectedStrategy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FlashesBlindingAreas")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int>("HEGrenadesControllingAreas")
                        .HasColumnType("int");

                    b.Property<bool>("IsShiftingControl")
                        .HasColumnType("bit");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("MidControl")
                        .HasColumnType("real");

                    b.Property<int>("MolotovsBlockingAreas")
                        .HasColumnType("int");

                    b.Property<float>("NeutralAreaControl")
                        .HasColumnType("real");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("SmokesCoveringAreas")
                        .HasColumnType("int");

                    b.Property<float>("TAreaControl")
                        .HasColumnType("real");

                    b.Property<bool>("TCommittedToSite")
                        .HasColumnType("bit");

                    b.Property<int>("TPlayersInAsite")
                        .HasColumnType("int");

                    b.Property<int>("TPlayersInBsite")
                        .HasColumnType("int");

                    b.Property<int>("TPlayersInMid")
                        .HasColumnType("int");

                    b.Property<bool>("TRotatingToA")
                        .HasColumnType("bit");

                    b.Property<bool>("TRotatingToB")
                        .HasColumnType("bit");

                    b.Property<float>("TerritoryBalance")
                        .HasColumnType("real");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("TimeInControl")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId", "MapName");

                    b.HasIndex("RoundId", "Tick");

                    b.ToTable("MapControls");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BuyTime")
                        .HasColumnType("real");

                    b.Property<int>("CTScore")
                        .HasColumnType("int");

                    b.Property<int>("CTScoreFirstHalf")
                        .HasColumnType("int");

                    b.Property<int?>("CTScoreOvertime")
                        .HasColumnType("int");

                    b.Property<int>("CTScoreSecondHalf")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("FreezeTime")
                        .HasColumnType("real");

                    b.Property<string>("GameMode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOvertime")
                        .HasColumnType("bit");

                    b.Property<string>("MapName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxRounds")
                        .HasColumnType("int");

                    b.Property<float>("RoundTimeLimit")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TScore")
                        .HasColumnType("int");

                    b.Property<int>("TScoreFirstHalf")
                        .HasColumnType("int");

                    b.Property<int?>("TScoreOvertime")
                        .HasColumnType("int");

                    b.Property<int>("TScoreSecondHalf")
                        .HasColumnType("int");

                    b.Property<int>("TotalRounds")
                        .HasColumnType("int");

                    b.Property<string>("WinCondition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WinnerTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PerformanceMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<string>("Context")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<float>("ImpactScore")
                        .HasColumnType("real");

                    b.Property<bool>("IsDecreasing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImproving")
                        .HasColumnType("bit");

                    b.Property<float>("MatchAverage")
                        .HasColumnType("real");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("MovingAverage")
                        .HasColumnType("real");

                    b.Property<bool>("NegativeImpact")
                        .HasColumnType("bit");

                    b.Property<float>("NormalizedValue")
                        .HasColumnType("real");

                    b.Property<float>("PercentileRank")
                        .HasColumnType("real");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("PositiveImpact")
                        .HasColumnType("bit");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Situation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("TeamAverage")
                        .HasColumnType("real");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("Trend")
                        .HasColumnType("real");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "MetricType");

                    b.HasIndex("RoundId", "MetricName");

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClanTag")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("DisconnectReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DisconnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHltv")
                        .HasColumnType("bit");

                    b.Property<float>("PacketLoss")
                        .HasColumnType("real");

                    b.Property<int>("PingAverage")
                        .HasColumnType("int");

                    b.Property<int>("PingMax")
                        .HasColumnType("int");

                    b.Property<int>("PingMin")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlayerSlot")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<decimal>("SteamId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Team")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SteamId");

                    b.HasIndex("DemoFileId", "PlayerSlot")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerBehaviorEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("ActionDuration")
                        .HasColumnType("real");

                    b.Property<string>("BehaviorSubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BehaviorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("Direction")
                        .HasColumnType("real");

                    b.Property<float?>("FallDamage")
                        .HasColumnType("real");

                    b.Property<float?>("FallDistance")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsAdvancing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAudibleToEnemies")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrouching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoldingAngle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInAir")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInWater")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnLadder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPeeking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRetreating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilentMovement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaponDraw")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaponHolster")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaponInspection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaponReload")
                        .HasColumnType("bit");

                    b.Property<float?>("JumpHeight")
                        .HasColumnType("real");

                    b.Property<float?>("LandingImpact")
                        .HasColumnType("real");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<float?>("SoundRadius")
                        .HasColumnType("real");

                    b.Property<string>("SoundType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("SoundVolume")
                        .HasColumnType("real");

                    b.Property<float?>("Speed")
                        .HasColumnType("real");

                    b.Property<float?>("StealthScore")
                        .HasColumnType("real");

                    b.Property<string>("SurfaceMaterial")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TacticalContext")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float?>("TimeSinceLastAction")
                        .HasColumnType("real");

                    b.Property<decimal?>("VelocityX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("VelocityY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("VelocityZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("ViewAngleX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("ViewAngleY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("WasCompromising")
                        .HasColumnType("bit");

                    b.Property<bool>("WasTactical")
                        .HasColumnType("bit");

                    b.Property<string>("WeaponName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId", "BehaviorType");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "BehaviorType");

                    b.ToTable("PlayerBehaviorEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerMatchStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("ADR")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("BlindKills")
                        .HasColumnType("int");

                    b.Property<int>("BombDefuses")
                        .HasColumnType("int");

                    b.Property<int>("BombPlants")
                        .HasColumnType("int");

                    b.Property<int>("ClutchAttempts1v1")
                        .HasColumnType("int");

                    b.Property<int>("ClutchAttempts1v2")
                        .HasColumnType("int");

                    b.Property<int>("ClutchAttempts1v3")
                        .HasColumnType("int");

                    b.Property<int>("ClutchAttempts1v4")
                        .HasColumnType("int");

                    b.Property<int>("ClutchAttempts1v5")
                        .HasColumnType("int");

                    b.Property<int>("ClutchWins1v1")
                        .HasColumnType("int");

                    b.Property<int>("ClutchWins1v2")
                        .HasColumnType("int");

                    b.Property<int>("ClutchWins1v3")
                        .HasColumnType("int");

                    b.Property<int>("ClutchWins1v4")
                        .HasColumnType("int");

                    b.Property<int>("ClutchWins1v5")
                        .HasColumnType("int");

                    b.Property<int>("CollateralKills")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("EnemiesFlashed")
                        .HasColumnType("int");

                    b.Property<int>("FirstDeaths")
                        .HasColumnType("int");

                    b.Property<int>("FirstKills")
                        .HasColumnType("int");

                    b.Property<int>("FlashAssists")
                        .HasColumnType("int");

                    b.Property<float>("FlashDuration")
                        .HasColumnType("real");

                    b.Property<float>("HLTV2Rating")
                        .HasColumnType("real");

                    b.Property<int>("HeadshotKills")
                        .HasColumnType("int");

                    b.Property<float>("HeadshotPercentage")
                        .HasColumnType("real");

                    b.Property<int>("HostageRescues")
                        .HasColumnType("int");

                    b.Property<float>("KASTPercentage")
                        .HasColumnType("real");

                    b.Property<float>("KDRatio")
                        .HasColumnType("real");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("MVPs")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MoneyEarned")
                        .HasColumnType("int");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<int>("MultiKillRounds2K")
                        .HasColumnType("int");

                    b.Property<int>("MultiKillRounds3K")
                        .HasColumnType("int");

                    b.Property<int>("MultiKillRounds4K")
                        .HasColumnType("int");

                    b.Property<int>("MultiKillRounds5K")
                        .HasColumnType("int");

                    b.Property<int>("NoScopeKills")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RoundsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("RoundsWon")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("ShotsFired")
                        .HasColumnType("int");

                    b.Property<int>("ShotsHit")
                        .HasColumnType("int");

                    b.Property<int>("SmokeKills")
                        .HasColumnType("int");

                    b.Property<int>("SurvivalTime")
                        .HasColumnType("int");

                    b.Property<int>("TeammatesFlashed")
                        .HasColumnType("int");

                    b.Property<int>("TotalDamageDealt")
                        .HasColumnType("int");

                    b.Property<int>("TotalDamageReceived")
                        .HasColumnType("int");

                    b.Property<int>("TradeDeaths")
                        .HasColumnType("int");

                    b.Property<int>("TradeKills")
                        .HasColumnType("int");

                    b.Property<int>("UtilityDamage")
                        .HasColumnType("int");

                    b.Property<int>("WallbangKills")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique();

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float?>("FallDistance")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsBhopping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDucking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInAir")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnGround")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStrafing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurfing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalking")
                        .HasColumnType("bit");

                    b.Property<float?>("JumpHeight")
                        .HasColumnType("real");

                    b.Property<string>("MovementTechnique")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.Property<float>("SpeedHorizontal")
                        .HasColumnType("real");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<decimal>("VelocityX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("VelocityY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("VelocityZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ViewAngleX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ViewAngleY")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "MovementType");

                    b.ToTable("PlayerMovements");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveWeapon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<int>("FlashDuration")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("HasDefuseKit")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHelmet")
                        .HasColumnType("bit");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<bool>("InAir")
                        .HasColumnType("bit");

                    b.Property<bool>("InSmoke")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlind")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrouching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefusing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDucking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlanting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReloading")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalking")
                        .HasColumnType("bit");

                    b.Property<float>("LookDistance")
                        .HasColumnType("real");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<bool>("OnLadder")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.Property<float>("StaminaPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Team")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<decimal>("VelocityX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VelocityY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VelocityZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleZ")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.ToTable("PlayerPositions");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerRoundStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("ClutchSize")
                        .HasColumnType("int");

                    b.Property<bool>("ClutchWon")
                        .HasColumnType("bit");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("EndMoney")
                        .HasColumnType("int");

                    b.Property<int>("EnemiesFlashed")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("FlashAssists")
                        .HasColumnType("int");

                    b.Property<float>("FlashDuration")
                        .HasColumnType("real");

                    b.Property<bool>("HasBomb")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDefuseKit")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHelmet")
                        .HasColumnType("bit");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClutch")
                        .HasColumnType("bit");

                    b.Property<bool>("KAST")
                        .HasColumnType("bit");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<bool>("MVP")
                        .HasColumnType("bit");

                    b.Property<int>("MoneySpent")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveTime")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("ShotsFired")
                        .HasColumnType("int");

                    b.Property<int>("ShotsHit")
                        .HasColumnType("int");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.Property<float>("SurvivalTime")
                        .HasColumnType("real");

                    b.Property<int>("TeammatesFlashed")
                        .HasColumnType("int");

                    b.Property<int>("UtilityDamage")
                        .HasColumnType("int");

                    b.Property<decimal>("ViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleZ")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("PlayerId", "RoundId")
                        .IsUnique();

                    b.ToTable("PlayerRoundStats");
                });

            modelBuilder.Entity("CS2DemoParser.Models.RadioCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommandCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Context")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "Command");

                    b.ToTable("RadioCommands");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BombDefused")
                        .HasColumnType("bit");

                    b.Property<bool>("BombExploded")
                        .HasColumnType("bit");

                    b.Property<bool>("BombPlanted")
                        .HasColumnType("bit");

                    b.Property<int?>("BombSite")
                        .HasColumnType("int");

                    b.Property<int>("CTEquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("CTLivePlayers")
                        .HasColumnType("int");

                    b.Property<int>("CTScore")
                        .HasColumnType("int");

                    b.Property<int>("CTStartMoney")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("EndReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EndTick")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAntiEcoRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEcoRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForceBuyRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOvertime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPistolRound")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TEquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("TLivePlayers")
                        .HasColumnType("int");

                    b.Property<int>("TScore")
                        .HasColumnType("int");

                    b.Property<int>("TStartMoney")
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("MatchId", "RoundNumber")
                        .IsUnique();

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("CS2DemoParser.Models.RoundImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadDecisions")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CriticalDecisions")
                        .HasColumnType("int");

                    b.Property<float>("DecisionQuality")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<float>("EarlyRoundImpact")
                        .HasColumnType("real");

                    b.Property<float>("EconomicImpact")
                        .HasColumnType("real");

                    b.Property<float>("ExpectedValue")
                        .HasColumnType("real");

                    b.Property<float>("FollowupImpact")
                        .HasColumnType("real");

                    b.Property<float>("FraggingImpact")
                        .HasColumnType("real");

                    b.Property<int>("GoodDecisions")
                        .HasColumnType("int");

                    b.Property<bool>("HasClutchAttempt")
                        .HasColumnType("bit");

                    b.Property<bool>("HasClutchWin")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCriticalSave")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEntryFrag")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGameChangingPlay")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMultiKill")
                        .HasColumnType("bit");

                    b.Property<string>("ImpactSummary")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("KeyMoment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("KeyMomentImpact")
                        .HasColumnType("real");

                    b.Property<float>("LateRoundImpact")
                        .HasColumnType("real");

                    b.Property<float>("LeadershipImpact")
                        .HasColumnType("real");

                    b.Property<float>("LossRoundImpact")
                        .HasColumnType("real");

                    b.Property<float>("MidRoundImpact")
                        .HasColumnType("real");

                    b.Property<float>("MomentumGenerated")
                        .HasColumnType("real");

                    b.Property<float>("MomentumLost")
                        .HasColumnType("real");

                    b.Property<float>("MomentumShift")
                        .HasColumnType("real");

                    b.Property<float>("NegativeImpact")
                        .HasColumnType("real");

                    b.Property<float>("NetImpact")
                        .HasColumnType("real");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("OverallImpact")
                        .HasColumnType("real");

                    b.Property<float>("PerformanceVsExpected")
                        .HasColumnType("real");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<float>("PositionalImpact")
                        .HasColumnType("real");

                    b.Property<float>("PositiveImpact")
                        .HasColumnType("real");

                    b.Property<float>("RewardAchieved")
                        .HasColumnType("real");

                    b.Property<float>("RiskRewardRatio")
                        .HasColumnType("real");

                    b.Property<float>("RiskTaken")
                        .HasColumnType("real");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<float>("RoundOutcomePrediction")
                        .HasColumnType("real");

                    b.Property<string>("RoundType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("RoundTypeImpact")
                        .HasColumnType("real");

                    b.Property<float>("TacticalImpact")
                        .HasColumnType("real");

                    b.Property<float>("TeamSupportImpact")
                        .HasColumnType("real");

                    b.Property<float>("UtilityImpact")
                        .HasColumnType("real");

                    b.Property<float>("WinProbabilityContribution")
                        .HasColumnType("real");

                    b.Property<float>("WinRoundContribution")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("DemoFileId", "OverallImpact");

                    b.HasIndex("PlayerId", "RoundId")
                        .IsUnique();

                    b.ToTable("RoundImpacts");
                });

            modelBuilder.Entity("CS2DemoParser.Models.SmokeCloud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AffectedByWind")
                        .HasColumnType("bit");

                    b.Property<bool>("BlocksBombsiteView")
                        .HasColumnType("bit");

                    b.Property<bool>("BlocksChoke")
                        .HasColumnType("bit");

                    b.Property<decimal>("CenterX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CenterY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CenterZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("CurrentRadius")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("DissipationTime")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<bool>("EnabledPlantDefuse")
                        .HasColumnType("bit");

                    b.Property<int?>("EndTick")
                        .HasColumnType("int");

                    b.Property<float?>("EndTime")
                        .HasColumnType("real");

                    b.Property<float>("ExpansionTime")
                        .HasColumnType("real");

                    b.Property<float>("FullTime")
                        .HasColumnType("real");

                    b.Property<int>("GrenadeEntityId")
                        .HasColumnType("int");

                    b.Property<float>("MaxRadius")
                        .HasColumnType("real");

                    b.Property<float>("Opacity")
                        .HasColumnType("real");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayersObscured")
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("SightLinesBlocked")
                        .HasColumnType("int");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<string>("TacticalPurpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ThrowerPlayerId")
                        .HasColumnType("int");

                    b.Property<float>("WindDirection")
                        .HasColumnType("real");

                    b.Property<float>("WindStrength")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("RoundId", "Phase");

                    b.HasIndex("ThrowerPlayerId", "StartTick");

                    b.ToTable("SmokeClouds");
                });

            modelBuilder.Entity("CS2DemoParser.Models.TacticalEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AchievedObjective")
                        .HasColumnType("bit");

                    b.Property<float>("Coordination")
                        .HasColumnType("real");

                    b.Property<float>("CounterEffectiveness")
                        .HasColumnType("real");

                    b.Property<string>("CounterTactic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("DamageDealt")
                        .HasColumnType("real");

                    b.Property<int>("DeathsCaused")
                        .HasColumnType("int");

                    b.Property<int>("DecoysUsed")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float?>("EndTime")
                        .HasColumnType("real");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("ExecutionQuality")
                        .HasColumnType("real");

                    b.Property<int>("FlashesUsed")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int>("HEGrenadesUsed")
                        .HasColumnType("int");

                    b.Property<int?>("InitiatorPlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdaptation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInnovativePlay")
                        .HasColumnType("bit");

                    b.Property<int>("KillsGenerated")
                        .HasColumnType("int");

                    b.Property<int>("MolotovsUsed")
                        .HasColumnType("int");

                    b.Property<int>("PlayersInvolved")
                        .HasColumnType("int");

                    b.Property<string>("RoundContext")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SmokesUsed")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<string>("StrategicIntent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("SuccessRate")
                        .HasColumnType("real");

                    b.Property<string>("TacticalNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TargetArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("Timing")
                        .HasColumnType("real");

                    b.Property<float>("Unpredictability")
                        .HasColumnType("real");

                    b.Property<bool>("WasCountered")
                        .HasColumnType("bit");

                    b.Property<bool>("WasDelayed")
                        .HasColumnType("bit");

                    b.Property<bool>("WasRushed")
                        .HasColumnType("bit");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("InitiatorPlayerId", "Tick");

                    b.HasIndex("RoundId", "EventType");

                    b.ToTable("TacticalEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.TeamState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageMoney")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DecoyCount")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FlashbangCount")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int>("HEGrenadeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsAntiEcoRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEcoRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForceRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullBuyRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRotating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaveRound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStacked")
                        .HasColumnType("bit");

                    b.Property<int>("LivingPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MolotovCount")
                        .HasColumnType("int");

                    b.Property<int>("PistolCount")
                        .HasColumnType("int");

                    b.Property<int>("PlayersWithArmor")
                        .HasColumnType("int");

                    b.Property<int>("PlayersWithDefuseKit")
                        .HasColumnType("int");

                    b.Property<int>("PlayersWithHelmet")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RifleCount")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("SMGCount")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ShotgunCount")
                        .HasColumnType("int");

                    b.Property<float>("SiteControl")
                        .HasColumnType("real");

                    b.Property<int>("SmokegrenadeCount")
                        .HasColumnType("int");

                    b.Property<int>("SniperCount")
                        .HasColumnType("int");

                    b.Property<string>("TacticalNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("TeamCohesion")
                        .HasColumnType("real");

                    b.Property<float>("TeamSpread")
                        .HasColumnType("real");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<int>("TotalEquipmentValue")
                        .HasColumnType("int");

                    b.Property<int>("TotalMoney")
                        .HasColumnType("int");

                    b.Property<float>("TradeKillPotential")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId", "Tick");

                    b.HasIndex("RoundId", "Team");

                    b.ToTable("TeamStates");
                });

            modelBuilder.Entity("CS2DemoParser.Models.TemporaryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float?>("Alpha")
                        .HasColumnType("real");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("DamageRadius")
                        .HasColumnType("real");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("DirectionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("DirectionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("DirectionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float?>("Duration")
                        .HasColumnType("real");

                    b.Property<decimal?>("EndPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("EndPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("EndPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("ExplosionRadius")
                        .HasColumnType("real");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<float?>("ImpactForce")
                        .HasColumnType("real");

                    b.Property<float?>("Intensity")
                        .HasColumnType("real");

                    b.Property<bool>("IsWallbang")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PenetrationCount")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<float?>("Scale")
                        .HasColumnType("real");

                    b.Property<string>("SubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TargetEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<string>("WeaponName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId", "EntityType");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "EntityType");

                    b.ToTable("TemporaryEntities");
                });

            modelBuilder.Entity("CS2DemoParser.Models.VoiceCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("ClarityScore")
                        .HasColumnType("real");

                    b.Property<string>("CommandCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommandPurpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommunicationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContentSummary")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<bool>("DuringAction")
                        .HasColumnType("bit");

                    b.Property<float>("EffectivenessScore")
                        .HasColumnType("real");

                    b.Property<int>("EndTick")
                        .HasColumnType("int");

                    b.Property<float>("EndTime")
                        .HasColumnType("real");

                    b.Property<int?>("InterruptedCommunicationId")
                        .HasColumnType("int");

                    b.Property<bool>("InterruptedOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCallout")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmotional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeadershipCommunication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuestion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResponse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<bool>("MidRound")
                        .HasColumnType("bit");

                    b.Property<bool>("PostRound")
                        .HasColumnType("bit");

                    b.Property<bool>("PreRound")
                        .HasColumnType("bit");

                    b.Property<string>("RadioCommand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SituationalContext")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpeakerArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<decimal>("SpeakerPositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("SpeakerPositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("SpeakerPositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("StartTick")
                        .HasColumnType("int");

                    b.Property<float>("StartTime")
                        .HasColumnType("real");

                    b.Property<int?>("TargetPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ToSpecific")
                        .HasColumnType("bit");

                    b.Property<bool>("ToTeam")
                        .HasColumnType("bit");

                    b.Property<string>("TranscribedContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TriggeredExecute")
                        .HasColumnType("bit");

                    b.Property<bool>("TriggeredRegroup")
                        .HasColumnType("bit");

                    b.Property<bool>("TriggeredRotation")
                        .HasColumnType("bit");

                    b.Property<bool>("TriggeredSave")
                        .HasColumnType("bit");

                    b.Property<float>("VoiceIntensity")
                        .HasColumnType("real");

                    b.Property<bool>("WasCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("WasFollowed")
                        .HasColumnType("bit");

                    b.Property<bool>("WasInterrupted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("TargetPlayerId");

                    b.HasIndex("RoundId", "CommunicationType");

                    b.HasIndex("SpeakerId", "StartTick");

                    b.ToTable("VoiceCommunications");
                });

            modelBuilder.Entity("CS2DemoParser.Models.WeaponFire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("Ammo")
                        .HasColumnType("int");

                    b.Property<int>("AmmoReserve")
                        .HasColumnType("int");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<int>("FlashDuration")
                        .HasColumnType("int");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsBlind")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("RecoilIndex")
                        .HasColumnType("real");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ThroughSmoke")
                        .HasColumnType("bit");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float>("Velocity")
                        .HasColumnType("real");

                    b.Property<decimal>("ViewAngleX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ViewAngleZ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WeaponClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId", "Tick");

                    b.ToTable("WeaponFires");
                });

            modelBuilder.Entity("CS2DemoParser.Models.WeaponState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmmoClip")
                        .HasColumnType("int");

                    b.Property<int>("AmmoReserve")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<bool>("IsReloading")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScoped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float?>("ReloadDuration")
                        .HasColumnType("real");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<string>("WeaponName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZoomLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "EventType");

                    b.ToTable("WeaponStates");
                });

            modelBuilder.Entity("CS2DemoParser.Models.ZoneEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemoFileId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("GameTime")
                        .HasColumnType("real");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("PositionZ")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tick")
                        .HasColumnType("int");

                    b.Property<float?>("TimeInZone")
                        .HasColumnType("real");

                    b.Property<string>("ZoneType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DemoFileId");

                    b.HasIndex("PlayerId", "Tick");

                    b.HasIndex("RoundId", "ZoneType");

                    b.ToTable("ZoneEvents");
                });

            modelBuilder.Entity("CS2DemoParser.Models.AdvancedPlayerStats", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.AdvancedUserMessage", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "TargetPlayer")
                        .WithMany()
                        .HasForeignKey("TargetPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Bomb", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Bombs")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany("Bombs")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.BulletImpact", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "HitPlayerEntity")
                        .WithMany()
                        .HasForeignKey("HitPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("HitPlayerEntity");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.ChatMessage", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("ChatMessages")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("ChatMessages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CS2DemoParser.Models.CommunicationPattern", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "PrimaryLeader")
                        .WithMany()
                        .HasForeignKey("PrimaryLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("PrimaryLeader");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Damage", b =>
                {
                    b.HasOne("CS2DemoParser.Models.Player", "Attacker")
                        .WithMany("DamagesAsAttacker")
                        .HasForeignKey("AttackerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Damages")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany("Damages")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Victim")
                        .WithMany("DamagesAsVictim")
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attacker");

                    b.Navigation("DemoFile");

                    b.Navigation("Round");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("CS2DemoParser.Models.DroppedItem", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "DropperPlayer")
                        .WithMany()
                        .HasForeignKey("DropperPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "PickerPlayer")
                        .WithMany()
                        .HasForeignKey("PickerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("DropperPlayer");

                    b.Navigation("PickerPlayer");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EconomyEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EconomyState", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityEffect", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "SourcePlayer")
                        .WithMany()
                        .HasForeignKey("SourcePlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");

                    b.Navigation("SourcePlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityInteraction", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "InitiatorPlayer")
                        .WithMany()
                        .HasForeignKey("InitiatorPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "TargetPlayer")
                        .WithMany()
                        .HasForeignKey("TargetPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("InitiatorPlayer");

                    b.Navigation("Round");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityLifecycle", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityPropertyChange", b =>
                {
                    b.HasOne("CS2DemoParser.Models.Player", "CausedByPlayer")
                        .WithMany()
                        .HasForeignKey("CausedByPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CausedByPlayer");

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.EntityVisibility", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "ObserverPlayer")
                        .WithMany()
                        .HasForeignKey("ObserverPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "TargetPlayer")
                        .WithMany()
                        .HasForeignKey("TargetPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("ObserverPlayer");

                    b.Navigation("Round");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Equipment", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Equipment")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("Equipment")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CS2DemoParser.Models.FireArea", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "ThrowerPlayer")
                        .WithMany()
                        .HasForeignKey("ThrowerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");

                    b.Navigation("ThrowerPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.FlashEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "FlashedPlayer")
                        .WithMany()
                        .HasForeignKey("FlashedPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "FlasherPlayer")
                        .WithMany()
                        .HasForeignKey("FlasherPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("FlashedPlayer");

                    b.Navigation("FlasherPlayer");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.GameEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("GameEvents")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Grenade", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Grenades")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("Grenades")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany("Grenades")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.GrenadeTrajectory", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.HostageEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.InfernoEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "ExtinguishedByPlayer")
                        .WithMany()
                        .HasForeignKey("ExtinguishedByPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "ThrowerPlayer")
                        .WithMany()
                        .HasForeignKey("ThrowerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("ExtinguishedByPlayer");

                    b.Navigation("Round");

                    b.Navigation("ThrowerPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Kill", b =>
                {
                    b.HasOne("CS2DemoParser.Models.Player", "Assister")
                        .WithMany("KillsAsAssister")
                        .HasForeignKey("AssisterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Kills")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Killer")
                        .WithMany("KillsAsKiller")
                        .HasForeignKey("KillerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany("Kills")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Victim")
                        .WithMany("KillsAsVictim")
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assister");

                    b.Navigation("DemoFile");

                    b.Navigation("Killer");

                    b.Navigation("Round");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("CS2DemoParser.Models.MapControl", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Match", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Matches")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemoFile");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PerformanceMetric", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Player", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Players")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemoFile");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerBehaviorEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerMatchStats", b =>
                {
                    b.HasOne("CS2DemoParser.Models.Match", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerMovement", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerPosition", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("PlayerPositions")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("PlayerPositions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CS2DemoParser.Models.PlayerRoundStats", b =>
                {
                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany("PlayerRoundStats")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.RadioCommand", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Round", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("Rounds")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Match", "Match")
                        .WithMany("Rounds")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("CS2DemoParser.Models.RoundImpact", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.SmokeCloud", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "ThrowerPlayer")
                        .WithMany()
                        .HasForeignKey("ThrowerPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");

                    b.Navigation("ThrowerPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.TacticalEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "InitiatorPlayer")
                        .WithMany()
                        .HasForeignKey("InitiatorPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("InitiatorPlayer");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.TeamState", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.TemporaryEntity", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.VoiceCommunication", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CS2DemoParser.Models.Player", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "TargetPlayer")
                        .WithMany()
                        .HasForeignKey("TargetPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Round");

                    b.Navigation("Speaker");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("CS2DemoParser.Models.WeaponFire", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany("WeaponFires")
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany("WeaponFires")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany("WeaponFires")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.WeaponState", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.ZoneEvent", b =>
                {
                    b.HasOne("CS2DemoParser.Models.DemoFile", "DemoFile")
                        .WithMany()
                        .HasForeignKey("DemoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CS2DemoParser.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DemoFile");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("CS2DemoParser.Models.DemoFile", b =>
                {
                    b.Navigation("Bombs");

                    b.Navigation("ChatMessages");

                    b.Navigation("Damages");

                    b.Navigation("Equipment");

                    b.Navigation("GameEvents");

                    b.Navigation("Grenades");

                    b.Navigation("Kills");

                    b.Navigation("Matches");

                    b.Navigation("PlayerPositions");

                    b.Navigation("Players");

                    b.Navigation("Rounds");

                    b.Navigation("WeaponFires");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Match", b =>
                {
                    b.Navigation("PlayerMatchStats");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Player", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("DamagesAsAttacker");

                    b.Navigation("DamagesAsVictim");

                    b.Navigation("Equipment");

                    b.Navigation("Grenades");

                    b.Navigation("KillsAsAssister");

                    b.Navigation("KillsAsKiller");

                    b.Navigation("KillsAsVictim");

                    b.Navigation("PlayerMatchStats");

                    b.Navigation("PlayerPositions");

                    b.Navigation("PlayerRoundStats");

                    b.Navigation("WeaponFires");
                });

            modelBuilder.Entity("CS2DemoParser.Models.Round", b =>
                {
                    b.Navigation("Bombs");

                    b.Navigation("Damages");

                    b.Navigation("Grenades");

                    b.Navigation("Kills");

                    b.Navigation("PlayerRoundStats");

                    b.Navigation("WeaponFires");
                });
#pragma warning restore 612, 618
        }
    }
}
