@page
@model CS2DemoParserWeb.Pages.AnalyticsModel
@{
    ViewData["Title"] = "Advanced Analytics";
}

<div class="text-center mb-4">
    <h1 class="display-5">🎯 Advanced CS2 Analytics</h1>
    <p class="lead">Deep insights into gameplay patterns, clutch performance, and tactical intelligence - Updated Version</p>
</div>

<div class="row">
    <!-- Analytics Controls -->
    <div class="col-lg-3">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">📊 Analysis Filters</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="demoSelect" class="form-label">Demo File</label>
                    <select class="form-select" id="demoSelect">
                        <option value="">All Demos</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="mapSelect" class="form-label">Map</label>
                    <select class="form-select" id="mapSelect">
                        <option value="">All Maps</option>
                        <option value="de_dust2">de_dust2</option>
                        <option value="de_mirage">de_mirage</option>
                        <option value="de_inferno">de_inferno</option>
                        <option value="de_ancient">de_ancient</option>
                        <option value="de_vertigo">de_vertigo</option>
                        <option value="de_nuke">de_nuke</option>
                        <option value="de_overpass">de_overpass</option>
                        <option value="de_train">de_train</option>
                        <option value="de_cache">de_cache</option>
                        <option value="de_anubis">de_anubis</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="playerSelect" class="form-label">Player</label>
                    <select class="form-select" id="playerSelect">
                        <option value="">All Players</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="teamSelect" class="form-label">Team</label>
                    <select class="form-select" id="teamSelect">
                        <option value="">All Teams</option>
                        <option value="TERRORIST">Terrorist</option>
                        <option value="CT">Counter-Terrorist</option>
                    </select>
                </div>
                
                <button type="button" class="btn btn-primary w-100" onclick="refreshAnalytics()">🔄 Update Analytics</button>
            </div>
        </div>
    </div>
    
    <!-- Analytics Results -->
    <div class="col-lg-9">
        <!-- Analysis Type Tabs -->
        <ul class="nav nav-tabs" id="analyticsTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="clutch-tab" data-bs-toggle="tab" data-bs-target="#clutch" type="button" role="tab">
                    🎯 Clutch Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="trade-tab" data-bs-toggle="tab" data-bs-target="#trade" type="button" role="tab">
                    ⚡ Trade Kills
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="first-kill-tab" data-bs-toggle="tab" data-bs-target="#first-kill" type="button" role="tab">
                    🥇 First Kill Impact
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economy-tab" data-bs-toggle="tab" data-bs-target="#economy" type="button" role="tab">
                    💰 Economic Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="position-tab" data-bs-toggle="tab" data-bs-target="#position" type="button" role="tab">
                    📍 Position Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="comprehensive-clutch-tab" data-bs-toggle="tab" data-bs-target="#comprehensive-clutch" type="button" role="tab">
                    🔥 Comprehensive Clutch
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="weapons-tab" data-bs-toggle="tab" data-bs-target="#weapons" type="button" role="tab">
                    🔫 Weapon Mastery
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="grenades-tab" data-bs-toggle="tab" data-bs-target="#grenades" type="button" role="tab">
                    💣 Grenade Impact
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="momentum-tab" data-bs-toggle="tab" data-bs-target="#momentum" type="button" role="tab">
                    📈 Round Momentum
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="coordination-tab" data-bs-toggle="tab" data-bs-target="#coordination" type="button" role="tab">
                    🤝 Team Coordination
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="consistency-tab" data-bs-toggle="tab" data-bs-target="#consistency" type="button" role="tab">
                    📊 Performance Consistency
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="damage-tab" data-bs-toggle="tab" data-bs-target="#damage" type="button" role="tab">
                    ⚔️ Damage Efficiency
                </button>
            </li>
        </ul>
        
        <!-- Tab Content -->
        <div class="tab-content" id="analyticsTabContent">
            <!-- Clutch Analysis -->
            <div class="tab-pane fade show active" id="clutch" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🎯 Clutch Situation Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('clutch')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="clutchResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                <p>Click "Update Analytics" to load clutch performance data</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Trade Kill Analysis -->
            <div class="tab-pane fade" id="trade" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">⚡ Trade Kill Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('trade')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="tradeResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-exchange-alt fa-3x mb-3"></i>
                                <p>Analysis of how quickly teammates trade frags</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- First Kill Impact -->
            <div class="tab-pane fade" id="first-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🥇 First Kill Impact</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('first-kill')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="firstKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Impact of opening frags on round outcomes</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Economic Intelligence -->
            <div class="tab-pane fade" id="economy" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">💰 Economic Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economy')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="economyResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-coins fa-3x mb-3"></i>
                                <p>Win rates and efficiency across different economic situations</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Position Analysis -->
            <div class="tab-pane fade" id="position" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">📍 Position Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('position')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="positionResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map fa-3x mb-3"></i>
                                <p>Death hotspots and dangerous areas by map location</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Comprehensive Clutch Analysis -->
            <div class="tab-pane fade" id="comprehensive-clutch" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🔥 Comprehensive Clutch Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('comprehensive-clutch')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Comprehensive Clutch Intelligence:</strong> 
                            Analyzes clutch setups, health/armor states, economic context, positioning, weapon choices, and multi-clutch performance patterns.
                        </div>
                        <div id="comprehensiveClutchResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-fire fa-3x mb-3"></i>
                                <p>Deep clutch performance analysis including setup positioning, health conditions, and equipment correlation</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Weapon Mastery Analysis -->
            <div class="tab-pane fade" id="weapons" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🔫 Weapon Mastery Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('weapons')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="weaponsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Accuracy analysis, range effectiveness, and weapon-specific performance metrics</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Grenade Impact Analysis -->
            <div class="tab-pane fade" id="grenades" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">💣 Grenade Impact Quantification</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('grenades')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="grenadesResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-bomb fa-3x mb-3"></i>
                                <p>Flash effectiveness, smoke timing, HE damage analysis, and utility combinations</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Round Momentum Analysis -->
            <div class="tab-pane fade" id="momentum" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">📈 Round Momentum Tracking</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('momentum')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="momentumResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-line fa-3x mb-3"></i>
                                <p>Streak analysis, comeback potential, momentum shifts, and force reset identification</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Team Coordination Analysis -->
            <div class="tab-pane fade" id="coordination" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🤝 Team Coordination Metrics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('coordination')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="coordinationResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-users fa-3x mb-3"></i>
                                <p>Rotation timing, stack effectiveness, spread formation, and synchronized utility usage</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Performance Consistency Analysis -->
            <div class="tab-pane fade" id="consistency" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">📊 Performance Consistency Profiling</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('consistency')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="consistencyResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                <p>Tilt detection, variance tracking, and adaptation analysis for player consistency</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Damage Efficiency Analysis -->
            <div class="tab-pane fade" id="damage" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">⚔️ Damage Efficiency Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('damage')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div id="damageResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-sword fa-3x mb-3"></i>
                                <p>Damage waste identification, armor penetration, finishing ability, and multi-target tracking</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    loadDropdownData();
});

async function loadDropdownData() {
    try {
        // Load demo files
        const demosResponse = await fetch('/api/demo/demos');
        if (demosResponse.ok) {
            const demos = await demosResponse.json();
            const demoSelect = document.getElementById('demoSelect');
            
            // Clear existing options except "All Demos"
            demoSelect.innerHTML = '<option value="">All Demos</option>';
            
            // Add demo options
            demos.forEach(demo => {
                const option = document.createElement('option');
                option.value = demo.id;
                option.textContent = `${demo.fileName} (${demo.mapName})`;
                demoSelect.appendChild(option);
            });
            
            console.log('Loaded', demos.length, 'demo files');
            
            // Also load unique players for player dropdown
            await loadPlayersData();
        } else {
            console.error('Failed to load demos:', demosResponse.status);
        }
    } catch (error) {
        console.error('Error loading dropdown data:', error);
    }
}

async function loadPlayersData() {
    try {
        const playersResponse = await fetch('/api/reports/player-stats?format=json');
        if (playersResponse.ok) {
            const playersData = await playersResponse.json();
            const playerSelect = document.getElementById('playerSelect');
            
            // Clear existing options except "All Players"
            playerSelect.innerHTML = '<option value="">All Players</option>';
            
            // Get unique player names
            const uniquePlayers = [...new Set(playersData.map(p => p.PlayerName))].sort();
            
            // Add player options
            uniquePlayers.forEach(playerName => {
                const option = document.createElement('option');
                option.value = playerName;
                option.textContent = playerName;
                playerSelect.appendChild(option);
            });
            
            console.log('Loaded', uniquePlayers.length, 'unique players');
        }
    } catch (error) {
        console.error('Error loading players data:', error);
    }
}

async function refreshAnalytics() {
    const filters = getFilters();
    
    // Show loading state
    showLoading();
    
    try {
        // Load all analytics in parallel for better performance
        await Promise.all([
            loadClutchAnalysis(filters),
            loadTradeAnalysis(filters),
            loadFirstKillAnalysis(filters),
            loadEconomyAnalysis(filters),
            loadPositionAnalysis(filters),
            loadComprehensiveClutchAnalysis(filters),
            loadWeaponsAnalysis(filters),
            loadGrenadesAnalysis(filters),
            loadMomentumAnalysis(filters),
            loadCoordinationAnalysis(filters),
            loadConsistencyAnalysis(filters),
            loadDamageAnalysis(filters)
        ]);
    } catch (error) {
        console.error('Error refreshing analytics:', error);
        showError('Failed to load analytics data. Please try again.');
    }
}

function getFilters() {
    return {
        demoId: document.getElementById('demoSelect').value || null,
        mapName: document.getElementById('mapSelect').value || null,
        playerName: document.getElementById('playerSelect').value || null,
        team: document.getElementById('teamSelect').value || null
    };
}

function buildQueryString(filters) {
    const params = new URLSearchParams();
    Object.keys(filters).forEach(key => {
        if (filters[key] !== null && filters[key] !== '' && filters[key] !== undefined) {
            params.append(key, filters[key]);
        }
    });
    return params.toString();
}

function showLoading() {
    const containers = ['clutchResults', 'tradeResults', 'firstKillResults', 'economyResults', 'positionResults', 'comprehensiveClutchResults', 'weaponsResults', 'grenadesResults', 'momentumResults', 'coordinationResults', 'consistencyResults', 'damageResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading analytics...</p>
            </div>
        `;
    });
}

async function loadClutchAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/comprehensive-clutch-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayClutchResults(data);
    } else {
        document.getElementById('clutchResults').innerHTML = '<div class="alert alert-danger">Failed to load clutch analysis</div>';
    }
}

async function loadTradeAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/enhanced-trade-kill-optimization?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayTradeResults(data);
    } else {
        document.getElementById('tradeResults').innerHTML = '<div class="alert alert-danger">Failed to load trade analysis</div>';
    }
}

async function loadFirstKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/first-blood-impact-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayFirstKillResults(data);
    } else {
        document.getElementById('firstKillResults').innerHTML = '<div class="alert alert-danger">Failed to load first kill analysis</div>';
    }
}

async function loadEconomyAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economic-efficiency-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayEconomyResults(data);
    } else {
        document.getElementById('economyResults').innerHTML = '<div class="alert alert-danger">Failed to load economy analysis</div>';
    }
}

async function loadPositionAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/positioning-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPositionResults(data);
    } else {
        document.getElementById('positionResults').innerHTML = '<div class="alert alert-danger">Failed to load position analysis</div>';
    }
}

async function loadComprehensiveClutchAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/comprehensive-clutch-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayComprehensiveClutchResults(data);
    } else {
        document.getElementById('comprehensiveClutchResults').innerHTML = '<div class="alert alert-danger">Failed to load comprehensive clutch analysis</div>';
    }
}

function displayClutchResults(response) {
    const container = document.getElementById('clutchResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No clutch situations found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Clutch Type</th>
                        <th>Attempts</th>
                        <th>Wins</th>
                        <th>Success Rate</th>
                        <th>Demos</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const successRate = parseFloat(row.ClutchSuccessRate || 0).toFixed(1);
        const rateClass = successRate > 50 ? 'text-success' : successRate > 25 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.ClutchPlayer}</strong></td>
                <td><span class="badge ${row.ClutchTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.ClutchTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-info">${row.ClutchType}</span></td>
                <td>${row.ClutchAttempts}</td>
                <td>${row.ClutchWins}</td>
                <td><span class="badge ${rateClass === 'text-success' ? 'bg-success' : rateClass === 'text-warning' ? 'bg-warning' : 'bg-danger'}">${successRate}%</span></td>
                <td>${row.DemosPlayed}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayTradeResults(response) {
    const container = document.getElementById('tradeResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No trade kill data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Total Trades</th>
                        <th>Avg Time (s)</th>
                        <th>Fastest (s)</th>
                        <th>Fast Trades (%)</th>
                        <th>Avg Distance</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const avgTime = parseFloat(row.AvgTradeTimeSeconds || 0).toFixed(2);
        const fastestTime = parseFloat(row.FastestTradeSeconds || 0).toFixed(2);
        const fastTradePercentage = parseFloat(row.FastTradePercentage || 0).toFixed(1);
        const avgDistance = parseFloat(row.AvgTradeDistance || 0).toFixed(0);
        
        html += `
            <tr>
                <td><strong>${row.Player}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td>${row.MapName}</td>
                <td>${row.TotalTrades}</td>
                <td>${avgTime}</td>
                <td><span class="badge bg-success">${fastestTime}</span></td>
                <td>${fastTradePercentage}%</td>
                <td>${avgDistance} units</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayFirstKillResults(response) {
    const container = document.getElementById('firstKillResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No first kill data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Type</th>
                        <th>First Kills</th>
                        <th>Rounds Won</th>
                        <th>Win Rate (%)</th>
                        <th>Headshot %</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const winRate = parseFloat(row.FirstKillWinPercentage || 0).toFixed(1);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        const winRateClass = winRate > 60 ? 'bg-success' : winRate > 45 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.Player}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.FirstKillType}</span></td>
                <td>${row.TotalFirstKills}</td>
                <td>${row.RoundsWonAfterFirstKill}</td>
                <td><span class="badge ${winRateClass}">${winRate}%</span></td>
                <td>${headshotRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayEconomyResults(response) {
    const container = document.getElementById('economyResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No economic data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Map</th>
                        <th>Economy Type</th>
                        <th>Total Rounds</th>
                        <th>T Win %</th>
                        <th>CT Win %</th>
                        <th>Avg CT Equipment</th>
                        <th>Avg T Equipment</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const tWinRate = parseFloat(row.TWinPercentage || 0).toFixed(1);
        const ctWinRate = parseFloat(row.CTWinPercentage || 0).toFixed(1);
        const ctEquipment = parseFloat(row.AvgCTEquipmentValue || 0).toFixed(0);
        const tEquipment = parseFloat(row.AvgTEquipmentValue || 0).toFixed(0);
        
        html += `
            <tr>
                <td>${row.MapName}</td>
                <td><span class="badge bg-info">${row.EconomyType}</span></td>
                <td>${row.TotalRounds}</td>
                <td><span class="badge bg-danger">${tWinRate}%</span></td>
                <td><span class="badge bg-primary">${ctWinRate}%</span></td>
                <td>$${ctEquipment}</td>
                <td>$${tEquipment}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPositionResults(response) {
    const container = document.getElementById('positionResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No position data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Map</th>
                        <th>Area</th>
                        <th>Team</th>
                        <th>Deaths</th>
                        <th>Avg Kill Distance</th>
                        <th>Headshot %</th>
                        <th>Position (X,Y)</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const avgDistance = parseFloat(row.AvgKillDistance || 0).toFixed(0);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        const avgX = parseFloat(row.AvgDeathX || 0).toFixed(0);
        const avgY = parseFloat(row.AvgDeathY || 0).toFixed(0);
        
        html += `
            <tr>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.MapArea}</span></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><strong>${row.TotalDeaths}</strong></td>
                <td>${avgDistance} units</td>
                <td>${headshotRate}%</td>
                <td>(${avgX}, ${avgY})</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayComprehensiveClutchResults(response) {
    const container = document.getElementById('comprehensiveClutchResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No comprehensive clutch data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Total Attempts</th>
                        <th>Overall Success %</th>
                        <th>1v2 Success %</th>
                        <th>1v3 Success %</th>
                        <th>1v4+ Success %</th>
                        <th>Healthy vs Low HP</th>
                        <th>Full Buy vs Eco</th>
                        <th>Weapon Mix</th>
                        <th>Avg Equipment</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const overallSuccess = parseFloat(row.OverallClutchSuccessRate || 0).toFixed(1);
        const success1v2 = parseFloat(row.Clutch1v2SuccessRate || 0).toFixed(1);
        const success1v3 = parseFloat(row.Clutch1v3SuccessRate || 0).toFixed(1);
        const success1v4Plus = parseFloat(row.Clutch1v4PlusSuccessRate || 0).toFixed(1);
        
        const healthySuccess = parseFloat(row.HealthyClutchSuccessRate || 0).toFixed(1);
        const lowHealthSuccess = parseFloat(row.LowHealthClutchSuccessRate || 0).toFixed(1);
        const fullBuySuccess = parseFloat(row.FullBuyClutchSuccessRate || 0).toFixed(1);
        const ecoSuccess = parseFloat(row.EcoClutchSuccessRate || 0).toFixed(1);
        
        const avgEquipment = parseFloat(row.AvgClutchEquipmentValue || 0).toFixed(0);
        
        const rifleClutches = row.RifleClutches || 0;
        const awpClutches = row.AwpClutches || 0;
        const pistolClutches = row.PistolClutches || 0;
        
        const overallClass = overallSuccess > 40 ? 'bg-success' : overallSuccess > 20 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.ClutchPlayer}</strong></td>
                <td><span class="badge ${row.ClutchTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.ClutchTeam}</span></td>
                <td>${row.MapName}</td>
                <td>${row.TotalClutchAttempts}</td>
                <td><span class="badge ${overallClass}">${overallSuccess}%</span></td>
                <td>${success1v2}%</td>
                <td>${success1v3}%</td>
                <td>${success1v4Plus}%</td>
                <td>
                    <small class="text-success">${healthySuccess}%</small> vs 
                    <small class="text-danger">${lowHealthSuccess}%</small>
                </td>
                <td>
                    <small class="text-success">${fullBuySuccess}%</small> vs 
                    <small class="text-warning">${ecoSuccess}%</small>
                </td>
                <td>
                    <small>R:${rifleClutches} A:${awpClutches} P:${pistolClutches}</small>
                </td>
                <td>$${avgEquipment}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    
    // Add summary statistics
    html += `
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">💡 Key Insights</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <h6>Health Impact</h6>
                                <p class="text-muted small">Compare "Healthy vs Low HP" columns to see how player condition affects clutch success.</p>
                            </div>
                            <div class="col-md-4">
                                <h6>Economic Correlation</h6>
                                <p class="text-muted small">"Full Buy vs Eco" shows how equipment investment correlates with clutch wins.</p>
                            </div>
                            <div class="col-md-4">
                                <h6>Weapon Preferences</h6>
                                <p class="text-muted small">R=Rifles, A=AWP, P=Pistols. Shows weapon distribution in clutch situations.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    container.innerHTML = html;
}

// Load additional analytics functions
async function loadWeaponsAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/weapon-mastery-analytics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'weaponsResults', 'Weapon Mastery');
    } else {
        document.getElementById('weaponsResults').innerHTML = '<div class="alert alert-danger">Failed to load weapon mastery analytics</div>';
    }
}

async function loadGrenadesAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/grenade-impact-quantification?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'grenadesResults', 'Grenade Impact');
    } else {
        document.getElementById('grenadesResults').innerHTML = '<div class="alert alert-danger">Failed to load grenade impact analytics</div>';
    }
}

async function loadMomentumAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/round-momentum-tracking?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'momentumResults', 'Round Momentum');
    } else {
        document.getElementById('momentumResults').innerHTML = '<div class="alert alert-danger">Failed to load round momentum analytics</div>';
    }
}

async function loadCoordinationAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/team-coordination-metrics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'coordinationResults', 'Team Coordination');
    } else {
        document.getElementById('coordinationResults').innerHTML = '<div class="alert alert-danger">Failed to load team coordination analytics</div>';
    }
}

async function loadConsistencyAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/performance-consistency-profiling?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'consistencyResults', 'Performance Consistency');
    } else {
        document.getElementById('consistencyResults').innerHTML = '<div class="alert alert-danger">Failed to load performance consistency analytics</div>';
    }
}

async function loadDamageAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/damage-efficiency-analytics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'damageResults', 'Damage Efficiency');
    } else {
        document.getElementById('damageResults').innerHTML = '<div class="alert alert-danger">Failed to load damage efficiency analytics</div>';
    }
}

function displayGenericResults(response, containerId, title) {
    const container = document.getElementById(containerId);
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = `<div class="alert alert-info">No ${title} data found for the selected filters.</div>`;
        return;
    }
    
    // Generic table display for complex analytics
    const data = response.Data[0]; // Get first row to determine columns
    const columns = Object.keys(data);
    
    let html = `
        <div class="alert alert-success mb-3">
            <strong>${response.Title}:</strong> ${response.Description}
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>`;
    
    columns.forEach(col => {
        html += `<th>${col.replace(/([A-Z])/g, ' $1').trim()}</th>`;
    });
    
    html += `</tr></thead><tbody>`;
    
    response.Data.forEach(row => {
        html += '<tr>';
        columns.forEach(col => {
            let value = row[col];
            if (typeof value === 'number' && !Number.isInteger(value)) {
                value = value.toFixed(2);
            }
            html += `<td>${value || 'N/A'}</td>`;
        });
        html += '</tr>';
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

async function exportAnalysis(analysisType) {
    const filters = getFilters();
    filters.format = 'csv';
    
    const endpoints = {
        'clutch': 'comprehensive-clutch-analysis',
        'trade': 'enhanced-trade-kill-optimization',
        'first-kill': 'first-blood-impact-analysis',
        'economy': 'economic-efficiency-analysis',
        'position': 'positioning-intelligence',
        'comprehensive-clutch': 'comprehensive-clutch-analysis',
        'weapons': 'weapon-mastery-analytics',
        'grenades': 'grenade-impact-quantification',
        'momentum': 'round-momentum-tracking',
        'coordination': 'team-coordination-metrics',
        'consistency': 'performance-consistency-profiling',
        'damage': 'damage-efficiency-analytics'
    };
    
    const endpoint = endpoints[analysisType];
    if (!endpoint) return;
    
    const params = buildQueryString(filters);
    window.location.href = `/api/advanced-analytics/${endpoint}?${params}`;
}

function showError(message) {
    const containers = ['clutchResults', 'tradeResults', 'firstKillResults', 'economyResults', 'positionResults', 'comprehensiveClutchResults', 'weaponsResults', 'grenadesResults', 'momentumResults', 'coordinationResults', 'consistencyResults', 'damageResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `<div class="alert alert-danger">${message}</div>`;
    });
}
</script>