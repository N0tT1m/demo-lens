@page
@model CS2DemoParserWeb.Pages.AnalyticsModel
@{
    ViewData["Title"] = "Advanced Analytics";
}

<div class="text-center mb-4">
    <h1 class="display-5">üéØ Advanced CS2 Analytics</h1>
    <p class="lead">Deep insights into gameplay patterns, clutch performance, and tactical intelligence</p>
</div>

<div class="row">
    <!-- Analytics Controls -->
    <div class="col-lg-3">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">üìä Analysis Filters</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="demoSelect" class="form-label">Demo File</label>
                    <select class="form-select" id="demoSelect">
                        <option value="">All Demos</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="mapSelect" class="form-label">Map</label>
                    <select class="form-select" id="mapSelect">
                        <option value="">All Maps</option>
                        <option value="de_dust2">de_dust2</option>
                        <option value="de_mirage">de_mirage</option>
                        <option value="de_inferno">de_inferno</option>
                        <option value="de_ancient">de_ancient</option>
                        <option value="de_vertigo">de_vertigo</option>
                        <option value="de_nuke">de_nuke</option>
                        <option value="de_overpass">de_overpass</option>
                        <option value="de_train">de_train</option>
                        <option value="de_cache">de_cache</option>
                        <option value="de_anubis">de_anubis</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="playerSelect" class="form-label">Player</label>
                    <select class="form-select" id="playerSelect">
                        <option value="">All Players</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="teamSelect" class="form-label">Team</label>
                    <select class="form-select" id="teamSelect">
                        <option value="">All Teams</option>
                        <option value="TERRORIST">Terrorist</option>
                        <option value="CT">Counter-Terrorist</option>
                    </select>
                </div>
                
                <button type="button" class="btn btn-primary w-100" onclick="refreshAnalytics()">üîÑ Update Analytics</button>
            </div>
        </div>
    </div>
    
    <!-- Analytics Results -->
    <div class="col-lg-9">
        <!-- Analysis Type Tabs -->
        <ul class="nav nav-tabs" id="analyticsTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="detailed-clutch-tab" data-bs-toggle="tab" data-bs-target="#detailed-clutch" type="button" role="tab">
                    üéØ Detailed Clutch Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="flash-analytics-tab" data-bs-toggle="tab" data-bs-target="#flash-analytics" type="button" role="tab">
                    ‚ö° Flash Usage Analytics
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="enhanced-weapons-tab" data-bs-toggle="tab" data-bs-target="#enhanced-weapons" type="button" role="tab">
                    üî´ Enhanced Weapon Performance
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="positioning-intelligence-tab" data-bs-toggle="tab" data-bs-target="#positioning-intelligence" type="button" role="tab">
                    üìç Advanced Positioning Intelligence
                </button>
            </li>
        </ul>
        
        <!-- Tab Content -->
        <div class="tab-content" id="analyticsTabContent">
            <!-- Detailed Clutch Intelligence -->
            <div class="tab-pane fade show active" id="detailed-clutch" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üéØ Detailed Clutch Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('detailed-clutch')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Advanced Clutch Analysis:</strong> 
                            Analyzes player performance in 1vX situations, success rates, health correlation, and weapon effectiveness.
                        </div>
                        <div id="detailedClutchResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                <p>Click "Update Analytics" to load detailed clutch intelligence data</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Flash Usage Analytics -->
            <div class="tab-pane fade" id="flash-analytics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">‚ö° Flash Usage Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('flash-analytics')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Flash Effectiveness Analysis:</strong> 
                            Measures flash duration, team flash rates, positioning correlation, and tactical impact on round outcomes.
                        </div>
                        <div id="flashAnalyticsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-flash fa-3x mb-3"></i>
                                <p>Analysis of flashbang effectiveness, team flash rates, and positioning correlation</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Weapon Performance -->
            <div class="tab-pane fade" id="enhanced-weapons" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üî´ Enhanced Weapon Performance</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('enhanced-weapons')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Advanced Weapon Analytics:</strong> 
                            Analyzes weapon usage patterns, accuracy, recoil control, range effectiveness, and situational performance.
                        </div>
                        <div id="enhancedWeaponsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Weapon accuracy, usage patterns, recoil control, and range effectiveness analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Advanced Positioning Intelligence -->
            <div class="tab-pane fade" id="positioning-intelligence" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üìç Advanced Positioning Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('positioning-intelligence')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Positioning Analysis:</strong> 
                            Maps death hotspots, analyzes position effectiveness, rotation timing, and tactical positioning patterns.
                        </div>
                        <div id="positioningIntelligenceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map fa-3x mb-3"></i>
                                <p>Death hotspots, position effectiveness, rotation timing, and tactical positioning analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    loadDropdownData();
});

async function loadDropdownData() {
    try {
        // Load demo files
        const demosResponse = await fetch('/api/demo/demos');
        if (demosResponse.ok) {
            const demos = await demosResponse.json();
            const demoSelect = document.getElementById('demoSelect');
            
            // Clear existing options except "All Demos"
            demoSelect.innerHTML = '<option value="">All Demos</option>';
            
            // Add demo options
            demos.forEach(demo => {
                const option = document.createElement('option');
                option.value = demo.id;
                option.textContent = `${demo.fileName} (${demo.mapName})`;
                demoSelect.appendChild(option);
            });
            
            console.log('Loaded', demos.length, 'demo files');
            
            // Also load unique players for player dropdown
            await loadPlayersData();
        } else {
            console.error('Failed to load demos:', demosResponse.status);
        }
    } catch (error) {
        console.error('Error loading dropdown data:', error);
    }
}

async function loadPlayersData() {
    try {
        const playersResponse = await fetch('/api/reports/player-stats?format=json');
        if (playersResponse.ok) {
            const playersData = await playersResponse.json();
            const playerSelect = document.getElementById('playerSelect');
            
            // Clear existing options except "All Players"
            playerSelect.innerHTML = '<option value="">All Players</option>';
            
            // Get unique player names
            const uniquePlayers = [...new Set(playersData.map(p => p.PlayerName))].sort();
            
            // Add player options
            uniquePlayers.forEach(playerName => {
                const option = document.createElement('option');
                option.value = playerName;
                option.textContent = playerName;
                playerSelect.appendChild(option);
            });
            
            console.log('Loaded', uniquePlayers.length, 'unique players');
        }
    } catch (error) {
        console.error('Error loading players data:', error);
    }
}

async function refreshAnalytics() {
    const filters = getFilters();
    
    // Show loading state
    showLoading();
    
    try {
        // Load the 4 Tier 1 analytics in parallel
        await Promise.all([
            loadDetailedClutchAnalysis(filters),
            loadFlashAnalytics(filters),
            loadEnhancedWeaponsAnalysis(filters),
            loadPositioningIntelligenceAnalysis(filters)
        ]);
    } catch (error) {
        console.error('Error refreshing analytics:', error);
        showError('Failed to load analytics data. Please try again.');
    }
}

function getFilters() {
    return {
        demoId: document.getElementById('demoSelect').value || null,
        mapName: document.getElementById('mapSelect').value || null,
        playerName: document.getElementById('playerSelect').value || null,
        team: document.getElementById('teamSelect').value || null
    };
}

function buildQueryString(filters) {
    const params = new URLSearchParams();
    Object.keys(filters).forEach(key => {
        if (filters[key] !== null && filters[key] !== '' && filters[key] !== undefined) {
            params.append(key, filters[key]);
        }
    });
    return params.toString();
}

function showLoading() {
    const containers = ['detailedClutchResults', 'flashAnalyticsResults', 'enhancedWeaponsResults', 'positioningIntelligenceResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading analytics...</p>
            </div>
        `;
    });
}

async function loadDetailedClutchAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/detailed-clutch-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayDetailedClutchResults(data);
    } else {
        document.getElementById('detailedClutchResults').innerHTML = '<div class="alert alert-danger">Failed to load detailed clutch analysis</div>';
    }
}

async function loadFlashAnalytics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/flash-usage-analytics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayFlashAnalyticsResults(data);
    } else {
        document.getElementById('flashAnalyticsResults').innerHTML = '<div class="alert alert-danger">Failed to load flash analytics</div>';
    }
}

async function loadEnhancedWeaponsAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/enhanced-weapon-performance?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayEnhancedWeaponsResults(data);
    } else {
        document.getElementById('enhancedWeaponsResults').innerHTML = '<div class="alert alert-danger">Failed to load enhanced weapons analysis</div>';
    }
}

async function loadPositioningIntelligenceAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/advanced-positioning-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPositioningIntelligenceResults(data);
    } else {
        document.getElementById('positioningIntelligenceResults').innerHTML = '<div class="alert alert-danger">Failed to load positioning intelligence analysis</div>';
    }
}

function displayDetailedClutchResults(response) {
    const container = document.getElementById('detailedClutchResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No detailed clutch data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Total Attempts</th>
                        <th>Clutch Wins</th>
                        <th>Success Rate</th>
                        <th>Avg Health</th>
                        <th>Preferred Weapon</th>
                        <th>Avg Distance</th>
                        <th>Multi-Kill Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const successRate = parseFloat(row.ClutchSuccessRate || 0).toFixed(1);
        const avgHealth = parseFloat(row.AverageClutchHealth || 0).toFixed(0);
        const avgDistance = parseFloat(row.AverageClutchDistance || 0).toFixed(0);
        const multiKillRate = parseFloat(row.MultiKillRate || 0).toFixed(1);
        
        const successClass = successRate > 40 ? 'bg-success' : successRate > 20 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.ClutchPlayer}</strong></td>
                <td>${row.TotalClutchAttempts}</td>
                <td>${row.ClutchWins}</td>
                <td><span class="badge ${successClass}">${successRate}%</span></td>
                <td>${avgHealth} HP</td>
                <td>${row.PreferredClutchWeapon || 'Mixed'}</td>
                <td>${avgDistance} units</td>
                <td>${multiKillRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayFlashAnalyticsResults(response) {
    const container = document.getElementById('flashAnalyticsResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No flash analytics data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Total Flashes</th>
                        <th>Flash Efficiency</th>
                        <th>Team Flash Rate</th>
                        <th>Avg Flash Duration</th>
                        <th>Blind Kills</th>
                        <th>Flash Assists</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const efficiency = parseFloat(row.FlashEfficiency || 0).toFixed(1);
        const teamFlashRate = parseFloat(row.TeamFlashRate || 0).toFixed(1);
        const avgDuration = parseFloat(row.AverageFlashDuration || 0).toFixed(2);
        
        const efficiencyClass = efficiency > 70 ? 'text-success' : efficiency > 40 ? 'text-warning' : 'text-danger';
        const teamFlashClass = teamFlashRate < 15 ? 'text-success' : teamFlashRate < 30 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.FlasherPlayer}</strong></td>
                <td><span class="badge ${row.FlasherPlayerTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.FlasherPlayerTeam}</span></td>
                <td>${row.TotalFlashes}</td>
                <td><span class="${efficiencyClass}">${efficiency}%</span></td>
                <td><span class="${teamFlashClass}">${teamFlashRate}%</span></td>
                <td>${avgDuration}s</td>
                <td>${row.BlindKills || 0}</td>
                <td>${row.FlashAssists || 0}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayEnhancedWeaponsResults(response) {
    const container = document.getElementById('enhancedWeaponsResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No enhanced weapons data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Weapon</th>
                        <th>Total Fires</th>
                        <th>Accuracy</th>
                        <th>Headshot %</th>
                        <th>Avg Recoil</th>
                        <th>Range Efficiency</th>
                        <th>Blind Shots</th>
                        <th>Through Smoke</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const accuracy = parseFloat(row.WeaponAccuracy || 0).toFixed(1);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        const avgRecoil = parseFloat(row.AverageRecoilIndex || 0).toFixed(2);
        const rangeEfficiency = parseFloat(row.RangeEfficiency || 0).toFixed(1);
        
        const accuracyClass = accuracy > 25 ? 'text-success' : accuracy > 15 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge bg-secondary">${row.Weapon}</span></td>
                <td>${row.TotalShots}</td>
                <td><span class="${accuracyClass}">${accuracy}%</span></td>
                <td>${headshotRate}%</td>
                <td>${avgRecoil}</td>
                <td>${rangeEfficiency}%</td>
                <td>${row.BlindShots || 0}</td>
                <td>${row.ThroughSmokeShots || 0}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPositioningIntelligenceResults(response) {
    const container = document.getElementById('positioningIntelligenceResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No positioning intelligence data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Map Area</th>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Position Events</th>
                        <th>Survival Rate</th>
                        <th>Avg Position Time</th>
                        <th>Kill/Death Ratio</th>
                        <th>Engagement Range</th>
                        <th>Position (X,Y,Z)</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const survivalRate = parseFloat(row.PositionSurvivalRate || 0).toFixed(1);
        const avgTime = parseFloat(row.AveragePositionTime || 0).toFixed(1);
        const kdRatio = parseFloat(row.KillDeathRatio || 0).toFixed(2);
        const engagementRange = parseFloat(row.AverageEngagementRange || 0).toFixed(0);
        
        const survivalClass = survivalRate > 60 ? 'text-success' : survivalRate > 40 ? 'text-warning' : 'text-danger';
        const kdClass = kdRatio > 1.0 ? 'text-success' : kdRatio > 0.8 ? 'text-warning' : 'text-danger';
        
        const avgX = parseFloat(row.AveragePositionX || 0).toFixed(0);
        const avgY = parseFloat(row.AveragePositionY || 0).toFixed(0);
        const avgZ = parseFloat(row.AveragePositionZ || 0).toFixed(0);
        
        html += `
            <tr>
                <td><span class="badge bg-info">${row.MapArea}</span></td>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td>${row.TotalPositionEvents}</td>
                <td><span class="${survivalClass}">${survivalRate}%</span></td>
                <td>${avgTime}s</td>
                <td><span class="${kdClass}">${kdRatio}</span></td>
                <td>${engagementRange} units</td>
                <td><small>(${avgX}, ${avgY}, ${avgZ})</small></td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

async function exportAnalysis(analysisType) {
    const filters = getFilters();
    filters.format = 'csv';
    
    const endpoints = {
        'detailed-clutch': 'detailed-clutch-intelligence',
        'flash-analytics': 'flash-usage-analytics',
        'enhanced-weapons': 'enhanced-weapon-performance',
        'positioning-intelligence': 'advanced-positioning-intelligence'
    };
    
    const endpoint = endpoints[analysisType];
    if (!endpoint) return;
    
    const params = buildQueryString(filters);
    window.location.href = `/api/advanced-analytics/${endpoint}?${params}`;
}

function showError(message) {
    const containers = ['detailedClutchResults', 'flashAnalyticsResults', 'enhancedWeaponsResults', 'positioningIntelligenceResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `<div class="alert alert-danger">${message}</div>`;
    });
}
</script>