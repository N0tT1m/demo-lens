@page
@model CS2DemoParserWeb.Pages.AnalyticsModel
@{
    ViewData["Title"] = "Advanced Analytics";
}

<div class="container-fluid">
    <div class="text-center mb-4">
        <h1 class="display-5">🎯 Advanced CS2 Analytics</h1>
        <p class="lead">Deep insights into gameplay patterns, clutch performance, and tactical intelligence</p>
    </div>

    <!-- Top Filters Bar -->
    <div class="card mb-4 filters-card">
        <div class="card-body py-3">
            <div class="row align-items-end">
                <div class="col-md-2">
                    <label for="demoSelect" class="form-label fw-semibold">📁 Demo File</label>
                    <select class="form-select form-select-sm" id="demoSelect">
                        <option value="">All Demos</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="mapSelect" class="form-label fw-semibold">🗺️ Map</label>
                    <select class="form-select form-select-sm" id="mapSelect">
                        <option value="">All Maps</option>
                        <option value="de_dust2">de_dust2</option>
                        <option value="de_mirage">de_mirage</option>
                        <option value="de_inferno">de_inferno</option>
                        <option value="de_ancient">de_ancient</option>
                        <option value="de_vertigo">de_vertigo</option>
                        <option value="de_nuke">de_nuke</option>
                        <option value="de_overpass">de_overpass</option>
                        <option value="de_train">de_train</option>
                        <option value="de_cache">de_cache</option>
                        <option value="de_anubis">de_anubis</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="playerSelect" class="form-label fw-semibold">👤 Player</label>
                    <select class="form-select form-select-sm" id="playerSelect">
                        <option value="">All Players</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="teamSelect" class="form-label fw-semibold">⚔️ Team</label>
                    <select class="form-select form-select-sm" id="teamSelect">
                        <option value="">All Teams</option>
                        <option value="TERRORIST">Terrorist</option>
                        <option value="CT">Counter-Terrorist</option>
                    </select>
                </div>
                
                <div class="col-md-3">
                    <button type="button" class="btn btn-primary btn-sm px-4" onclick="refreshAnalytics()">
                        <i class="fas fa-sync-alt me-2"></i>Update Analytics
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm ms-2 px-4 clear-filters-btn" onclick="clearFilters()">
                        <i class="fas fa-eraser me-2"></i>Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Analytics Results - Full Width -->
    <div class="row">
        <div class="col-12">
        <!-- Analysis Type Tabs -->
        <ul class="nav nav-tabs" id="analyticsTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="clutch-tab" data-bs-toggle="tab" data-bs-target="#clutch" type="button" role="tab">
                    🎯 Clutch Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="trade-kill-tab" data-bs-toggle="tab" data-bs-target="#trade-kill" type="button" role="tab">
                    ⚡ Trade Kills
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="first-kill-tab" data-bs-toggle="tab" data-bs-target="#first-kill" type="button" role="tab">
                    🥇 First Kill Impact
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economy-tab" data-bs-toggle="tab" data-bs-target="#economy" type="button" role="tab">
                    💰 Economy Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="performance-tab" data-bs-toggle="tab" data-bs-target="#performance" type="button" role="tab">
                    🏆 Player Performance
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="position-tab" data-bs-toggle="tab" data-bs-target="#position" type="button" role="tab">
                    📍 Position Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="master-analytics-tab" data-bs-toggle="tab" data-bs-target="#master-analytics" type="button" role="tab">
                    🏆 Master Analytics
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="situation-analysis-tab" data-bs-toggle="tab" data-bs-target="#situation-analysis" type="button" role="tab">
                    🎮 Situational Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button" role="tab">
                    📦 Player Inventory
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="positioning-tab" data-bs-toggle="tab" data-bs-target="#positioning" type="button" role="tab">
                    🗺️ Positioning Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="weapon-intelligence-tab" data-bs-toggle="tab" data-bs-target="#weapon-intelligence" type="button" role="tab">
                    🔫 Weapon Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="circumstantial-tab" data-bs-toggle="tab" data-bs-target="#circumstantial" type="button" role="tab">
                    🌪️ Circumstantial Combat
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="team-coordination-tab" data-bs-toggle="tab" data-bs-target="#team-coordination" type="button" role="tab">
                    🤝 Team Coordination
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economic-intelligence-tab" data-bs-toggle="tab" data-bs-target="#economic-intelligence" type="button" role="tab">
                    💡 Economic Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="pressure-metrics-tab" data-bs-toggle="tab" data-bs-target="#pressure-metrics" type="button" role="tab">
                    💪 Pressure Metrics
                </button>
            </li>
        </ul>
        
        <!-- Tab Content -->
        <div class="tab-content" id="analyticsTabContent">
            <!-- Clutch Analysis -->
            <div class="tab-pane fade show active" id="clutch" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🎯 Clutch Situation Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('clutch')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Clutch Analysis:</strong> 
                            Analysis of 1vX clutch situations and success rates.
                        </div>
                        <div id="clutchResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                <p>Click "Update Analytics" to load clutch analysis data</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Trade Kill Analysis -->
            <div class="tab-pane fade" id="trade-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">⚡ Trade Kill Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('trade-kill')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Trade Kill Analysis:</strong> 
                            Analysis of how quickly teammates trade frags and refrag effectiveness.
                        </div>
                        <div id="tradeKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-exchange-alt fa-3x mb-3"></i>
                                <p>Analysis of trade kill timing and effectiveness</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Economy Intelligence -->
            <div class="tab-pane fade" id="economy" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">💰 Economy Intelligence Dashboard</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economy')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Economy Intelligence:</strong> 
                            Advanced economy analysis including money efficiency, equipment ROI, and economic state performance correlation.
                        </div>
                        <div id="economyResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-dollar-sign fa-3x mb-3"></i>
                                <p>Money efficiency analysis, equipment ROI, and economic state correlation</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Advanced Player Performance -->
            <div class="tab-pane fade" id="performance" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🏆 Advanced Player Performance Matrix</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('performance')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Performance Matrix:</strong> 
                            Comprehensive player analysis including HLTV-style ratings, consistency scoring, and multi-kill performance.
                        </div>
                        <div id="performanceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-trophy fa-3x mb-3"></i>
                                <p>HLTV-style ratings, consistency metrics, and multi-kill analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- First Kill Impact -->
            <div class="tab-pane fade" id="first-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🥇 First Kill Impact</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('first-kill')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>First Kill Impact:</strong> 
                            Impact of opening frags on round outcomes and team performance.
                        </div>
                        <div id="firstKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Impact of opening frags on round outcomes</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Position Analysis -->
            <div class="tab-pane fade" id="position" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">📍 Position Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('position')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Position Analysis:</strong> 
                            Death hotspots and dangerous areas by map location analysis.
                        </div>
                        <div id="positionResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map fa-3x mb-3"></i>
                                <p>Death hotspots and dangerous areas by map location</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Master Analytics Dashboard -->
            <div class="tab-pane fade" id="master-analytics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🏆 Master Analytics Dashboard</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('master-analytics')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Master Analytics:</strong> 
                            Comprehensive multi-dimensional analysis integrating all game data: combat, utility, economy, objectives, and performance intelligence with 50+ advanced metrics.
                        </div>
                        <div id="masterAnalyticsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-line fa-3x mb-3"></i>
                                <p>Comprehensive player performance across all dimensions</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Situational Analysis -->
            <div class="tab-pane fade" id="situation-analysis" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🎮 Situational Performance Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('situation-analysis')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Situational Analysis:</strong> 
                            Deep dive into player performance across different game situations: clutches, economy states, utility conditions, and time phases with pressure performance scoring.
                        </div>
                        <div id="situationResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Performance analysis across high-pressure situations</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Player Inventory -->
            <div class="tab-pane fade" id="inventory" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">📦 Player Inventory Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('inventory')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Inventory Analysis:</strong> 
                            Detailed round-by-round player equipment, economy, and loadout analysis with purchase pattern intelligence.
                        </div>
                        <div id="inventoryResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                                <p>Round-by-round equipment and economic analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Positioning Analysis -->
            <div class="tab-pane fade" id="positioning" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🗺️ Positioning & Movement Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('positioning')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Positioning Analysis:</strong> 
                            Site control effectiveness, crossfire positioning, retake positioning success, and movement pattern analysis.
                        </div>
                        <div id="positioningResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map-marker-alt fa-3x mb-3"></i>
                                <p>Tactical positioning and map control analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Weapon Intelligence -->
            <div class="tab-pane fade" id="weapon-intelligence" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🔫 Advanced Weapon Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('weapon-intelligence')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Weapon Intelligence:</strong> 
                            Ammo management efficiency, spray control mastery, movement shooting vs static accuracy, and weapon configuration optimization.
                        </div>
                        <div id="weaponIntelligenceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Advanced weapon performance and efficiency analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Circumstantial Combat -->
            <div class="tab-pane fade" id="circumstantial" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🌪️ Advanced Circumstantial Combat</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('circumstantial')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Circumstantial Combat:</strong> 
                            Multi-handicap performance (smoke + blind + movement), flash coordination effectiveness, and wallbang mastery analysis.
                        </div>
                        <div id="circumstantialResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-eye-slash fa-3x mb-3"></i>
                                <p>Performance under adverse conditions and environmental challenges</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Team Coordination -->
            <div class="tab-pane fade" id="team-coordination" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">🤝 Team Coordination Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('team-coordination')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Team Coordination:</strong> 
                            Flash coordination with teammates, utility teamwork ratios, site support effectiveness, and coordinated execution timing.
                        </div>
                        <div id="teamCoordinationResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-users fa-3x mb-3"></i>
                                <p>Teamwork efficiency and coordination analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Economic Intelligence -->
            <div class="tab-pane fade" id="economic-intelligence" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">💡 Economic Intelligence Enhancement</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economic-intelligence')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Economic Intelligence:</strong> 
                            Buy pattern analysis, eco performance effectiveness, investment ROI calculations, performance per dollar metrics, and economic IQ scoring.
                        </div>
                        <div id="economicIntelligenceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-calculator fa-3x mb-3"></i>
                                <p>Advanced economic decision making and investment efficiency</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Pressure Metrics -->
            <div class="tab-pane fade" id="pressure-metrics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">💪 Psychological Pressure Metrics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('pressure-metrics')">📥 Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Pressure Metrics:</strong> 
                            High-pressure performance scaling, clutch success rates, objective completion under fire, mental resilience indicators, and comeback potential analysis.
                        </div>
                        <div id="pressureMetricsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-heartbeat fa-3x mb-3"></i>
                                <p>Performance under pressure and mental resilience analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
</div>

<!-- Enhanced CSS for professional analytics interface -->
<style>
/* Global improvements */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.container-fluid {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    margin: 20px auto;
    padding: 30px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    max-width: 98%;
}

/* Header styling */
.display-5 {
    font-weight: 700;
    color: #2c3e50;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
}

.lead {
    color: #7f8c8d;
    font-weight: 400;
}

/* Enhanced table styling - Full width optimization */
.analytics-table {
    width: 100%;
    min-width: 1600px;
    font-size: 0.87rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

.analytics-table th {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    font-weight: 600;
    text-align: center;
    padding: 12px 8px;
    border: none;
    position: sticky;
    top: 0;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.analytics-table td {
    padding: 10px 8px;
    border: 1px solid #e8f4f8;
    text-align: center;
    background: rgba(255, 255, 255, 0.9);
    transition: all 0.2s ease;
}

.analytics-table tr:hover td {
    background: rgba(102, 126, 234, 0.1);
    transform: translateY(-1px);
}

.table-responsive {
    max-height: 650px;
    overflow-x: auto;
    overflow-y: auto;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border: 1px solid #e8f4f8;
}

/* Enhanced tabs */
.nav-tabs {
    flex-wrap: wrap;
    border-bottom: 3px solid #667eea;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 10px 10px 0 0;
    padding: 5px 10px 0 10px;
}

.nav-tabs .nav-link {
    padding: 12px 16px;
    margin-right: 3px;
    margin-bottom: 5px;
    border: 2px solid transparent;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.9rem;
    white-space: nowrap;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.7);
    color: #495057;
}

.nav-tabs .nav-link:hover {
    background: rgba(102, 126, 234, 0.1);
    border-color: #667eea;
    transform: translateY(-2px);
}

.nav-tabs .nav-link.active {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-color: #667eea;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

/* Enhanced cards */
.card {
    border: none;
    border-radius: 15px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    overflow: hidden;
}

.card-header {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-bottom: none;
    padding: 1.5rem;
    font-weight: 600;
}

.card-body {
    padding: 1.5rem;
}

/* Sidebar enhancements */
.col-lg-3 .card {
    background: rgba(255, 255, 255, 0.9);
    position: sticky;
    top: 20px;
}

.form-select, .form-control {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
}

.form-select:focus, .form-control:focus {
    border-color: #667eea;
    box-shadow: 0 0 15px rgba(102, 126, 234, 0.2);
}

/* Enhanced buttons */
.btn-primary {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border: none;
    border-radius: 25px;
    padding: 12px 30px;
    font-weight: 600;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.btn-outline-primary {
    border-color: #667eea;
    color: #667eea;
    border-radius: 20px;
    transition: all 0.3s ease;
}

.btn-outline-primary:hover {
    background: #667eea;
    border-color: #667eea;
    transform: translateY(-1px);
}

/* Layout improvements - Full width for analytics */
.filters-card {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(102, 126, 234, 0.2);
}

.filters-card .card-body {
    padding: 1rem 1.5rem;
}

.filters-card .form-label {
    margin-bottom: 4px;
    font-size: 0.85rem;
    color: #495057;
}

.form-select-sm {
    font-size: 0.875rem;
    padding: 0.375rem 0.75rem;
}

.tab-content .card {
    margin-top: 0;
    border-radius: 0 10px 10px 10px;
}

/* Alert styling */
.alert {
    border-radius: 10px;
    border: none;
    font-weight: 500;
}

.alert-info {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
    color: #495057;
    border-left: 4px solid #667eea;
}

/* Enhanced badges */
.badge {
    border-radius: 12px;
    font-weight: 600;
    padding: 6px 12px;
}

/* Performance indicators */
.text-success { 
    color: #28a745 !important; 
    font-weight: 600;
}

.text-danger { 
    color: #dc3545 !important; 
    font-weight: 600;
}

.text-warning { 
    color: #ffc107 !important; 
    font-weight: 600;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
}

/* Metric badges */
.metric-badge {
    display: inline-block;
    padding: 6px 12px;
    margin: 2px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    transition: all 0.2s ease;
}

.metric-badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.metric-badge.high { 
    background: linear-gradient(135deg, #d4edda, #c3e6cb); 
    color: #155724; 
    border: 1px solid #b8dacc;
}

.metric-badge.medium { 
    background: linear-gradient(135deg, #fff3cd, #ffeaa7); 
    color: #856404; 
    border: 1px solid #f6d973;
}

.metric-badge.low { 
    background: linear-gradient(135deg, #f8d7da, #f5c6cb); 
    color: #721c24; 
    border: 1px solid #ed969e;
}

/* Loading improvements */
.loading-spinner {
    display: inline-block;
    width: 24px;
    height: 24px;
    border: 3px solid rgba(102, 126, 234, 0.3);
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive enhancements for full-width layout */
@@media (max-width: 1600px) {
    .analytics-table {
        min-width: 1400px;
        font-size: 0.83rem;
    }
}

@@media (max-width: 1400px) {
    .analytics-table {
        min-width: 1200px;
        font-size: 0.8rem;
    }
}

@@media (max-width: 1200px) {
    .container-fluid {
        margin: 10px;
        padding: 20px;
    }
    
    .nav-tabs .nav-link {
        padding: 8px 12px;
        font-size: 0.85rem;
    }
    
    .filters-card .row {
        row-gap: 0.5rem;
    }
    
    .filters-card [class*="col-md-"] {
        flex: 0 0 auto;
        width: 50%;
    }
    
    .filters-card .col-md-3 {
        width: 100%;
        text-align: center;
        margin-top: 1rem;
    }
}

@@media (max-width: 768px) {
    .analytics-table {
        min-width: 900px;
        font-size: 0.75rem;
    }
    
    .display-5 {
        font-size: 1.8rem;
    }
    
    .filters-card [class*="col-md-"] {
        width: 100%;
        margin-bottom: 0.5rem;
    }
    
    .nav-tabs .nav-link {
        padding: 6px 10px;
        font-size: 0.8rem;
        margin-right: 1px;
    }
}

/* Scrollbar styling */
.table-responsive::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

.table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.table-responsive::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 4px;
}

.table-responsive::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #5a6fd8, #6a4c93);
}

/* Animation for content loading */
.tab-pane {
    animation: fadeIn 0.3s ease-in-out;
}

@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Header icons */
.card-title i, .nav-link i {
    margin-right: 8px;
}

/* Clear Filters Button Styling - Match Update Analytics */
.clear-filters-btn {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
    border: none;
    color: white;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);
}

.clear-filters-btn:hover {
    background: linear-gradient(135deg, #c82333 0%, #a02430 100%);
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.4);
}

.clear-filters-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 6px rgba(220, 53, 69, 0.4);
}

/* Dark Mode Compatibility */
[data-theme="dark"] body {
    background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
    color: #e2e8f0;
}

[data-theme="dark"] .filters-card {
    background: rgba(45, 55, 72, 0.9);
    border-color: rgba(226, 232, 240, 0.1);
}

[data-theme="dark"] .form-control, [data-theme="dark"] .form-select {
    background: rgba(45, 55, 72, 0.8);
    border-color: rgba(226, 232, 240, 0.2);
    color: #e2e8f0;
}

[data-theme="dark"] .form-control:focus, [data-theme="dark"] .form-select:focus {
    background: rgba(45, 55, 72, 0.9);
    border-color: #667eea;
    color: #e2e8f0;
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

[data-theme="dark"] .card {
    background: rgba(45, 55, 72, 0.9);
    border-color: rgba(226, 232, 240, 0.1);
    color: #e2e8f0;
}

[data-theme="dark"] .nav-tabs .nav-link {
    background: rgba(45, 55, 72, 0.7);
    border-color: rgba(226, 232, 240, 0.1);
    color: #a0aec0;
}

[data-theme="dark"] .nav-tabs .nav-link.active {
    background: rgba(102, 126, 234, 0.9);
    border-color: rgba(102, 126, 234, 0.5);
    color: white;
}

[data-theme="dark"] .table {
    color: #e2e8f0;
}

[data-theme="dark"] .table thead th {
    background: rgba(45, 55, 72, 0.9);
    border-color: rgba(226, 232, 240, 0.1);
    color: #e2e8f0;
}

[data-theme="dark"] .table tbody tr:hover {
    background: rgba(102, 126, 234, 0.1);
}

[data-theme="dark"] .clear-filters-btn {
    background: linear-gradient(135deg, #e53e3e 0%, #c53030 100%);
    border: none;
    color: white;
    box-shadow: 0 2px 8px rgba(229, 62, 62, 0.4);
}

[data-theme="dark"] .clear-filters-btn:hover {
    background: linear-gradient(135deg, #c53030 0%, #9c2626 100%);
    color: white;
    box-shadow: 0 4px 12px rgba(229, 62, 62, 0.5);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    loadDropdownData();
});

async function loadDropdownData() {
    try {
        // Load demo files
        const demosResponse = await fetch('/api/demo/demos');
        if (demosResponse.ok) {
            const demos = await demosResponse.json();
            const demoSelect = document.getElementById('demoSelect');
            
            // Clear existing options except "All Demos"
            demoSelect.innerHTML = '<option value="">All Demos</option>';
            
            // Add demo options
            demos.forEach(demo => {
                const option = document.createElement('option');
                option.value = demo.id;
                option.textContent = `${demo.fileName} (${demo.mapName})`;
                demoSelect.appendChild(option);
            });
            
            console.log('Loaded', demos.length, 'demo files');
            
            // Also load unique players for player dropdown
            await loadPlayersData();
        } else {
            console.error('Failed to load demos:', demosResponse.status);
        }
    } catch (error) {
        console.error('Error loading dropdown data:', error);
    }
}

async function loadPlayersData() {
    try {
        const playersResponse = await fetch('/api/reports/player-stats?format=json');
        if (playersResponse.ok) {
            const playersData = await playersResponse.json();
            const playerSelect = document.getElementById('playerSelect');
            
            // Clear existing options except "All Players"
            playerSelect.innerHTML = '<option value="">All Players</option>';
            
            // Get unique player names
            const uniquePlayers = [...new Set(playersData.map(p => p.PlayerName))].sort();
            
            // Add player options
            uniquePlayers.forEach(playerName => {
                const option = document.createElement('option');
                option.value = playerName;
                option.textContent = playerName;
                playerSelect.appendChild(option);
            });
            
            console.log('Loaded', uniquePlayers.length, 'unique players');
        }
    } catch (error) {
        console.error('Error loading players data:', error);
    }
}

async function refreshAnalytics() {
    const filters = getFilters();
    
    // Show loading state
    showLoading();
    
    try {
        // Load all 15 analytics in parallel
        await Promise.all([
            loadClutchAnalysis(filters),
            loadTradeKillAnalysis(filters),
            loadFirstKillAnalysis(filters),
            loadEconomyIntelligence(filters),
            loadPlayerPerformance(filters),
            loadPositionAnalysis(filters),
            loadMasterAnalytics(filters),
            loadSituationAnalysis(filters),
            loadInventoryAnalysis(filters),
            loadPositioningAnalysis(filters),
            loadWeaponIntelligence(filters),
            loadCircumstantialCombat(filters),
            loadTeamCoordination(filters),
            loadEconomicIntelligence(filters),
            loadPressureMetrics(filters)
        ]);
    } catch (error) {
        console.error('Error refreshing analytics:', error);
        showError('Failed to load analytics data. Please try again.');
    }
}

function getFilters() {
    return {
        demoId: document.getElementById('demoSelect').value || null,
        mapName: document.getElementById('mapSelect').value || null,
        playerName: document.getElementById('playerSelect').value || null,
        team: document.getElementById('teamSelect').value || null
    };
}

function buildQueryString(filters) {
    const params = new URLSearchParams();
    Object.keys(filters).forEach(key => {
        if (filters[key] !== null && filters[key] !== '' && filters[key] !== undefined) {
            params.append(key, filters[key]);
        }
    });
    return params.toString();
}

function showLoading() {
    const containers = ['clutchResults', 'tradeKillResults', 'firstKillResults', 'economyResults', 'performanceResults', 'positionResults', 'masterAnalyticsResults', 'situationResults', 'inventoryResults', 'positioningResults', 'weaponIntelligenceResults', 'circumstantialResults', 'teamCoordinationResults', 'economicIntelligenceResults', 'pressureMetricsResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading analytics...</p>
            </div>
        `;
    });
}

async function loadClutchAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/clutch-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayClutchResults(data);
    } else {
        document.getElementById('clutchResults').innerHTML = '<div class="alert alert-danger">Failed to load clutch analysis</div>';
    }
}

async function loadTradeKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/trade-kill-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayTradeKillResults(data);
    } else {
        document.getElementById('tradeKillResults').innerHTML = '<div class="alert alert-danger">Failed to load trade kill analysis</div>';
    }
}

async function loadEconomyIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economy-intelligence-dashboard?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayEconomyResults(data);
    } else {
        document.getElementById('economyResults').innerHTML = '<div class="alert alert-danger">Failed to load economy intelligence</div>';
    }
}

async function loadFirstKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/first-kill-impact?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayFirstKillResults(data);
    } else {
        document.getElementById('firstKillResults').innerHTML = '<div class="alert alert-danger">Failed to load first kill analysis</div>';
    }
}

async function loadPlayerPerformance(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/advanced-player-performance?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPerformanceResults(data);
    } else {
        document.getElementById('performanceResults').innerHTML = '<div class="alert alert-danger">Failed to load player performance</div>';
    }
}

async function loadPositionAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/position-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPositionResults(data);
    } else {
        document.getElementById('positionResults').innerHTML = '<div class="alert alert-danger">Failed to load position analysis</div>';
    }
}

async function loadMasterAnalytics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/master-analytics-dashboard?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayMasterAnalyticsResults(data);
    } else {
        document.getElementById('masterAnalyticsResults').innerHTML = '<div class="alert alert-danger">Failed to load master analytics</div>';
    }
}

async function loadSituationAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/situation-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displaySituationResults(data);
    } else {
        document.getElementById('situationResults').innerHTML = '<div class="alert alert-danger">Failed to load situation analysis</div>';
    }
}

async function loadInventoryAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/player-inventory?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayInventoryResults(data);
    } else {
        document.getElementById('inventoryResults').innerHTML = '<div class="alert alert-danger">Failed to load inventory analysis</div>';
    }
}

function displayClutchResults(response) {
    const container = document.getElementById('clutchResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No clutch data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Clutch Type</th>
                        <th>Attempts</th>
                        <th>Wins</th>
                        <th>Success Rate</th>
                        <th>Demos</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const successRate = parseFloat(row.ClutchSuccessRate || 0).toFixed(1);
        const successClass = successRate > 50 ? 'bg-success' : successRate > 25 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.ClutchPlayer}</strong></td>
                <td><span class="badge ${row.ClutchTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.ClutchTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-info">${row.ClutchType}</span></td>
                <td>${row.ClutchAttempts}</td>
                <td>${row.ClutchWins}</td>
                <td><span class="badge ${successClass}">${successRate}%</span></td>
                <td>${row.DemosPlayed}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayTradeKillResults(response) {
    const container = document.getElementById('tradeKillResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No trade kill data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Total Trades</th>
                        <th>Avg Time (s)</th>
                        <th>Fastest (s)</th>
                        <th>Fast Trade %</th>
                        <th>Avg Distance</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const avgTime = parseFloat(row.AvgTradeTimeSeconds || 0).toFixed(2);
        const fastestTime = parseFloat(row.FastestTradeSeconds || 0).toFixed(2);
        const avgDistance = parseFloat(row.AvgTradeDistance || 0).toFixed(0);
        const fastTradePercentage = parseFloat(row.FastTradePercentage || 0).toFixed(1);
        
        html += `
            <tr>
                <td><strong>${row.Player}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td>${row.MapName}</td>
                <td>${row.TotalTrades}</td>
                <td>${avgTime}</td>
                <td><span class="badge bg-success">${fastestTime}</span></td>
                <td>${fastTradePercentage}%</td>
                <td>${avgDistance} units</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayEconomyResults(response) {
    const container = document.getElementById('economyResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No economy data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Economy State</th>
                        <th>Win %</th>
                        <th>Equipment ROI</th>
                        <th>Damage/$</th>
                        <th>Avg Equipment Value</th>
                        <th>Low Money Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const winRate = parseFloat(row.WinPercentage || 0).toFixed(1);
        const equipmentROI = parseFloat(row.AvgEquipmentROI || 0).toFixed(3);
        const damagePerDollar = parseFloat(row.AvgDamagePerDollar || 0).toFixed(3);
        const avgEquipment = parseFloat(row.AvgEquipmentValue || 0).toFixed(0);
        const lowMoneyRate = parseFloat(row.LowMoneyRate || 0).toFixed(1);
        
        const winRateClass = winRate > 60 ? 'text-success' : winRate > 45 ? 'text-warning' : 'text-danger';
        const roiClass = equipmentROI > 0.15 ? 'text-success' : equipmentROI > 0.1 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><span class="badge bg-info">${row.EconomyState}</span></td>
                <td><span class="${winRateClass}">${winRate}%</span></td>
                <td><span class="${roiClass}">${equipmentROI}</span></td>
                <td>${damagePerDollar}</td>
                <td>$${avgEquipment}</td>
                <td>${lowMoneyRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPerformanceResults(response) {
    const container = document.getElementById('performanceResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No performance data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Efficiency Score</th>
                        <th>Impact Rating</th>
                        <th>Multi-Kills</th>
                        <th>Survival Rate</th>
                        <th>Consistency</th>
                        <th>Win Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const efficiencyScore = parseFloat(row.EfficiencyScore || 0).toFixed(2);
        const impactRating = parseFloat(row.AvgImpactRating || 0).toFixed(2);
        const survivalRate = parseFloat(row.SurvivalRate || 0).toFixed(1);
        const consistency = (1 / (parseFloat(row.RatingConsistency || 1) + 0.1)).toFixed(2);
        const winRate = parseFloat(row.WinRate || 0).toFixed(1);
        
        const efficiencyClass = efficiencyScore > 1.0 ? 'text-success' : efficiencyScore > 0.7 ? 'text-warning' : 'text-danger';
        const multiKills = (row.TripleKills || 0) + (row.QuadKills || 0);
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><span class="${efficiencyClass}">${efficiencyScore}</span></td>
                <td>${impactRating}</td>
                <td><span class="badge bg-success">${multiKills}</span></td>
                <td>${survivalRate}%</td>
                <td>${consistency}</td>
                <td>${winRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayFirstKillResults(response) {
    const container = document.getElementById('firstKillResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No first kill data found for the selected filters. This endpoint may need configuration or data is not available.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Type</th>
                        <th>First Kills</th>
                        <th>Rounds Won</th>
                        <th>Win Rate (%)</th>
                        <th>Headshot %</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const winRate = parseFloat(row.FirstKillWinPercentage || 0).toFixed(1);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        const winRateClass = winRate > 60 ? 'bg-success' : winRate > 45 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.FirstKiller}</strong></td>
                <td><span class="badge ${row.FirstKillerTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.FirstKillerTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.FirstKillType}</span></td>
                <td>${row.TotalFirstKills}</td>
                <td>${row.RoundsWonAfterFirstKill}</td>
                <td><span class="badge ${winRateClass}">${winRate}%</span></td>
                <td>${headshotRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPositionResults(response) {
    const container = document.getElementById('positionResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No position data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Map</th>
                        <th>Area</th>
                        <th>Team</th>
                        <th>Deaths</th>
                        <th>Avg Kill Distance</th>
                        <th>Headshot %</th>
                        <th>Headshot Deaths</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const avgDistance = parseFloat(row.AvgKillDistance || 0).toFixed(0);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        
        html += `
            <tr>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.MapArea}</span></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><strong>${row.TotalDeaths}</strong></td>
                <td>${avgDistance} units</td>
                <td>${headshotRate}%</td>
                <td>${row.HeadshotDeaths}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

async function exportAnalysis(analysisType) {
    const filters = getFilters();
    filters.format = 'csv';
    
    const endpoints = {
        'clutch': 'clutch-analysis',
        'trade-kill': 'trade-kill-analysis',
        'first-kill': 'first-kill-impact',
        'economy': 'economy-intelligence-dashboard',
        'performance': 'advanced-player-performance',
        'position': 'position-analysis',
        'master-analytics': 'master-analytics-dashboard',
        'situation-analysis': 'situation-analysis',
        'inventory': 'player-inventory',
        'positioning': 'positioning-analysis',
        'weapon-intelligence': 'weapon-intelligence',
        'circumstantial': 'circumstantial-combat',
        'team-coordination': 'team-coordination',
        'economic-intelligence': 'economic-intelligence',
        'pressure-metrics': 'pressure-metrics'
    };
    
    const endpoint = endpoints[analysisType];
    if (!endpoint) return;
    
    const params = buildQueryString(filters);
    window.location.href = `/api/advanced-analytics/${endpoint}?${params}`;
}

function displayMasterAnalyticsResults(response) {
    const container = document.getElementById('masterAnalyticsResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No master analytics data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Performance Score</th>
                        <th>K/D Ratio</th>
                        <th>Headshot %</th>
                        <th>Damage/Round</th>
                        <th>Utility Efficiency</th>
                        <th>Survival Rate</th>
                        <th>KAST %</th>
                        <th>Clutch Rounds</th>
                        <th>Flash Trade Ratio</th>
                        <th>Bomb Actions</th>
                        <th>Advanced Stats</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        const performanceColor = row.OverallPerformanceScore >= 70 ? 'text-success' : 
                                row.OverallPerformanceScore >= 50 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-warning'}">${row.Team}</span></td>
                <td><span class="badge bg-info ${performanceColor}">${row.OverallPerformanceScore?.toFixed(1) || 'N/A'}</span></td>
                <td>${row.KDRatio?.toFixed(2) || 'N/A'}</td>
                <td>${row.HeadshotPercentage?.toFixed(1) || 'N/A'}%</td>
                <td>${row.AvgDamagePerRound?.toFixed(1) || 'N/A'}</td>
                <td>${row.UtilityEfficiency?.toFixed(2) || 'N/A'}</td>
                <td>${row.SurvivalRate?.toFixed(1) || 'N/A'}%</td>
                <td>${row.KASTPercentage?.toFixed(1) || 'N/A'}%</td>
                <td>${row.ClutchRounds || 0}</td>
                <td>${row.FlashTradeRatio?.toFixed(2) || 'N/A'}</td>
                <td>${row.BombPlants || 0}/${row.BombDefuses || 0}</td>
                <td>
                    <small>
                        Wallbangs: ${row.WallbangKills || 0}<br>
                        Smoke Kills: ${row.SmokeKills || 0}<br>
                        Grenades: ${row.GrenadesThrown || 0}
                    </small>
                </td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Performance Score combines K/D, survival, utility usage, and accuracy metrics (0-100 scale).
                ${response.data.length} players analyzed with comprehensive multi-dimensional metrics.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function displaySituationResults(response) {
    const container = document.getElementById('situationResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No situational analysis data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Situation</th>
                        <th>Economy State</th>
                        <th>Utility State</th>
                        <th>Frequency</th>
                        <th>Win Rate</th>
                        <th>Survival Rate</th>
                        <th>Pressure Score</th>
                        <th>Difficulty</th>
                        <th>Performance</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        const pressureColor = row.PressurePerformanceScore >= 2.0 ? 'text-success' : 
                             row.PressurePerformanceScore >= 1.0 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge bg-secondary">${row.SituationType}</span></td>
                <td><span class="badge bg-info">${row.EconomyState}</span></td>
                <td><span class="badge bg-light text-dark">${row.UtilityState}</span></td>
                <td>${row.TimesInSituation}</td>
                <td>${row.WinPercentageInSituation?.toFixed(1) || 'N/A'}%</td>
                <td>${row.SurvivalRateInSituation?.toFixed(1) || 'N/A'}%</td>
                <td><span class="${pressureColor}">${row.PressurePerformanceScore?.toFixed(2) || 'N/A'}</span></td>
                <td>${row.DifficultyScore}/10</td>
                <td>
                    <small>
                        K/D: ${row.KDRatioInSituation?.toFixed(2) || 'N/A'}<br>
                        Dmg: ${row.AvgDamageInSituation?.toFixed(0) || 'N/A'}<br>
                        Rating: ${row.AvgRatingInSituation?.toFixed(2) || 'N/A'}
                    </small>
                </td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Pressure Performance Score shows performance under stress (higher = better under pressure).
                Difficulty Score: 1vX=9, Force/Eco=6-8, Flashed=7, Standard=3.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function displayInventoryResults(response) {
    const container = document.getElementById('inventoryResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No inventory data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Round</th>
                        <th>Loadout Category</th>
                        <th>Equipment Value</th>
                        <th>Money (Start/End)</th>
                        <th>Primary</th>
                        <th>Armor</th>
                        <th>Weapons</th>
                        <th>Grenades</th>
                        <th>Efficiency</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        const categoryColor = {
            'Full Buy': 'bg-success',
            'Buy Round': 'bg-primary', 
            'Force Buy': 'bg-warning',
            'Eco Round': 'bg-secondary',
            'Save Round': 'bg-danger'
        }[row.LoadoutCategory] || 'bg-secondary';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td>${row.RoundNumber}</td>
                <td><span class="badge ${categoryColor}">${row.LoadoutCategory}</span></td>
                <td>$${row.TotalEquipmentValue || 0}</td>
                <td>$${row.RoundStartMoney || 0} → $${row.RoundEndMoney || 0}</td>
                <td>${row.HasPrimary === 'Yes' ? '✅' : '❌'}</td>
                <td>${row.HasArmor === 'Yes' ? '🛡️' : '❌'}</td>
                <td><small>${row.WeaponsCarried || 'None'}</small></td>
                <td><small>${row.GrenadesCarried || 'None'}</small></td>
                <td>${row.MoneyToEquipmentRatio?.toFixed(2) || 'N/A'}</td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Equipment efficiency shows money-to-equipment ratio (higher = more economic).
                Loadout categories based on total equipment value and purchase patterns.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

// New advanced analytics load functions
async function loadPositioningAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/positioning-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'positioningResults');
    } else {
        document.getElementById('positioningResults').innerHTML = '<div class="alert alert-danger">Failed to load positioning analysis</div>';
    }
}

async function loadWeaponIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/weapon-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'weaponIntelligenceResults');
    } else {
        document.getElementById('weaponIntelligenceResults').innerHTML = '<div class="alert alert-danger">Failed to load weapon intelligence</div>';
    }
}

async function loadCircumstantialCombat(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/circumstantial-combat?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'circumstantialResults');
    } else {
        document.getElementById('circumstantialResults').innerHTML = '<div class="alert alert-danger">Failed to load circumstantial combat analysis</div>';
    }
}

async function loadTeamCoordination(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/team-coordination?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'teamCoordinationResults');
    } else {
        document.getElementById('teamCoordinationResults').innerHTML = '<div class="alert alert-danger">Failed to load team coordination analysis</div>';
    }
}

async function loadEconomicIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economic-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'economicIntelligenceResults');
    } else {
        document.getElementById('economicIntelligenceResults').innerHTML = '<div class="alert alert-danger">Failed to load economic intelligence analysis</div>';
    }
}

async function loadPressureMetrics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/pressure-metrics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'pressureMetricsResults');
    } else {
        document.getElementById('pressureMetricsResults').innerHTML = '<div class="alert alert-danger">Failed to load pressure metrics analysis</div>';
    }
}

// Generic display function for new analytics
function displayGenericResults(response, containerId) {
    const container = document.getElementById(containerId);
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No data found for the selected filters.</div>';
        return;
    }

    // Create table with dynamic headers
    const firstRow = response.data[0];
    const headers = Object.keys(firstRow);
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover analytics-table">
                <thead class="table-dark">
                    <tr>${headers.map(header => `<th>${header}</th>`).join('')}</tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        html += '<tr>';
        headers.forEach(header => {
            let value = row[header];
            let displayValue = value;
            
            // Format numeric values
            if (typeof value === 'number') {
                if (header.toLowerCase().includes('percentage') || header.toLowerCase().includes('rate')) {
                    displayValue = `${value.toFixed(1)}%`;
                } else if (header.toLowerCase().includes('score') || header.toLowerCase().includes('rating')) {
                    displayValue = value.toFixed(2);
                } else if (value > 1000) {
                    displayValue = value.toLocaleString();
                } else if (value % 1 !== 0) {
                    displayValue = value.toFixed(2);
                }
            }
            
            // Add color coding for certain metrics
            let cellClass = '';
            if (header.toLowerCase().includes('percentage') || header.toLowerCase().includes('rate')) {
                if (value > 70) cellClass = 'text-success fw-bold';
                else if (value > 40) cellClass = 'text-warning';
                else cellClass = 'text-danger';
            }
            
            html += `<td class="${cellClass}">${displayValue}</td>`;
        });
        html += '</tr>';
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                <strong>${response.title}</strong>: ${response.description} 
                (${response.totalRecords} records found)
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function clearFilters() {
    document.getElementById('demoSelect').value = '';
    document.getElementById('mapSelect').value = '';
    document.getElementById('playerSelect').value = '';
    document.getElementById('teamSelect').value = '';
    
    // Optionally refresh analytics with cleared filters
    // refreshAnalytics();
}

function showError(message) {
    const containers = ['clutchResults', 'tradeKillResults', 'firstKillResults', 'economyResults', 'performanceResults', 'positionResults', 'masterAnalyticsResults', 'situationResults', 'inventoryResults', 'positioningResults', 'weaponIntelligenceResults', 'circumstantialResults', 'teamCoordinationResults', 'economicIntelligenceResults', 'pressureMetricsResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `<div class="alert alert-danger">${message}</div>`;
    });
}
</script>