@page
@model CS2DemoParserWeb.Pages.AnalyticsModel
@{
    ViewData["Title"] = "Advanced Analytics";
}

<div class="container-fluid">
    <div class="text-center mb-4">
        <h1 class="display-5">üéØ Advanced CS2 Analytics</h1>
        <p class="lead">Deep insights into gameplay patterns, clutch performance, and tactical intelligence</p>
    </div>

    <!-- Top Filters Bar -->
    <div class="card mb-4 filters-card">
        <div class="card-body py-3">
            <div class="row align-items-end">
                <div class="col-md-2">
                    <label for="demoSelect" class="form-label fw-semibold">üìÅ Demo File</label>
                    <select class="form-select form-select-sm" id="demoSelect">
                        <option value="">All Demos</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="mapSelect" class="form-label fw-semibold">üó∫Ô∏è Map</label>
                    <select class="form-select form-select-sm" id="mapSelect">
                        <option value="">All Maps</option>
                        <option value="de_dust2">de_dust2</option>
                        <option value="de_mirage">de_mirage</option>
                        <option value="de_inferno">de_inferno</option>
                        <option value="de_ancient">de_ancient</option>
                        <option value="de_vertigo">de_vertigo</option>
                        <option value="de_nuke">de_nuke</option>
                        <option value="de_overpass">de_overpass</option>
                        <option value="de_train">de_train</option>
                        <option value="de_cache">de_cache</option>
                        <option value="de_anubis">de_anubis</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="playerSelect" class="form-label fw-semibold">üë§ Player</label>
                    <select class="form-select form-select-sm" id="playerSelect">
                        <option value="">All Players</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label for="teamSelect" class="form-label fw-semibold">‚öîÔ∏è Team</label>
                    <select class="form-select form-select-sm" id="teamSelect">
                        <option value="">All Teams</option>
                        <option value="TERRORIST">Terrorist</option>
                        <option value="CT">Counter-Terrorist</option>
                    </select>
                </div>
                
                <div class="col-md-4 d-flex flex-wrap gap-2">
                    <button type="button" class="btn btn-primary btn-sm px-4" onclick="refreshAnalytics()">
                        <i class="fas fa-sync-alt me-2"></i>Update Analytics
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm px-4 clear-filters-btn" onclick="clearFilters()">
                        <i class="fas fa-eraser me-2"></i>Clear Filters
                    </button>
                    <button type="button" class="btn btn-info btn-sm px-4" onclick="toggleDashboardCustomization()">
                        <i class="fas fa-cogs me-2"></i>Customize Dashboard
                    </button>
                    <div class="dropdown d-inline-block">
                        <button class="btn btn-success btn-sm dropdown-toggle px-4" type="button" id="savedViewsDropdown" data-bs-toggle="dropdown">
                            <i class="fas fa-bookmark me-2"></i>Saved Views
                        </button>
                        <ul class="dropdown-menu" id="savedViewsList">
                            <li><a class="dropdown-item" href="#" onclick="saveCurrentView()"><i class="fas fa-plus me-2"></i>Save Current View</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><span class="dropdown-item-text text-muted">No saved views yet</span></li>
                        </ul>
                    </div>
                    <div class="dropdown d-inline-block">
                        <button class="btn btn-warning btn-sm dropdown-toggle px-4" type="button" id="exportDropdown" data-bs-toggle="dropdown">
                            <i class="fas fa-download me-2"></i>Export
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="exportToPDF()"><i class="fas fa-file-pdf me-2"></i>Export to PDF</a></li>
                            <li><a class="dropdown-item" href="#" onclick="exportToPowerPoint()"><i class="fas fa-file-powerpoint me-2"></i>Export to PowerPoint</a></li>
                            <li><a class="dropdown-item" href="#" onclick="generateShareableLink()"><i class="fas fa-link me-2"></i>Generate Share Link</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Customization Panel -->
    <div class="card mb-4 d-none" id="dashboardCustomizationPanel">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="fas fa-palette me-2"></i>Dashboard Customization
            </h6>
        </div>
        <div class="card-body py-3">
            <div class="row align-items-center">
                <div class="col-md-3">
                    <label class="form-label">Layout Style</label>
                    <select class="form-select form-select-sm" id="layoutStyle" onchange="applyLayoutStyle()">
                        <option value="grid">Grid Layout</option>
                        <option value="masonry">Masonry Layout</option>
                        <option value="tabs">Tabbed Layout</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Widget Size</label>
                    <select class="form-select form-select-sm" id="widgetSize" onchange="applyWidgetSize()">
                        <option value="compact">Compact</option>
                        <option value="normal" selected>Normal</option>
                        <option value="large">Large</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="enableDragDrop" onchange="toggleDragDrop()" checked>
                        <label class="form-check-label" for="enableDragDrop">
                            Enable Drag & Drop
                        </label>
                    </div>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-primary btn-sm" onclick="resetDashboardLayout()">
                        <i class="fas fa-undo me-2"></i>Reset Layout
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Analytics Results - Full Width -->
    <div class="row">
        <div class="col-12">
        <!-- Analysis Type Tabs -->
        <ul class="nav nav-tabs" id="analyticsTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="clutch-tab" data-bs-toggle="tab" data-bs-target="#clutch" type="button" role="tab">
                    üéØ Clutch Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="trade-kill-tab" data-bs-toggle="tab" data-bs-target="#trade-kill" type="button" role="tab">
                    ‚ö° Trade Kills
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="first-kill-tab" data-bs-toggle="tab" data-bs-target="#first-kill" type="button" role="tab">
                    ü•á First Kill Impact
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economy-tab" data-bs-toggle="tab" data-bs-target="#economy" type="button" role="tab">
                    üí∞ Economy Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="performance-tab" data-bs-toggle="tab" data-bs-target="#performance" type="button" role="tab">
                    üèÜ Player Performance
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="position-tab" data-bs-toggle="tab" data-bs-target="#position" type="button" role="tab">
                    üìç Position Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="master-analytics-tab" data-bs-toggle="tab" data-bs-target="#master-analytics" type="button" role="tab">
                    üèÜ Master Analytics
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="situation-analysis-tab" data-bs-toggle="tab" data-bs-target="#situation-analysis" type="button" role="tab">
                    üéÆ Situational Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button" role="tab">
                    üì¶ Player Inventory
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="positioning-tab" data-bs-toggle="tab" data-bs-target="#positioning" type="button" role="tab">
                    üó∫Ô∏è Positioning Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="weapon-intelligence-tab" data-bs-toggle="tab" data-bs-target="#weapon-intelligence" type="button" role="tab">
                    üî´ Weapon Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="circumstantial-tab" data-bs-toggle="tab" data-bs-target="#circumstantial" type="button" role="tab">
                    üå™Ô∏è Circumstantial Combat
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="team-coordination-tab" data-bs-toggle="tab" data-bs-target="#team-coordination" type="button" role="tab">
                    ü§ù Team Coordination
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economic-intelligence-tab" data-bs-toggle="tab" data-bs-target="#economic-intelligence" type="button" role="tab">
                    üí° Economic Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="pressure-metrics-tab" data-bs-toggle="tab" data-bs-target="#pressure-metrics" type="button" role="tab">
                    üí™ Pressure Metrics
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economy-enhanced-tab" data-bs-toggle="tab" data-bs-target="#economy-enhanced" type="button" role="tab">
                    üíé Economy Enhanced
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="movement-positioning-tab" data-bs-toggle="tab" data-bs-target="#movement-positioning" type="button" role="tab">
                    üèÉ Movement & Positioning
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="timing-tempo-tab" data-bs-toggle="tab" data-bs-target="#timing-tempo" type="button" role="tab">
                    ‚è±Ô∏è Timing & Tempo
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="weapon-mastery-tab" data-bs-toggle="tab" data-bs-target="#weapon-mastery" type="button" role="tab">
                    ‚öîÔ∏è Weapon Mastery
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="match-flow-tab" data-bs-toggle="tab" data-bs-target="#match-flow" type="button" role="tab">
                    üìà Match Flow
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="performance-trends-tab" data-bs-toggle="tab" data-bs-target="#performance-trends" type="button" role="tab">
                    üìä Performance Trends
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="team-dynamics-tab" data-bs-toggle="tab" data-bs-target="#team-dynamics" type="button" role="tab">
                    üë• Team Dynamics
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="interactive-heatmap-tab" data-bs-toggle="tab" data-bs-target="#interactive-heatmap" type="button" role="tab">
                    üó∫Ô∏è Interactive Heatmap
                </button>
            </li>
        </ul>
        
        <!-- Tab Content -->
        <div class="tab-content" id="analyticsTabContent">
            <!-- Dashboard Grid View (Alternative to tabs) -->
            <div class="dashboard-grid d-none" id="dashboardGrid">
                <div class="row sortable-widgets" id="sortableWidgets">
                    <!-- Widgets will be dynamically generated here -->
                </div>
            </div>
            <!-- Clutch Analysis -->
            <div class="tab-pane fade show active analytics-widget" id="clutch" role="tabpanel" data-widget-id="clutch" data-widget-title="Clutch Analysis" data-widget-icon="üéØ">
                <div class="card widget-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <span class="widget-drag-handle me-2" style="cursor: move; display: none;">
                                <i class="fas fa-grip-vertical"></i>
                            </span>
                            üéØ Clutch Situation Analysis
                        </h5>
                        <div class="widget-controls">
                            <div class="dropdown d-inline-block me-2">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-cog"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="toggleWidgetSize('clutch')"><i class="fas fa-expand-arrows-alt me-2"></i>Toggle Size</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="hideWidget('clutch')"><i class="fas fa-eye-slash me-2"></i>Hide Widget</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="refreshWidget('clutch')"><i class="fas fa-sync-alt me-2"></i>Refresh</a></li>
                                </ul>
                            </div>
                            <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('clutch')">üì• Export CSV</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Clutch Analysis:</strong> 
                            Analysis of 1vX clutch situations and success rates.
                        </div>
                        <div id="clutchResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                <p>Click "Update Analytics" to load clutch analysis data</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Trade Kill Analysis -->
            <div class="tab-pane fade" id="trade-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">‚ö° Trade Kill Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('trade-kill')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Trade Kill Analysis:</strong> 
                            Analysis of how quickly teammates trade frags and refrag effectiveness.
                        </div>
                        <div id="tradeKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-exchange-alt fa-3x mb-3"></i>
                                <p>Analysis of trade kill timing and effectiveness</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Economy Intelligence -->
            <div class="tab-pane fade" id="economy" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üí∞ Economy Intelligence Dashboard</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economy')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Economy Intelligence:</strong> 
                            Advanced economy analysis including money efficiency, equipment ROI, and economic state performance correlation.
                        </div>
                        <div id="economyResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-dollar-sign fa-3x mb-3"></i>
                                <p>Money efficiency analysis, equipment ROI, and economic state correlation</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Advanced Player Performance -->
            <div class="tab-pane fade" id="performance" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üèÜ Advanced Player Performance Matrix</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('performance')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Performance Matrix:</strong> 
                            Comprehensive player analysis including HLTV-style ratings, consistency scoring, and multi-kill performance.
                        </div>
                        <div id="performanceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-trophy fa-3x mb-3"></i>
                                <p>HLTV-style ratings, consistency metrics, and multi-kill analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- First Kill Impact -->
            <div class="tab-pane fade" id="first-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">ü•á First Kill Impact</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('first-kill')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>First Kill Impact:</strong> 
                            Impact of opening frags on round outcomes and team performance.
                        </div>
                        <div id="firstKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Impact of opening frags on round outcomes</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Position Analysis -->
            <div class="tab-pane fade" id="position" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üìç Position Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('position')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Position Analysis:</strong> 
                            Death hotspots and dangerous areas by map location analysis.
                        </div>
                        <div id="positionResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map fa-3x mb-3"></i>
                                <p>Death hotspots and dangerous areas by map location</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Master Analytics Dashboard -->
            <div class="tab-pane fade" id="master-analytics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üèÜ Master Analytics Dashboard</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('master-analytics')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Master Analytics:</strong> 
                            Comprehensive multi-dimensional analysis integrating all game data: combat, utility, economy, objectives, and performance intelligence with 50+ advanced metrics.
                        </div>
                        <div id="masterAnalyticsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-line fa-3x mb-3"></i>
                                <p>Comprehensive player performance across all dimensions</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Situational Analysis -->
            <div class="tab-pane fade" id="situation-analysis" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üéÆ Situational Performance Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('situation-analysis')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Situational Analysis:</strong> 
                            Deep dive into player performance across different game situations: clutches, economy states, utility conditions, and time phases with pressure performance scoring.
                        </div>
                        <div id="situationResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Performance analysis across high-pressure situations</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Player Inventory -->
            <div class="tab-pane fade" id="inventory" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üì¶ Player Inventory Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('inventory')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Inventory Analysis:</strong> 
                            Detailed round-by-round player equipment, economy, and loadout analysis with purchase pattern intelligence.
                        </div>
                        <div id="inventoryResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                                <p>Round-by-round equipment and economic analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Positioning Analysis -->
            <div class="tab-pane fade" id="positioning" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üó∫Ô∏è Positioning & Movement Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('positioning')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Positioning Analysis:</strong> 
                            Site control effectiveness, crossfire positioning, retake positioning success, and movement pattern analysis.
                        </div>
                        <div id="positioningResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map-marker-alt fa-3x mb-3"></i>
                                <p>Tactical positioning and map control analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Weapon Intelligence -->
            <div class="tab-pane fade" id="weapon-intelligence" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üî´ Advanced Weapon Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('weapon-intelligence')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Weapon Intelligence:</strong> 
                            Ammo management efficiency, spray control mastery, movement shooting vs static accuracy, and weapon configuration optimization.
                        </div>
                        <div id="weaponIntelligenceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Advanced weapon performance and efficiency analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Circumstantial Combat -->
            <div class="tab-pane fade" id="circumstantial" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üå™Ô∏è Advanced Circumstantial Combat</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('circumstantial')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Circumstantial Combat:</strong> 
                            Multi-handicap performance (smoke + blind + movement), flash coordination effectiveness, and wallbang mastery analysis.
                        </div>
                        <div id="circumstantialResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-eye-slash fa-3x mb-3"></i>
                                <p>Performance under adverse conditions and environmental challenges</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Team Coordination -->
            <div class="tab-pane fade" id="team-coordination" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">ü§ù Team Coordination Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('team-coordination')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Team Coordination:</strong> 
                            Flash coordination with teammates, utility teamwork ratios, site support effectiveness, and coordinated execution timing.
                        </div>
                        <div id="teamCoordinationResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-users fa-3x mb-3"></i>
                                <p>Teamwork efficiency and coordination analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Economic Intelligence -->
            <div class="tab-pane fade" id="economic-intelligence" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üí° Economic Intelligence Enhancement</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economic-intelligence')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Economic Intelligence:</strong> 
                            Buy pattern analysis, eco performance effectiveness, investment ROI calculations, performance per dollar metrics, and economic IQ scoring.
                        </div>
                        <div id="economicIntelligenceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-calculator fa-3x mb-3"></i>
                                <p>Advanced economic decision making and investment efficiency</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Pressure Metrics -->
            <div class="tab-pane fade" id="pressure-metrics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üí™ Psychological Pressure Metrics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('pressure-metrics')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Pressure Metrics:</strong> 
                            High-pressure performance scaling, clutch success rates, objective completion under fire, mental resilience indicators, and comeback potential analysis.
                        </div>
                        <div id="pressureMetricsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-heartbeat fa-3x mb-3"></i>
                                <p>Performance under pressure and mental resilience analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Economy Enhanced -->
            <div class="tab-pane fade" id="economy-enhanced" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üíé Enhanced Economy Intelligence</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economy-enhanced')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Enhanced Economy:</strong> 
                            ROI analysis, money management efficiency, purchase effectiveness, and economic decision-making patterns with detailed spending breakdown.
                        </div>
                        <div id="economyEnhancedResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-coins fa-3x mb-3"></i>
                                <p>Advanced economic analysis with ROI and money management</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Movement & Positioning -->
            <div class="tab-pane fade" id="movement-positioning" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üèÉ Movement & Positioning Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('movement-positioning')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Positioning Analysis:</strong> 
                            Death zone mapping, positioning advantages, map control patterns, and tactical positioning effectiveness with danger scoring.
                        </div>
                        <div id="movementPositioningResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map-marker-alt fa-3x mb-3"></i>
                                <p>Death zones, positioning advantages, and map control analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Timing & Tempo -->
            <div class="tab-pane fade" id="timing-tempo" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">‚è±Ô∏è Timing & Tempo Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('timing-tempo')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Timing Analysis:</strong> 
                            Round timing patterns, execution speed, tempo effectiveness, kill sequence analysis, and round phase performance metrics.
                        </div>
                        <div id="timingTempoResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-clock fa-3x mb-3"></i>
                                <p>Round timing patterns and execution speed analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Weapon Mastery -->
            <div class="tab-pane fade" id="weapon-mastery" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">‚öîÔ∏è Weapon Mastery Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('weapon-mastery')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Weapon Mastery:</strong> 
                            Detailed weapon performance, accuracy metrics, range effectiveness, progression analysis, and versatility scoring across all weapon categories.
                        </div>
                        <div id="weaponMasteryResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Weapon performance, accuracy, and mastery analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Match Flow -->
            <div class="tab-pane fade" id="match-flow" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üìà Match Flow Analytics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('match-flow')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Match Flow:</strong> 
                            Momentum analysis, comeback potential, performance under pressure, streak patterns, and clutch factor evaluation with mastery scoring.
                        </div>
                        <div id="matchFlowResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-line fa-3x mb-3"></i>
                                <p>Momentum patterns and comeback potential analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Performance Trends -->
            <div class="tab-pane fade" id="performance-trends" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üìä Performance Trends</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('performance-trends')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Performance Trends:</strong> 
                            Player improvement over time, consistency metrics, learning curves, map experience progression, and trend scoring analysis.
                        </div>
                        <div id="performanceTrendsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-trending-up fa-3x mb-3"></i>
                                <p>Player improvement and consistency analysis over time</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Team Dynamics -->
            <div class="tab-pane fade" id="team-dynamics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üë• Advanced Team Dynamics</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('team-dynamics')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Team Dynamics:</strong> 
                            Player partnerships, trade kill effectiveness, support play analysis, team chemistry scoring, and coordination metrics evaluation.
                        </div>
                        <div id="teamDynamicsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-users fa-3x mb-3"></i>
                                <p>Player partnerships and team chemistry analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Interactive Heatmap -->
            <div class="tab-pane fade analytics-widget" id="interactive-heatmap" role="tabpanel" data-widget-id="interactive-heatmap" data-widget-title="Interactive Heatmap" data-widget-icon="üó∫Ô∏è">
                <div class="card widget-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <span class="widget-drag-handle me-2" style="cursor: move; display: none;">
                                <i class="fas fa-grip-vertical"></i>
                            </span>
                            üó∫Ô∏è Interactive Heatmap
                        </h5>
                        <div class="widget-controls">
                            <div class="dropdown d-inline-block me-2">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-cog"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="toggleWidgetSize('interactive-heatmap')"><i class="fas fa-expand-arrows-alt me-2"></i>Toggle Size</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="hideWidget('interactive-heatmap')"><i class="fas fa-eye-slash me-2"></i>Hide Widget</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="refreshWidget('interactive-heatmap')"><i class="fas fa-sync-alt me-2"></i>Refresh</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="#" onclick="toggleHeatmapLayers()"><i class="fas fa-layer-group me-2"></i>Toggle Layers</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="exportHeatmapImage()"><i class="fas fa-camera me-2"></i>Export Image</a></li>
                                </ul>
                            </div>
                            <div class="dropdown d-inline-block me-2">
                                <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-filter me-2"></i>Heatmap Type
                                </button>
                                <ul class="dropdown-menu" id="heatmapTypeDropdown">
                                    <li><a class="dropdown-item active" href="#" onclick="changeHeatmapType('position')"><i class="fas fa-crosshairs me-2"></i>Player Positions</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="changeHeatmapType('kills')"><i class="fas fa-skull me-2"></i>Kill Locations</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="changeHeatmapType('deaths')"><i class="fas fa-heart-broken me-2"></i>Death Locations</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="changeHeatmapType('utility')"><i class="fas fa-grenade me-2"></i>Utility Usage</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="changeHeatmapType('bomb_events')"><i class="fas fa-bomb me-2"></i>Bomb Events</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="changeHeatmapType('clutch')"><i class="fas fa-target me-2"></i>Clutch Positions</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="changeHeatmapType('first-kills')"><i class="fas fa-trophy me-2"></i>First Kill Impact</a></li>
                                </ul>
                            </div>
                            <button class="btn btn-sm btn-outline-success" onclick="toggleHeatmapAnimation()">
                                <i class="fas fa-play me-2"></i>Timeline
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Interactive Heatmap:</strong> 
                            Pan, zoom, and click on the map to explore player positions, kills, utility usage, and tactical patterns with real-time analytics integration.
                        </div>
                        
                        <!-- Heatmap Controls Panel -->
                        <div class="heatmap-controls mb-3" id="heatmapControls">
                            <div class="row align-items-center">
                                <div class="col-md-3">
                                    <label for="mapSelector" class="form-label">Map</label>
                                    <select class="form-select form-select-sm" id="mapSelector" onchange="changeHeatmapMap()">
                                        <option value="">Auto-detect from filters</option>
                                        <option value="de_dust2">Dust2</option>
                                        <option value="de_mirage">Mirage</option>
                                        <option value="de_inferno">Inferno</option>
                                        <option value="de_ancient">Ancient</option>
                                        <option value="de_anubis">Anubis</option>
                                        <option value="de_nuke">Nuke</option>
                                        <option value="de_overpass">Overpass</option>
                                        <option value="de_train">Train</option>
                                        <option value="de_vertigo">Vertigo</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <label for="heatmapIntensity" class="form-label">Intensity</label>
                                    <input type="range" class="form-range" id="heatmapIntensity" min="0.1" max="2" step="0.1" value="1" onchange="updateHeatmapIntensity()">
                                </div>
                                <div class="col-md-2">
                                    <label for="heatmapRadius" class="form-label">Radius</label>
                                    <input type="range" class="form-range" id="heatmapRadius" min="5" max="50" step="5" value="20" onchange="updateHeatmapRadius()">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Layers</label>
                                    <div class="btn-group w-100" role="group">
                                        <input type="checkbox" class="btn-check" id="layerTeams" checked onchange="toggleLayer('teams')">
                                        <label class="btn btn-outline-primary btn-sm" for="layerTeams">Teams</label>
                                        <input type="checkbox" class="btn-check" id="layerRounds" checked onchange="toggleLayer('rounds')">
                                        <label class="btn btn-outline-secondary btn-sm" for="layerRounds">Rounds</label>
                                        <input type="checkbox" class="btn-check" id="layerTime" onchange="toggleLayer('time')">
                                        <label class="btn btn-outline-success btn-sm" for="layerTime">Timeline</label>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-primary btn-sm w-100" onclick="refreshHeatmapData()">
                                        <i class="fas fa-sync-alt me-1"></i>Refresh
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Interactive Map Container -->
                        <div id="interactiveHeatmapResults">
                            <div class="heatmap-container" style="height: 600px; position: relative; border: 2px solid var(--border-color); border-radius: 8px;">
                                <div id="heatmapMap" style="height: 100%; width: 100%; border-radius: 6px;"></div>
                                
                                <!-- Map Loading Overlay -->
                                <div class="heatmap-loading" id="heatmapLoading" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.9); display: flex; align-items: center; justify-content: center; z-index: 1000; border-radius: 6px;">
                                    <div class="text-center">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <p class="mt-2 mb-0">Loading interactive heatmap...</p>
                                    </div>
                                </div>
                                
                                <!-- Map Info Panel -->
                                <div class="heatmap-info-panel" id="heatmapInfoPanel" style="position: absolute; top: 10px; right: 10px; background: rgba(255,255,255,0.95); padding: 10px; border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.15); min-width: 200px; display: none;">
                                    <h6 class="mb-2">Position Details</h6>
                                    <div id="heatmapInfoContent"></div>
                                </div>
                                
                                <!-- Map Legend -->
                                <div class="heatmap-legend" id="heatmapLegend" style="position: absolute; bottom: 10px; left: 10px; background: rgba(255,255,255,0.95); padding: 10px; border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.15);">
                                    <small class="text-muted">
                                        <i class="fas fa-circle text-danger"></i> High Activity
                                        <i class="fas fa-circle text-warning ms-2"></i> Medium
                                        <i class="fas fa-circle text-success ms-2"></i> Low
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
</div>

<!-- Enhanced CSS for professional analytics interface -->
<style>
/* Global improvements */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.container-fluid {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    margin: 20px auto;
    padding: 30px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    max-width: 98%;
}

/* Header styling */
.display-5 {
    font-weight: 700;
    color: #2c3e50;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
}

.lead {
    color: #7f8c8d;
    font-weight: 400;
}

/* Enhanced table styling - Full width optimization */
.analytics-table {
    width: 100%;
    min-width: 1600px;
    font-size: 0.87rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

.analytics-table th {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    font-weight: 600;
    text-align: center;
    padding: 12px 8px;
    border: none;
    position: sticky;
    top: 0;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.analytics-table td {
    padding: 10px 8px;
    border: 1px solid #e8f4f8;
    text-align: center;
    background: rgba(255, 255, 255, 0.9);
    transition: all 0.2s ease;
}

.analytics-table tr:hover td {
    background: rgba(102, 126, 234, 0.1);
    transform: translateY(-1px);
}

.table-responsive {
    max-height: 650px;
    overflow-x: auto;
    overflow-y: auto;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    border: 1px solid #e8f4f8;
}

/* Enhanced tabs */
.nav-tabs {
    flex-wrap: wrap;
    border-bottom: 3px solid #667eea;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 10px 10px 0 0;
    padding: 5px 10px 0 10px;
}

.nav-tabs .nav-link {
    padding: 12px 16px;
    margin-right: 3px;
    margin-bottom: 5px;
    border: 2px solid transparent;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.9rem;
    white-space: nowrap;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.7);
    color: #495057;
}

.nav-tabs .nav-link:hover {
    background: rgba(102, 126, 234, 0.1);
    border-color: #667eea;
    transform: translateY(-2px);
}

.nav-tabs .nav-link.active {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-color: #667eea;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

/* Enhanced cards */
.card {
    border: none;
    border-radius: 15px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    overflow: hidden;
}

.card-header {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-bottom: none;
    padding: 1.5rem;
    font-weight: 600;
}

.card-body {
    padding: 1.5rem;
}

/* Sidebar enhancements */
.col-lg-3 .card {
    background: rgba(255, 255, 255, 0.9);
    position: sticky;
    top: 20px;
}

.form-select, .form-control {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
}

.form-select:focus, .form-control:focus {
    border-color: #667eea;
    box-shadow: 0 0 15px rgba(102, 126, 234, 0.2);
}

/* Enhanced buttons */
.btn-primary {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border: none;
    border-radius: 25px;
    padding: 12px 30px;
    font-weight: 600;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.btn-outline-primary {
    border-color: #667eea;
    color: #667eea;
    border-radius: 20px;
    transition: all 0.3s ease;
}

.btn-outline-primary:hover {
    background: #667eea;
    border-color: #667eea;
    transform: translateY(-1px);
}

/* Layout improvements - Full width for analytics */
.filters-card {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(102, 126, 234, 0.2);
}

.filters-card .card-body {
    padding: 1rem 1.5rem;
}

.filters-card .form-label {
    margin-bottom: 4px;
    font-size: 0.85rem;
    color: #495057;
}

.form-select-sm {
    font-size: 0.875rem;
    padding: 0.375rem 0.75rem;
}

.tab-content .card {
    margin-top: 0;
    border-radius: 0 10px 10px 10px;
}

/* Alert styling */
.alert {
    border-radius: 10px;
    border: none;
    font-weight: 500;
}

.alert-info {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
    color: #495057;
    border-left: 4px solid #667eea;
}

/* Enhanced badges */
.badge {
    border-radius: 12px;
    font-weight: 600;
    padding: 6px 12px;
}

/* Performance indicators */
.text-success { 
    color: #28a745 !important; 
    font-weight: 600;
}

.text-danger { 
    color: #dc3545 !important; 
    font-weight: 600;
}

.text-warning { 
    color: #ffc107 !important; 
    font-weight: 600;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
}

/* Metric badges */
.metric-badge {
    display: inline-block;
    padding: 6px 12px;
    margin: 2px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    transition: all 0.2s ease;
}

.metric-badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.metric-badge.high { 
    background: linear-gradient(135deg, #d4edda, #c3e6cb); 
    color: #155724; 
    border: 1px solid #b8dacc;
}

.metric-badge.medium { 
    background: linear-gradient(135deg, #fff3cd, #ffeaa7); 
    color: #856404; 
    border: 1px solid #f6d973;
}

.metric-badge.low { 
    background: linear-gradient(135deg, #f8d7da, #f5c6cb); 
    color: #721c24; 
    border: 1px solid #ed969e;
}

/* Loading improvements */
.loading-spinner {
    display: inline-block;
    width: 24px;
    height: 24px;
    border: 3px solid rgba(102, 126, 234, 0.3);
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive enhancements for full-width layout */
@@media (max-width: 1600px) {
    .analytics-table {
        min-width: 1400px;
        font-size: 0.83rem;
    }
}

@@media (max-width: 1400px) {
    .analytics-table {
        min-width: 1200px;
        font-size: 0.8rem;
    }
}

@@media (max-width: 1200px) {
    .container-fluid {
        margin: 10px;
        padding: 20px;
    }
    
    .nav-tabs .nav-link {
        padding: 8px 12px;
        font-size: 0.85rem;
    }
    
    .filters-card .row {
        row-gap: 0.5rem;
    }
    
    .filters-card [class*="col-md-"] {
        flex: 0 0 auto;
        width: 50%;
    }
    
    .filters-card .col-md-3 {
        width: 100%;
        text-align: center;
        margin-top: 1rem;
    }
}

@@media (max-width: 768px) {
    .analytics-table {
        min-width: 900px;
        font-size: 0.75rem;
    }
    
    .display-5 {
        font-size: 1.8rem;
    }
    
    .filters-card [class*="col-md-"] {
        width: 100%;
        margin-bottom: 0.5rem;
    }
    
    .nav-tabs .nav-link {
        padding: 6px 10px;
        font-size: 0.8rem;
        margin-right: 1px;
    }
}

/* Scrollbar styling */
.table-responsive::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

.table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.table-responsive::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 4px;
}

.table-responsive::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #5a6fd8, #6a4c93);
}

/* Animation for content loading */
.tab-pane {
    animation: fadeIn 0.3s ease-in-out;
}

@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Header icons */
.card-title i, .nav-link i {
    margin-right: 8px;
}

/* Clear Filters Button Styling - Match Update Analytics */
.clear-filters-btn {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
    border: none;
    color: white;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);
}

.clear-filters-btn:hover {
    background: linear-gradient(135deg, #c82333 0%, #a02430 100%);
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.4);
}

.clear-filters-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 6px rgba(220, 53, 69, 0.4);
}

/* Dark Mode Compatibility */
[data-theme="dark"] body {
    background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
    color: #e2e8f0;
}

[data-theme="dark"] .filters-card {
    background: rgba(45, 55, 72, 0.9);
    border-color: rgba(226, 232, 240, 0.1);
}

[data-theme="dark"] .form-control, [data-theme="dark"] .form-select {
    background: rgba(45, 55, 72, 0.8);
    border-color: rgba(226, 232, 240, 0.2);
    color: #e2e8f0;
}

[data-theme="dark"] .form-control:focus, [data-theme="dark"] .form-select:focus {
    background: rgba(45, 55, 72, 0.9);
    border-color: #667eea;
    color: #e2e8f0;
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

[data-theme="dark"] .card {
    background: rgba(45, 55, 72, 0.9);
    border-color: rgba(226, 232, 240, 0.1);
    color: #e2e8f0;
}

[data-theme="dark"] .nav-tabs .nav-link {
    background: rgba(45, 55, 72, 0.7);
    border-color: rgba(226, 232, 240, 0.1);
    color: #a0aec0;
}

[data-theme="dark"] .nav-tabs .nav-link.active {
    background: rgba(102, 126, 234, 0.9);
    border-color: rgba(102, 126, 234, 0.5);
    color: white;
}

[data-theme="dark"] .table {
    color: #e2e8f0;
}

[data-theme="dark"] .table thead th {
    background: rgba(45, 55, 72, 0.9);
    border-color: rgba(226, 232, 240, 0.1);
    color: #e2e8f0;
}

[data-theme="dark"] .table tbody tr:hover {
    background: rgba(102, 126, 234, 0.1);
}

[data-theme="dark"] .clear-filters-btn {
    background: linear-gradient(135deg, #e53e3e 0%, #c53030 100%);
    border: none;
    color: white;
    box-shadow: 0 2px 8px rgba(229, 62, 62, 0.4);
}

[data-theme="dark"] .clear-filters-btn:hover {
    background: linear-gradient(135deg, #c53030 0%, #9c2626 100%);
    color: white;
    box-shadow: 0 4px 12px rgba(229, 62, 62, 0.5);
}

/* Fix text visibility on analytics tabs */
.tab-pane h5 {
    color: white !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
    font-weight: 600;
}

.tab-pane p {
    color: rgba(255, 255, 255, 0.9) !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

/* Better contrast for analytics content area */
.analytics-content {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    padding: 15px;
    margin: 10px 0;
}

[data-theme="dark"] .tab-pane h5 {
    color: #e2e8f0 !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
}

[data-theme="dark"] .tab-pane p {
    color: rgba(226, 232, 240, 0.9) !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.6);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    loadDropdownData();
});

async function loadDropdownData() {
    try {
        // Load demo files
        const demosResponse = await fetch('/api/demo/demos');
        if (demosResponse.ok) {
            const demos = await demosResponse.json();
            const demoSelect = document.getElementById('demoSelect');
            
            // Clear existing options except "All Demos"
            demoSelect.innerHTML = '<option value="">All Demos</option>';
            
            // Add demo options
            demos.forEach(demo => {
                const option = document.createElement('option');
                option.value = demo.id;
                option.textContent = `${demo.fileName} (${demo.mapName})`;
                demoSelect.appendChild(option);
            });
            
            console.log('Loaded', demos.length, 'demo files');
            
            // Also load unique players for player dropdown
            await loadPlayersData();
        } else {
            console.error('Failed to load demos:', demosResponse.status);
        }
    } catch (error) {
        console.error('Error loading dropdown data:', error);
    }
}

async function loadPlayersData() {
    try {
        const playersResponse = await fetch('/api/reports/player-stats?format=json');
        if (playersResponse.ok) {
            const playersData = await playersResponse.json();
            const playerSelect = document.getElementById('playerSelect');
            
            // Clear existing options except "All Players"
            playerSelect.innerHTML = '<option value="">All Players</option>';
            
            // Get unique player names
            const uniquePlayers = [...new Set(playersData.map(p => p.PlayerName))].sort();
            
            // Add player options
            uniquePlayers.forEach(playerName => {
                const option = document.createElement('option');
                option.value = playerName;
                option.textContent = playerName;
                playerSelect.appendChild(option);
            });
            
            console.log('Loaded', uniquePlayers.length, 'unique players');
        }
    } catch (error) {
        console.error('Error loading players data:', error);
    }
}

async function refreshAnalytics() {
    const filters = getFilters();
    
    // Show loading state
    showLoading();
    
    try {
        // Load all 22 analytics in parallel
        await Promise.all([
            loadClutchAnalysis(filters),
            loadTradeKillAnalysis(filters),
            loadFirstKillAnalysis(filters),
            loadEconomyIntelligence(filters),
            loadPlayerPerformance(filters),
            loadPositionAnalysis(filters),
            loadMasterAnalytics(filters),
            loadSituationAnalysis(filters),
            loadInventoryAnalysis(filters),
            loadPositioningAnalysis(filters),
            loadWeaponIntelligence(filters),
            loadCircumstantialCombat(filters),
            loadTeamCoordination(filters),
            loadEconomicIntelligence(filters),
            loadPressureMetrics(filters),
            loadEconomyEnhanced(filters),
            loadMovementPositioning(filters),
            loadTimingTempo(filters),
            loadWeaponMastery(filters),
            loadMatchFlow(filters),
            loadPerformanceTrends(filters),
            loadTeamDynamics(filters)
        ]);
    } catch (error) {
        console.error('Error refreshing analytics:', error);
        showError('Failed to load analytics data. Please try again.');
    }
}

function getFilters() {
    return {
        DemoId: document.getElementById('demoSelect').value || null,
        MapName: document.getElementById('mapSelect').value || null,
        PlayerName: document.getElementById('playerSelect').value || null,
        Team: document.getElementById('teamSelect').value || null
    };
}

function buildQueryString(filters) {
    const params = new URLSearchParams();
    Object.keys(filters).forEach(key => {
        if (filters[key] !== null && filters[key] !== '' && filters[key] !== undefined) {
            params.append(key, filters[key]);
        }
    });
    return params.toString();
}

function showLoading() {
    const containers = ['clutchResults', 'tradeKillResults', 'firstKillResults', 'economyResults', 'performanceResults', 'positionResults', 'masterAnalyticsResults', 'situationResults', 'inventoryResults', 'positioningResults', 'weaponIntelligenceResults', 'circumstantialResults', 'teamCoordinationResults', 'economicIntelligenceResults', 'pressureMetricsResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading analytics...</p>
            </div>
        `;
    });
}

async function loadClutchAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/clutch-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayClutchResults(data);
    } else {
        document.getElementById('clutchResults').innerHTML = '<div class="alert alert-danger">Failed to load clutch analysis</div>';
    }
}

async function loadTradeKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/trade-kill-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayTradeKillResults(data);
    } else {
        document.getElementById('tradeKillResults').innerHTML = '<div class="alert alert-danger">Failed to load trade kill analysis</div>';
    }
}

async function loadEconomyIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economy-intelligence-dashboard?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayEconomyResults(data);
    } else {
        document.getElementById('economyResults').innerHTML = '<div class="alert alert-danger">Failed to load economy intelligence</div>';
    }
}

async function loadFirstKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/first-kill-impact?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayFirstKillResults(data);
    } else {
        document.getElementById('firstKillResults').innerHTML = '<div class="alert alert-danger">Failed to load first kill analysis</div>';
    }
}

async function loadPlayerPerformance(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/advanced-player-performance?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPerformanceResults(data);
    } else {
        document.getElementById('performanceResults').innerHTML = '<div class="alert alert-danger">Failed to load player performance</div>';
    }
}

async function loadPositionAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/position-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPositionResults(data);
    } else {
        document.getElementById('positionResults').innerHTML = '<div class="alert alert-danger">Failed to load position analysis</div>';
    }
}

async function loadMasterAnalytics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/master-analytics-dashboard?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayMasterAnalyticsResults(data);
    } else {
        document.getElementById('masterAnalyticsResults').innerHTML = '<div class="alert alert-danger">Failed to load master analytics</div>';
    }
}

async function loadSituationAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/situation-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displaySituationResults(data);
    } else {
        document.getElementById('situationResults').innerHTML = '<div class="alert alert-danger">Failed to load situation analysis</div>';
    }
}

async function loadInventoryAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/player-inventory?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayInventoryResults(data);
    } else {
        document.getElementById('inventoryResults').innerHTML = '<div class="alert alert-danger">Failed to load inventory analysis</div>';
    }
}

function displayClutchResults(response) {
    if (!response.Data || response.Data.length === 0) {
        updateWidgetContent('clutchResults', '<div class="alert alert-info">No clutch data found for the selected filters.</div>');
        return;
    }

    // Create charts and table layout
    let html = `
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Clutch Success Rate by Player</h6>
                    </div>
                    <div class="card-body">
                        <canvas id="clutchSuccessChart" width="400" height="300"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Clutch Attempts vs Wins</h6>
                    </div>
                    <div class="card-body">
                        <canvas id="clutchAttemptsChart" width="400" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Clutch Type</th>
                        <th>Attempts</th>
                        <th>Wins</th>
                        <th>Success Rate</th>
                        <th>Demos</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const successRate = parseFloat(row.ClutchSuccessRate || 0).toFixed(1);
        const successClass = successRate > 50 ? 'bg-success' : successRate > 25 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr class="clickable-row" onclick="showPlayerDetails('${row.ClutchPlayer}', 'clutch')">
                <td><strong>${row.ClutchPlayer}</strong></td>
                <td><span class="badge ${row.ClutchTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.ClutchTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-info">${row.ClutchType}</span></td>
                <td>${row.ClutchAttempts}</td>
                <td>${row.ClutchWins}</td>
                <td><span class="badge ${successClass}">${successRate}%</span></td>
                <td>${row.DemosPlayed}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    updateWidgetContent('clutchResults', html);

    // Store data for grid view recreation and create charts
    window.lastClutchData = response.Data;
    setTimeout(() => {
        createClutchCharts(response.Data);
    }, 100);
}

function displayTradeKillResults(response) {
    const container = document.getElementById('tradeKillResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No trade kill data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Total Trades</th>
                        <th>Avg Time (s)</th>
                        <th>Fastest (s)</th>
                        <th>Fast Trade %</th>
                        <th>Avg Distance</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const avgTime = parseFloat(row.AvgTradeTimeSeconds || 0).toFixed(2);
        const fastestTime = parseFloat(row.FastestTradeSeconds || 0).toFixed(2);
        const avgDistance = parseFloat(row.AvgTradeDistance || 0).toFixed(0);
        const fastTradePercentage = parseFloat(row.FastTradePercentage || 0).toFixed(1);
        
        html += `
            <tr>
                <td><strong>${row.Player}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td>${row.MapName}</td>
                <td>${row.TotalTrades}</td>
                <td>${avgTime}</td>
                <td><span class="badge bg-success">${fastestTime}</span></td>
                <td>${fastTradePercentage}%</td>
                <td>${avgDistance} units</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayEconomyResults(response) {
    const container = document.getElementById('economyResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No economy data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Economy State</th>
                        <th>Win %</th>
                        <th>Equipment ROI</th>
                        <th>Damage/$</th>
                        <th>Avg Equipment Value</th>
                        <th>Low Money Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const winRate = parseFloat(row.WinPercentage || 0).toFixed(1);
        const equipmentROI = parseFloat(row.AvgEquipmentROI || 0).toFixed(3);
        const damagePerDollar = parseFloat(row.AvgDamagePerDollar || 0).toFixed(3);
        const avgEquipment = parseFloat(row.AvgEquipmentValue || 0).toFixed(0);
        const lowMoneyRate = parseFloat(row.LowMoneyRate || 0).toFixed(1);
        
        const winRateClass = winRate > 60 ? 'text-success' : winRate > 45 ? 'text-warning' : 'text-danger';
        const roiClass = equipmentROI > 0.15 ? 'text-success' : equipmentROI > 0.1 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><span class="badge bg-info">${row.EconomyState}</span></td>
                <td><span class="${winRateClass}">${winRate}%</span></td>
                <td><span class="${roiClass}">${equipmentROI}</span></td>
                <td>${damagePerDollar}</td>
                <td>$${avgEquipment}</td>
                <td>${lowMoneyRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPerformanceResults(response) {
    const container = document.getElementById('performanceResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No performance data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Efficiency Score</th>
                        <th>Impact Rating</th>
                        <th>Multi-Kills</th>
                        <th>Survival Rate</th>
                        <th>Consistency</th>
                        <th>Win Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const efficiencyScore = parseFloat(row.EfficiencyScore || 0).toFixed(2);
        const impactRating = parseFloat(row.AvgImpactRating || 0).toFixed(2);
        const survivalRate = parseFloat(row.SurvivalRate || 0).toFixed(1);
        const consistency = (1 / (parseFloat(row.RatingConsistency || 1) + 0.1)).toFixed(2);
        const winRate = parseFloat(row.WinRate || 0).toFixed(1);
        
        const efficiencyClass = efficiencyScore > 1.0 ? 'text-success' : efficiencyScore > 0.7 ? 'text-warning' : 'text-danger';
        const multiKills = (row.TripleKills || 0) + (row.QuadKills || 0);
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><span class="${efficiencyClass}">${efficiencyScore}</span></td>
                <td>${impactRating}</td>
                <td><span class="badge bg-success">${multiKills}</span></td>
                <td>${survivalRate}%</td>
                <td>${consistency}</td>
                <td>${winRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayFirstKillResults(response) {
    const container = document.getElementById('firstKillResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No first kill data found for the selected filters. This endpoint may need configuration or data is not available.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Type</th>
                        <th>First Kills</th>
                        <th>Rounds Won</th>
                        <th>Win Rate (%)</th>
                        <th>Headshot %</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const winRate = parseFloat(row.FirstKillWinPercentage || 0).toFixed(1);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        const winRateClass = winRate > 60 ? 'bg-success' : winRate > 45 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.FirstKiller}</strong></td>
                <td><span class="badge ${row.FirstKillerTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.FirstKillerTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.FirstKillType}</span></td>
                <td>${row.TotalFirstKills}</td>
                <td>${row.RoundsWonAfterFirstKill}</td>
                <td><span class="badge ${winRateClass}">${winRate}%</span></td>
                <td>${headshotRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPositionResults(response) {
    const container = document.getElementById('positionResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No position data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Map</th>
                        <th>Area</th>
                        <th>Team</th>
                        <th>Deaths</th>
                        <th>Avg Kill Distance</th>
                        <th>Headshot %</th>
                        <th>Headshot Deaths</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.Data.forEach(row => {
        const avgDistance = parseFloat(row.AvgKillDistance || 0).toFixed(0);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        
        html += `
            <tr>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.MapArea}</span></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><strong>${row.TotalDeaths}</strong></td>
                <td>${avgDistance} units</td>
                <td>${headshotRate}%</td>
                <td>${row.HeadshotDeaths}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

async function exportAnalysis(analysisType) {
    const filters = getFilters();
    filters.format = 'csv';
    
    const endpoints = {
        'clutch': 'clutch-analysis',
        'trade-kill': 'trade-kill-analysis',
        'first-kill': 'first-kill-impact',
        'economy': 'economy-intelligence-dashboard',
        'performance': 'advanced-player-performance',
        'position': 'position-analysis',
        'master-analytics': 'master-analytics-dashboard',
        'situation-analysis': 'situation-analysis',
        'inventory': 'player-inventory',
        'positioning': 'positioning-analysis',
        'weapon-intelligence': 'weapon-intelligence',
        'circumstantial': 'circumstantial-combat',
        'team-coordination': 'team-coordination',
        'economic-intelligence': 'economic-intelligence',
        'pressure-metrics': 'pressure-metrics'
    };
    
    const endpoint = endpoints[analysisType];
    if (!endpoint) return;
    
    const params = buildQueryString(filters);
    window.location.href = `/api/advanced-analytics/${endpoint}?${params}`;
}

function displayMasterAnalyticsResults(response) {
    const container = document.getElementById('masterAnalyticsResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No master analytics data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Performance Score</th>
                        <th>K/D Ratio</th>
                        <th>Headshot %</th>
                        <th>Damage/Round</th>
                        <th>Utility Efficiency</th>
                        <th>Survival Rate</th>
                        <th>KAST %</th>
                        <th>Clutch Rounds</th>
                        <th>Flash Trade Ratio</th>
                        <th>Bomb Actions</th>
                        <th>Advanced Stats</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.Data.forEach(row => {
        const performanceColor = row.OverallPerformanceScore >= 70 ? 'text-success' : 
                                row.OverallPerformanceScore >= 50 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-warning'}">${row.Team}</span></td>
                <td><span class="badge bg-info ${performanceColor}">${row.OverallPerformanceScore?.toFixed(1) || 'N/A'}</span></td>
                <td>${row.KDRatio?.toFixed(2) || 'N/A'}</td>
                <td>${row.HeadshotPercentage?.toFixed(1) || 'N/A'}%</td>
                <td>${row.AvgDamagePerRound?.toFixed(1) || 'N/A'}</td>
                <td>${row.UtilityEfficiency?.toFixed(2) || 'N/A'}</td>
                <td>${row.SurvivalRate?.toFixed(1) || 'N/A'}%</td>
                <td>${row.KASTPercentage?.toFixed(1) || 'N/A'}%</td>
                <td>${row.ClutchRounds || 0}</td>
                <td>${row.FlashTradeRatio?.toFixed(2) || 'N/A'}</td>
                <td>${row.BombPlants || 0}/${row.BombDefuses || 0}</td>
                <td>
                    <small>
                        Wallbangs: ${row.WallbangKills || 0}<br>
                        Smoke Kills: ${row.SmokeKills || 0}<br>
                        Grenades: ${row.GrenadesThrown || 0}
                    </small>
                </td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Performance Score combines K/D, survival, utility usage, and accuracy metrics (0-100 scale).
                ${response.Data.length} players analyzed with comprehensive multi-dimensional metrics.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function displaySituationResults(response) {
    const container = document.getElementById('situationResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No situational analysis data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Situation</th>
                        <th>Economy State</th>
                        <th>Utility State</th>
                        <th>Frequency</th>
                        <th>Win Rate</th>
                        <th>Survival Rate</th>
                        <th>Pressure Score</th>
                        <th>Difficulty</th>
                        <th>Performance</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.Data.forEach(row => {
        const pressureColor = row.PressurePerformanceScore >= 2.0 ? 'text-success' : 
                             row.PressurePerformanceScore >= 1.0 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge bg-secondary">${row.SituationType}</span></td>
                <td><span class="badge bg-info">${row.EconomyState}</span></td>
                <td><span class="badge bg-light text-dark">${row.UtilityState}</span></td>
                <td>${row.TimesInSituation}</td>
                <td>${row.WinPercentageInSituation?.toFixed(1) || 'N/A'}%</td>
                <td>${row.SurvivalRateInSituation?.toFixed(1) || 'N/A'}%</td>
                <td><span class="${pressureColor}">${row.PressurePerformanceScore?.toFixed(2) || 'N/A'}</span></td>
                <td>${row.DifficultyScore}/10</td>
                <td>
                    <small>
                        K/D: ${row.KDRatioInSituation?.toFixed(2) || 'N/A'}<br>
                        Dmg: ${row.AvgDamageInSituation?.toFixed(0) || 'N/A'}<br>
                        Rating: ${row.AvgRatingInSituation?.toFixed(2) || 'N/A'}
                    </small>
                </td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Pressure Performance Score shows performance under stress (higher = better under pressure).
                Difficulty Score: 1vX=9, Force/Eco=6-8, Flashed=7, Standard=3.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function displayInventoryResults(response) {
    const container = document.getElementById('inventoryResults');
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No inventory data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Round</th>
                        <th>Loadout Category</th>
                        <th>Equipment Value</th>
                        <th>Money (Start/End)</th>
                        <th>Primary</th>
                        <th>Armor</th>
                        <th>Weapons</th>
                        <th>Grenades</th>
                        <th>Efficiency</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.Data.forEach(row => {
        const categoryColor = {
            'Full Buy': 'bg-success',
            'Buy Round': 'bg-primary', 
            'Force Buy': 'bg-warning',
            'Eco Round': 'bg-secondary',
            'Save Round': 'bg-danger'
        }[row.LoadoutCategory] || 'bg-secondary';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td>${row.RoundNumber}</td>
                <td><span class="badge ${categoryColor}">${row.LoadoutCategory}</span></td>
                <td>$${row.TotalEquipmentValue || 0}</td>
                <td>$${row.RoundStartMoney || 0} ‚Üí $${row.RoundEndMoney || 0}</td>
                <td>${row.HasPrimary === 'Yes' ? '‚úÖ' : '‚ùå'}</td>
                <td>${row.HasArmor === 'Yes' ? 'üõ°Ô∏è' : '‚ùå'}</td>
                <td><small>${row.WeaponsCarried || 'None'}</small></td>
                <td><small>${row.GrenadesCarried || 'None'}</small></td>
                <td>${row.MoneyToEquipmentRatio?.toFixed(2) || 'N/A'}</td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Equipment efficiency shows money-to-equipment ratio (higher = more economic).
                Loadout categories based on total equipment value and purchase patterns.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

// New advanced analytics load functions
async function loadPositioningAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/positioning-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'positioningResults');
    } else {
        document.getElementById('positioningResults').innerHTML = '<div class="alert alert-danger">Failed to load positioning analysis</div>';
    }
}

async function loadWeaponIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/weapon-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'weaponIntelligenceResults');
    } else {
        document.getElementById('weaponIntelligenceResults').innerHTML = '<div class="alert alert-danger">Failed to load weapon intelligence</div>';
    }
}

async function loadCircumstantialCombat(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/circumstantial-combat?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'circumstantialResults');
    } else {
        document.getElementById('circumstantialResults').innerHTML = '<div class="alert alert-danger">Failed to load circumstantial combat analysis</div>';
    }
}

async function loadTeamCoordination(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/team-coordination?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'teamCoordinationResults');
    } else {
        document.getElementById('teamCoordinationResults').innerHTML = '<div class="alert alert-danger">Failed to load team coordination analysis</div>';
    }
}

async function loadEconomicIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economic-intelligence?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'economicIntelligenceResults');
    } else {
        document.getElementById('economicIntelligenceResults').innerHTML = '<div class="alert alert-danger">Failed to load economic intelligence analysis</div>';
    }
}

async function loadPressureMetrics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/pressure-metrics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'pressureMetricsResults');
    } else {
        document.getElementById('pressureMetricsResults').innerHTML = '<div class="alert alert-danger">Failed to load pressure metrics analysis</div>';
    }
}

// Generic display function for new analytics
function displayGenericResults(response, containerId) {
    const container = document.getElementById(containerId);
    
    if (!response.Data || response.Data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No data found for the selected filters.</div>';
        return;
    }

    // Create table with dynamic headers
    const firstRow = response.Data[0];
    const headers = Object.keys(firstRow);
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover analytics-table">
                <thead class="table-dark">
                    <tr>${headers.map(header => `<th>${header}</th>`).join('')}</tr>
                </thead>
                <tbody>`;
    
    response.Data.forEach(row => {
        html += '<tr>';
        headers.forEach(header => {
            let value = row[header];
            let displayValue = value;
            
            // Format numeric values
            if (typeof value === 'number') {
                if (header.toLowerCase().includes('percentage') || header.toLowerCase().includes('rate')) {
                    displayValue = `${value.toFixed(1)}%`;
                } else if (header.toLowerCase().includes('score') || header.toLowerCase().includes('rating')) {
                    displayValue = value.toFixed(2);
                } else if (value > 1000) {
                    displayValue = value.toLocaleString();
                } else if (value % 1 !== 0) {
                    displayValue = value.toFixed(2);
                }
            }
            
            // Add color coding for certain metrics
            let cellClass = '';
            if (header.toLowerCase().includes('percentage') || header.toLowerCase().includes('rate')) {
                if (value > 70) cellClass = 'text-success fw-bold';
                else if (value > 40) cellClass = 'text-warning';
                else cellClass = 'text-danger';
            }
            
            html += `<td class="${cellClass}">${displayValue}</td>`;
        });
        html += '</tr>';
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                <strong>${response.title}</strong>: ${response.description} 
                (${response.totalRecords} records found)
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function clearFilters() {
    document.getElementById('demoSelect').value = '';
    document.getElementById('mapSelect').value = '';
    document.getElementById('playerSelect').value = '';
    document.getElementById('teamSelect').value = '';
    
    // Optionally refresh analytics with cleared filters
    // refreshAnalytics();
}

async function loadEconomyEnhanced(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economy-intelligence-enhanced?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'economyEnhancedResults');
    } else {
        document.getElementById('economyEnhancedResults').innerHTML = '<div class="alert alert-danger">Failed to load enhanced economy intelligence</div>';
    }
}

async function loadMovementPositioning(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/movement-positioning?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'movementPositioningResults');
    } else {
        document.getElementById('movementPositioningResults').innerHTML = '<div class="alert alert-danger">Failed to load movement positioning analysis</div>';
    }
}

async function loadTimingTempo(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/timing-tempo?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'timingTempoResults');
    } else {
        document.getElementById('timingTempoResults').innerHTML = '<div class="alert alert-danger">Failed to load timing tempo analysis</div>';
    }
}

async function loadWeaponMastery(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/weapon-mastery?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'weaponMasteryResults');
    } else {
        document.getElementById('weaponMasteryResults').innerHTML = '<div class="alert alert-danger">Failed to load weapon mastery analysis</div>';
    }
}

async function loadMatchFlow(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/match-flow?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'matchFlowResults');
    } else {
        document.getElementById('matchFlowResults').innerHTML = '<div class="alert alert-danger">Failed to load match flow analysis</div>';
    }
}

async function loadPerformanceTrends(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/performance-trends?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'performanceTrendsResults');
    } else {
        document.getElementById('performanceTrendsResults').innerHTML = '<div class="alert alert-danger">Failed to load performance trends analysis</div>';
    }
}

async function loadTeamDynamics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/team-dynamics?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayGenericResults(data, 'teamDynamicsResults');
    } else {
        document.getElementById('teamDynamicsResults').innerHTML = '<div class="alert alert-danger">Failed to load team dynamics analysis</div>';
    }
}

function showError(message) {
    const containers = ['clutchResults', 'tradeKillResults', 'firstKillResults', 'economyResults', 'performanceResults', 'positionResults', 'masterAnalyticsResults', 'situationResults', 'inventoryResults', 'positioningResults', 'weaponIntelligenceResults', 'circumstantialResults', 'teamCoordinationResults', 'economicIntelligenceResults', 'pressureMetricsResults', 'economyEnhancedResults', 'movementPositioningResults', 'timingTempoResults', 'weaponMasteryResults', 'matchFlowResults', 'performanceTrendsResults', 'teamDynamicsResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `<div class="alert alert-danger">${message}</div>`;
    });
}

// Universal widget update helper
function updateWidgetContent(containerId, html) {
    const tabContainer = document.getElementById(containerId);
    const gridContainer = document.querySelector(`.grid-widget-body[data-original-id="${containerId}"]`);
    
    if (tabContainer) tabContainer.innerHTML = html;
    if (gridContainer) gridContainer.innerHTML = html;
}

// Chart creation functions
let clutchCharts = {};

function createClutchCharts(data) {
    // Destroy existing charts
    if (clutchCharts.success) clutchCharts.success.destroy();
    if (clutchCharts.attempts) clutchCharts.attempts.destroy();
    
    // Find charts in both tab and grid views
    const successCtx = document.getElementById('clutchSuccessChart') || 
                      document.querySelector('.grid-widget-body[data-original-id="clutchResults"] #clutchSuccessChart');
    
    if (successCtx) {
        const players = data.map(d => d.ClutchPlayer).slice(0, 10);
        const successRates = data.map(d => parseFloat(d.ClutchSuccessRate || 0)).slice(0, 10);
        
        clutchCharts.success = new Chart(successCtx, {
            type: 'bar',
            data: {
                labels: players,
                datasets: [{
                    label: 'Success Rate (%)',
                    data: successRates,
                    backgroundColor: successRates.map(rate => 
                        rate > 50 ? '#28a745' : rate > 25 ? '#ffc107' : '#dc3545'
                    ),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: { callback: value => value + '%' }
                    }
                },
                onClick: (event, elements) => {
                    if (elements.length > 0) {
                        const index = elements[0].index;
                        showPlayerDetails(players[index], 'clutch');
                    }
                }
            }
        });
    }
    
    // Attempts vs Wins Chart
    const attemptsCtx = document.getElementById('clutchAttemptsChart') ||
                       document.querySelector('.grid-widget-body[data-original-id="clutchResults"] #clutchAttemptsChart');
    
    if (attemptsCtx) {
        const topPlayers = data.slice(0, 8);
        
        clutchCharts.attempts = new Chart(attemptsCtx, {
            type: 'doughnut',
            data: {
                labels: topPlayers.map(d => d.ClutchPlayer),
                datasets: [{
                    data: topPlayers.map(d => parseInt(d.ClutchAttempts || 0)),
                    backgroundColor: [
                        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'right' }
                },
                onClick: (event, elements) => {
                    if (elements.length > 0) {
                        const index = elements[0].index;
                        showPlayerDetails(topPlayers[index].ClutchPlayer, 'clutch');
                    }
                }
            }
        });
    }
}

// Real-time auto-refresh functionality
let autoRefreshInterval = null;
let isAutoRefreshEnabled = false;

function toggleAutoRefresh() {
    const button = document.querySelector('.btn-primary');
    
    if (isAutoRefreshEnabled) {
        clearInterval(autoRefreshInterval);
        isAutoRefreshEnabled = false;
        button.innerHTML = '<i class="fas fa-sync-alt me-2"></i>Auto-Refresh: OFF';
        button.classList.remove('btn-success');
        button.classList.add('btn-primary');
    } else {
        autoRefreshInterval = setInterval(() => {
            refreshAnalytics();
        }, 30000); // Refresh every 30 seconds
        isAutoRefreshEnabled = true;
        button.innerHTML = '<i class="fas fa-sync-alt me-2"></i>Auto-Refresh: ON';
        button.classList.remove('btn-primary');
        button.classList.add('btn-success');
    }
}

// Interactive filtering without page reloads
function setupInteractiveFilters() {
    const filterElements = ['demoSelect', 'mapSelect', 'playerSelect', 'teamSelect'];
    
    filterElements.forEach(elementId => {
        const element = document.getElementById(elementId);
        if (element) {
            element.addEventListener('change', () => {
                if (isAutoRefreshEnabled) {
                    refreshAnalytics();
                }
            });
        }
    });
}

// Drill-down capability for metrics
function showPlayerDetails(playerName, analysisType) {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Player Details: ${playerName}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="playerDetailsContent">
                        <div class="text-center">
                            <div class="spinner-border" role="status"></div>
                            <p class="mt-2">Loading player details...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();
    
    // Load detailed player data
    loadPlayerDetails(playerName, analysisType);
    
    modal.addEventListener('hidden.bs.modal', () => {
        document.body.removeChild(modal);
    });
}

async function loadPlayerDetails(playerName, analysisType) {
    try {
        const filters = getFilters();
        filters.PlayerName = playerName;
        
        const endpoints = {
            'clutch': 'clutch-analysis',
            'performance': 'advanced-player-performance',
            'economy': 'economy-intelligence-dashboard'
        };
        
        const endpoint = endpoints[analysisType] || 'clutch-analysis';
        const params = buildQueryString(filters);
        const response = await fetch(`/api/advanced-analytics/${endpoint}?${params}`);
        
        if (response.ok) {
            const data = await response.json();
            displayPlayerDetails(data, playerName, analysisType);
        } else {
            document.getElementById('playerDetailsContent').innerHTML = 
                '<div class="alert alert-warning">Unable to load detailed data for this player.</div>';
        }
    } catch (error) {
        document.getElementById('playerDetailsContent').innerHTML = 
            '<div class="alert alert-danger">Error loading player details.</div>';
    }
}

function displayPlayerDetails(data, playerName, analysisType) {
    const content = document.getElementById('playerDetailsContent');
    
    if (!data.Data || data.Data.length === 0) {
        content.innerHTML = '<div class="alert alert-info">No detailed data available for this player.</div>';
        return;
    }
    
    const playerData = data.Data.filter(d => 
        d.ClutchPlayer === playerName || 
        d.PlayerName === playerName ||
        d.Player === playerName
    );
    
    if (playerData.length === 0) {
        content.innerHTML = '<div class="alert alert-info">No detailed data found for this player.</div>';
        return;
    }
    
    let html = `
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Performance Summary</h6>
                    </div>
                    <div class="card-body">
                        <canvas id="playerDetailsChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Detailed Stats</h6>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <tbody>
    `;
    
    // Display key metrics based on analysis type
    const firstRow = playerData[0];
    Object.keys(firstRow).forEach(key => {
        if (key !== 'ClutchPlayer' && key !== 'PlayerName' && key !== 'Player') {
            html += `<tr><td><strong>${key}:</strong></td><td>${firstRow[key]}</td></tr>`;
        }
    });
    
    html += `
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    content.innerHTML = html;
    
    // Create mini chart for player details
    setTimeout(() => {
        createPlayerDetailsChart(playerData, analysisType);
    }, 100);
}

function createPlayerDetailsChart(playerData, analysisType) {
    const ctx = document.getElementById('playerDetailsChart');
    if (!ctx) return;
    
    let chartConfig = {
        type: 'line',
        data: {
            labels: ['Performance'],
            datasets: [{
                label: 'Metrics',
                data: [100],
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)'
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: false }
            }
        }
    };
    
    new Chart(ctx, chartConfig);
}

// Dashboard Customization Functions
let sortableInstance = null;
let dashboardCustomizationEnabled = false;
let savedViews = JSON.parse(localStorage.getItem('cs2-analytics-saved-views') || '[]');
let dashboardLayout = JSON.parse(localStorage.getItem('cs2-dashboard-layout') || '{"style": "tabs", "widgetOrder": [], "hiddenWidgets": [], "widgetSizes": {}}');

// Toggle Dashboard Customization Panel
function toggleDashboardCustomization() {
    const panel = document.getElementById('dashboardCustomizationPanel');
    dashboardCustomizationEnabled = !dashboardCustomizationEnabled;
    
    if (dashboardCustomizationEnabled) {
        panel.classList.remove('d-none');
        enableDragHandles();
        
        // Switch to grid view if in masonry or grid mode
        const layoutStyle = document.getElementById('layoutStyle').value;
        if (layoutStyle !== 'tabs') {
            switchToGridView();
        }
    } else {
        panel.classList.add('d-none');
        disableDragHandles();
        applyLayoutStyle(); // Revert to selected layout
    }
}

// Apply Layout Style
function applyLayoutStyle() {
    const style = document.getElementById('layoutStyle').value;
    const tabContent = document.getElementById('analyticsTabContent');
    const tabsNav = document.getElementById('analyticsTab');
    const dashboardGrid = document.getElementById('dashboardGrid');
    
    dashboardLayout.style = style;
    saveDashboardLayout();
    
    switch (style) {
        case 'grid':
            tabsNav.style.display = 'none';
            switchToGridView();
            break;
        case 'masonry':
            tabsNav.style.display = 'none';
            switchToMasonryView();
            break;
        case 'tabs':
        default:
            tabsNav.style.display = 'flex';
            dashboardGrid.classList.add('d-none');
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.style.display = '';
            });
            break;
    }
}

// Switch to Grid View
function switchToGridView() {
    const dashboardGrid = document.getElementById('dashboardGrid');
    const sortableContainer = document.getElementById('sortableWidgets');
    
    dashboardGrid.classList.remove('d-none');
    document.querySelectorAll('.tab-pane').forEach(pane => {
        pane.style.display = 'none';
    });
    
    // Move widgets to grid
    createGridWidgets();
    
    // Initialize sortable if enabled
    if (dashboardCustomizationEnabled && document.getElementById('enableDragDrop').checked) {
        initializeSortable();
    }
}

// Switch to Masonry View
function switchToMasonryView() {
    switchToGridView(); // Use grid as base
    // Add masonry-specific styling
    const container = document.getElementById('sortableWidgets');
    container.className = 'masonry-container';
    
    // Apply masonry layout
    setTimeout(() => {
        arrangeMasonryLayout();
    }, 100);
}

// Create Grid Widgets
function createGridWidgets() {
    const container = document.getElementById('sortableWidgets');
    const widgets = document.querySelectorAll('.analytics-widget');
    container.innerHTML = '';
    
    widgets.forEach(widget => {
        if (dashboardLayout.hiddenWidgets.includes(widget.dataset.widgetId)) return;
        
        const widgetId = widget.dataset.widgetId;
        const widgetTitle = widget.dataset.widgetTitle;
        const widgetIcon = widget.dataset.widgetIcon;
        const originalCardBody = widget.querySelector('.card-body');
        const originalResultsId = originalCardBody.id;
        
        const size = dashboardLayout.widgetSizes[widgetId] || 'normal';
        const colClass = size === 'compact' ? 'col-md-4' : size === 'large' ? 'col-12' : 'col-md-6';
        
        const gridWidget = document.createElement('div');
        gridWidget.className = `${colClass} mb-4 sortable-widget`;
        gridWidget.dataset.widgetId = widgetId;
        
        gridWidget.innerHTML = `
            <div class="card widget-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="card-title mb-0">
                        <span class="widget-drag-handle me-2" style="cursor: move;">
                            <i class="fas fa-grip-vertical"></i>
                        </span>
                        ${widgetIcon} ${widgetTitle}
                    </h6>
                    <div class="widget-controls">
                        <div class="dropdown d-inline-block">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-cog"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="toggleWidgetSize('${widgetId}')"><i class="fas fa-expand-arrows-alt me-2"></i>Toggle Size</a></li>
                                <li><a class="dropdown-item" href="#" onclick="hideWidget('${widgetId}')"><i class="fas fa-eye-slash me-2"></i>Hide Widget</a></li>
                                <li><a class="dropdown-item" href="#" onclick="refreshWidget('${widgetId}')"><i class="fas fa-sync-alt me-2"></i>Refresh</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body grid-widget-body" data-original-id="${originalResultsId}">
                    <div class="text-center text-muted">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        Loading ${widgetTitle} data...
                    </div>
                </div>
            </div>
        `;
        
        container.appendChild(gridWidget);
    });
    
    // After creating grid widgets, refresh data for visible widgets
    setTimeout(() => {
        refreshGridWidgetData();
    }, 100);
}

// Refresh data for all grid widgets
function refreshGridWidgetData() {
    const gridWidgets = document.querySelectorAll('.sortable-widget');
    gridWidgets.forEach(widget => {
        const widgetId = widget.dataset.widgetId;
        const gridBody = widget.querySelector('.grid-widget-body');
        const originalData = document.getElementById(`${widgetId}Results`);
        
        if (originalData && gridBody && originalData.innerHTML.trim() !== '') {
            // Copy current data from tab to grid
            gridBody.innerHTML = originalData.innerHTML;
            
            // Recreate any charts if they exist
            const canvas = gridBody.querySelector('canvas');
            if (canvas && widgetId === 'clutch') {
                // Need to trigger chart recreation for this specific canvas
                setTimeout(() => {
                    // Find data in original container and recreate chart
                    const tabContainer = document.getElementById('clutchResults');
                    if (tabContainer.innerHTML.includes('clutchSuccessChart')) {
                        // Charts will be recreated by the existing chart creation logic
                        createClutchCharts(window.lastClutchData || []);
                    }
                }, 50);
            }
        }
    });
}

// Initialize Sortable
function initializeSortable() {
    const container = document.getElementById('sortableWidgets');
    if (sortableInstance) {
        sortableInstance.destroy();
    }
    
    sortableInstance = Sortable.create(container, {
        handle: '.widget-drag-handle',
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        dragClass: 'sortable-drag',
        onEnd: function(evt) {
            saveDashboardOrder();
        }
    });
}

// Widget Control Functions
function toggleWidgetSize(widgetId) {
    const currentSize = dashboardLayout.widgetSizes[widgetId] || 'normal';
    const newSize = currentSize === 'compact' ? 'normal' : 
                   currentSize === 'normal' ? 'large' : 'compact';
    
    dashboardLayout.widgetSizes[widgetId] = newSize;
    saveDashboardLayout();
    
    if (document.getElementById('layoutStyle').value !== 'tabs') {
        createGridWidgets();
        if (sortableInstance) initializeSortable();
    }
}

function hideWidget(widgetId) {
    dashboardLayout.hiddenWidgets.push(widgetId);
    saveDashboardLayout();
    
    if (document.getElementById('layoutStyle').value !== 'tabs') {
        createGridWidgets();
        if (sortableInstance) initializeSortable();
    } else {
        document.getElementById(widgetId).style.display = 'none';
        // Hide corresponding tab
        const tab = document.querySelector(`[data-bs-target="#${widgetId}"]`);
        if (tab) tab.closest('.nav-item').style.display = 'none';
    }
}

function refreshWidget(widgetId) {
    // Show loading state in grid widget
    const gridContainer = document.querySelector(`.grid-widget-body[data-original-id="${widgetId}Results"]`);
    if (gridContainer) {
        gridContainer.innerHTML = '<div class="text-center text-muted"><div class="spinner-border spinner-border-sm me-2"></div>Refreshing data...</div>';
    }
    
    // Refresh specific widget data
    const filters = getFilters();
    
    const widgetFunctions = {
        'clutch': () => loadClutchAnalysis(filters),
        'trade-kill': () => loadTradeKillAnalysis(filters),
        'economy': () => loadEconomyIntelligence(filters),
        'performance': () => loadPlayerPerformance(filters),
        'first-kill': () => loadFirstKillAnalysis(filters),
        'position': () => loadPositionAnalysis(filters),
        'interactive-heatmap': () => refreshHeatmapData()
    };
    
    if (widgetFunctions[widgetId]) {
        widgetFunctions[widgetId]();
    }
}

function resetDashboardLayout() {
    dashboardLayout = {
        style: "tabs",
        widgetOrder: [],
        hiddenWidgets: [],
        widgetSizes: {}
    };
    saveDashboardLayout();
    
    // Reset UI
    document.getElementById('layoutStyle').value = 'tabs';
    document.getElementById('widgetSize').value = 'normal';
    
    // Show all widgets and tabs
    document.querySelectorAll('.analytics-widget, .nav-item').forEach(el => {
        el.style.display = '';
    });
    
    applyLayoutStyle();
}

// Enable/Disable Drag Handles
function enableDragHandles() {
    document.querySelectorAll('.widget-drag-handle').forEach(handle => {
        handle.style.display = 'inline-block';
    });
}

function disableDragHandles() {
    document.querySelectorAll('.widget-drag-handle').forEach(handle => {
        handle.style.display = 'none';
    });
}

function toggleDragDrop() {
    const enabled = document.getElementById('enableDragDrop').checked;
    if (enabled && document.getElementById('layoutStyle').value !== 'tabs') {
        initializeSortable();
    } else if (sortableInstance) {
        sortableInstance.destroy();
        sortableInstance = null;
    }
}

// Saved Views Functions
function saveCurrentView() {
    const viewName = prompt('Enter a name for this view:');
    if (!viewName) return;
    
    const currentView = {
        id: Date.now().toString(),
        name: viewName,
        filters: getFilters(),
        layout: dashboardLayout,
        timestamp: new Date().toISOString()
    };
    
    savedViews.push(currentView);
    localStorage.setItem('cs2-analytics-saved-views', JSON.stringify(savedViews));
    updateSavedViewsDropdown();
    
    showNotification('View saved successfully!', 'success');
}

function loadSavedView(viewId) {
    const view = savedViews.find(v => v.id === viewId);
    if (!view) return;
    
    // Apply filters
    Object.keys(view.filters).forEach(key => {
        const element = document.getElementById(key === 'DemoId' ? 'demoSelect' : 
                                             key === 'MapName' ? 'mapSelect' :
                                             key === 'PlayerName' ? 'playerSelect' :
                                             key === 'Team' ? 'teamSelect' : '');
        if (element && view.filters[key]) {
            element.value = view.filters[key];
        }
    });
    
    // Apply dashboard layout
    dashboardLayout = {...view.layout};
    document.getElementById('layoutStyle').value = dashboardLayout.style;
    applyLayoutStyle();
    
    // Refresh analytics with new filters
    refreshAnalytics();
    
    showNotification(`Loaded view: ${view.name}`, 'info');
}

function deleteSavedView(viewId) {
    savedViews = savedViews.filter(v => v.id !== viewId);
    localStorage.setItem('cs2-analytics-saved-views', JSON.stringify(savedViews));
    updateSavedViewsDropdown();
    
    showNotification('View deleted', 'warning');
}

function updateSavedViewsDropdown() {
    const dropdown = document.getElementById('savedViewsList');
    
    // Keep the "Save Current View" option and divider
    const staticItems = dropdown.querySelectorAll('li:nth-child(1), li:nth-child(2)');
    dropdown.innerHTML = '';
    staticItems.forEach(item => dropdown.appendChild(item));
    
    if (savedViews.length === 0) {
        const emptyItem = document.createElement('li');
        emptyItem.innerHTML = '<span class="dropdown-item-text text-muted">No saved views yet</span>';
        dropdown.appendChild(emptyItem);
    } else {
        savedViews.forEach(view => {
            const item = document.createElement('li');
            item.innerHTML = `
                <div class="dropdown-item d-flex justify-content-between align-items-center">
                    <span onclick="loadSavedView('${view.id}')" style="cursor: pointer;">
                        <i class="fas fa-bookmark me-2"></i>${view.name}
                    </span>
                    <button class="btn btn-sm btn-outline-danger ms-2" onclick="deleteSavedView('${view.id}')" title="Delete">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            `;
            dropdown.appendChild(item);
        });
    }
}

// Export Functions
async function exportToPDF() {
    showNotification('Generating PDF report...', 'info');
    
    try {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('l', 'mm', 'a4'); // Landscape orientation
        
        // Add title
        doc.setFontSize(20);
        doc.text('CS2 Analytics Report', 20, 20);
        
        // Add timestamp
        doc.setFontSize(12);
        doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 30);
        
        // Add current filters info
        const filters = getFilters();
        let filterText = 'Filters: ';
        Object.keys(filters).forEach(key => {
            if (filters[key]) {
                filterText += `${key}: ${filters[key]}, `;
            }
        });
        doc.text(filterText, 20, 40);
        
        let yPosition = 60;
        
        // Capture visible charts and tables
        const activeWidgets = document.querySelectorAll('.tab-pane.active, .sortable-widget:not(.d-none)');
        
        for (let widget of activeWidgets) {
            const canvas = widget.querySelector('canvas');
            const table = widget.querySelector('table');
            
            if (canvas) {
                // Add chart to PDF
                const imgData = canvas.toDataURL('image/png');
                doc.addImage(imgData, 'PNG', 20, yPosition, 100, 60);
                yPosition += 70;
            }
            
            if (table && yPosition < 180) {
                // Add table summary (first few rows)
                doc.text(`Table: ${widget.querySelector('.card-title')?.textContent || 'Analytics'}`, 20, yPosition);
                yPosition += 10;
                
                const rows = table.querySelectorAll('tbody tr');
                for (let i = 0; i < Math.min(5, rows.length); i++) {
                    const cells = rows[i].querySelectorAll('td');
                    let rowText = '';
                    for (let j = 0; j < Math.min(3, cells.length); j++) {
                        rowText += cells[j].textContent + ' | ';
                    }
                    doc.text(rowText, 25, yPosition);
                    yPosition += 5;
                }
                yPosition += 10;
            }
            
            // Add new page if needed
            if (yPosition > 180) {
                doc.addPage();
                yPosition = 20;
            }
        }
        
        // Save PDF
        doc.save(`cs2-analytics-report-${new Date().toISOString().split('T')[0]}.pdf`);
        showNotification('PDF report generated successfully!', 'success');
        
    } catch (error) {
        console.error('PDF export error:', error);
        showNotification('Failed to generate PDF report', 'danger');
    }
}

async function exportToPowerPoint() {
    showNotification('PowerPoint export coming soon!', 'info');
    
    // For now, create a simple HTML export that can be opened in PowerPoint
    try {
        const filters = getFilters();
        let html = `
        <html>
        <head>
            <title>CS2 Analytics Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .slide { page-break-after: always; margin-bottom: 50px; }
                .chart-container { text-align: center; margin: 20px 0; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
            </style>
        </head>
        <body>
            <div class="slide">
                <h1>CS2 Analytics Report</h1>
                <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
                <p><strong>Filters Applied:</strong></p>
                <ul>
        `;
        
        Object.keys(filters).forEach(key => {
            if (filters[key]) {
                html += `<li>${key}: ${filters[key]}</li>`;
            }
        });
        
        html += `</ul></div>`;
        
        // Add slides for each widget
        const activeWidgets = document.querySelectorAll('.tab-pane.active, .sortable-widget:not(.d-none)');
        activeWidgets.forEach(widget => {
            const title = widget.querySelector('.card-title')?.textContent || 'Analytics';
            html += `
                <div class="slide">
                    <h2>${title}</h2>
                    <div class="chart-container">
                        ${widget.querySelector('.card-body')?.innerHTML || ''}
                    </div>
                </div>
            `;
        });
        
        html += '</body></html>';
        
        // Create and download HTML file
        const blob = new Blob([html], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `cs2-analytics-report-${new Date().toISOString().split('T')[0]}.html`;
        link.click();
        
        showNotification('HTML report generated! Open in PowerPoint to convert.', 'success');
        
    } catch (error) {
        console.error('PowerPoint export error:', error);
        showNotification('Failed to generate PowerPoint export', 'danger');
    }
}

function generateShareableLink() {
    const filters = getFilters();
    const layout = dashboardLayout;
    
    // Create shareable data
    const shareData = {
        filters: filters,
        layout: layout,
        timestamp: new Date().toISOString()
    };
    
    // Encode data for URL
    const encoded = btoa(JSON.stringify(shareData));
    const shareUrl = `${window.location.origin}${window.location.pathname}?share=${encoded}`;
    
    // Copy to clipboard
    navigator.clipboard.writeText(shareUrl).then(() => {
        showNotification('Shareable link copied to clipboard!', 'success');
    }).catch(err => {
        // Fallback: show link in modal
        showShareModal(shareUrl);
    });
}

function showShareModal(url) {
    const modal = document.createElement('div');
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Share Analytics View</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Copy this link to share your current analytics view:</p>
                    <div class="input-group">
                        <input type="text" class="form-control" value="${url}" readonly id="shareUrlInput">
                        <button class="btn btn-outline-secondary" onclick="copyShareUrl()">Copy</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    const modalInstance = new bootstrap.Modal(modal);
    modalInstance.show();
    
    modal.addEventListener('hidden.bs.modal', () => {
        document.body.removeChild(modal);
    });
}

function copyShareUrl() {
    const input = document.getElementById('shareUrlInput');
    input.select();
    document.execCommand('copy');
    showNotification('Link copied to clipboard!', 'success');
}

// Load shared view from URL
function loadSharedView() {
    const urlParams = new URLSearchParams(window.location.search);
    const shareData = urlParams.get('share');
    
    if (shareData) {
        try {
            const decoded = JSON.parse(atob(shareData));
            
            // Apply filters
            Object.keys(decoded.filters).forEach(key => {
                const element = document.getElementById(key === 'DemoId' ? 'demoSelect' : 
                                                     key === 'MapName' ? 'mapSelect' :
                                                     key === 'PlayerName' ? 'playerSelect' :
                                                     key === 'Team' ? 'teamSelect' : '');
                if (element && decoded.filters[key]) {
                    element.value = decoded.filters[key];
                }
            });
            
            // Apply layout
            if (decoded.layout) {
                dashboardLayout = decoded.layout;
                document.getElementById('layoutStyle').value = dashboardLayout.style;
                applyLayoutStyle();
            }
            
            // Refresh analytics
            setTimeout(() => {
                refreshAnalytics();
            }, 1000);
            
            showNotification('Shared view loaded successfully!', 'success');
            
        } catch (error) {
            console.error('Error loading shared view:', error);
            showNotification('Invalid share link', 'danger');
        }
    }
}

// Utility Functions
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} notification-toast`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
        animation: slideIn 0.3s ease;
    `;
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close ms-2" onclick="this.parentElement.remove()"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

function saveDashboardLayout() {
    localStorage.setItem('cs2-dashboard-layout', JSON.stringify(dashboardLayout));
}

function saveDashboardOrder() {
    const widgets = Array.from(document.querySelectorAll('.sortable-widget'));
    dashboardLayout.widgetOrder = widgets.map(widget => widget.dataset.widgetId);
    saveDashboardLayout();
}

function arrangeMasonryLayout() {
    // Simple masonry-like layout using CSS flexbox
    const container = document.getElementById('sortableWidgets');
    container.style.display = 'flex';
    container.style.flexWrap = 'wrap';
    container.style.alignItems = 'flex-start';
    
    const widgets = container.querySelectorAll('.sortable-widget');
    widgets.forEach(widget => {
        widget.style.flex = '0 0 calc(33.333% - 1rem)';
        widget.style.margin = '0.5rem';
    });
}

// Interactive Heatmap Functions
let heatmapMap = null;
let heatmapLayers = {};
let heatmapData = {};
let currentHeatmapType = 'position';
let isHeatmapAnimating = false;
let heatmapAnimation = null;

// Map configurations for CS2 maps (coordinate transformations)
const mapConfigs = {
    'de_dust2': { 
        name: 'Dust2', 
        bounds: [[-2476, -3239], [1024, 3239]],
        image: '/images/maps/de_dust2.jpg'
    },
    'de_mirage': { 
        name: 'Mirage', 
        bounds: [[-3230, -1713], [1024, 1713]],
        image: '/images/maps/de_mirage.jpg'
    },
    'de_inferno': { 
        name: 'Inferno', 
        bounds: [[-2087, -3870], [1024, 3870]],
        image: '/images/maps/de_inferno.jpg'
    },
    'de_ancient': { 
        name: 'Ancient', 
        bounds: [[-2953, -2164], [1024, 2164]],
        image: '/images/maps/de_ancient.jpg'
    },
    'de_anubis': { 
        name: 'Anubis', 
        bounds: [[-2796, -3328], [1024, 3328]],
        image: '/images/maps/de_anubis.jpg'
    },
    'de_nuke': { 
        name: 'Nuke', 
        bounds: [[-3453, -2887], [1024, 2887]],
        image: '/images/maps/de_nuke.jpg'
    }
};

// Initialize interactive heatmap
function initializeInteractiveHeatmap() {
    if (heatmapMap) {
        heatmapMap.remove();
    }
    
    const mapContainer = document.getElementById('heatmapMap');
    if (!mapContainer) return;
    
    // Create Leaflet map with custom coordinate system
    heatmapMap = L.map('heatmapMap', {
        crs: L.CRS.Simple,
        minZoom: -2,
        maxZoom: 3,
        zoomControl: true,
        attributionControl: false
    });
    
    // Set initial view
    const bounds = [[-1024, -1024], [1024, 1024]];
    heatmapMap.fitBounds(bounds);
    
    // Add map click handler for position analysis
    heatmapMap.on('click', onMapClick);
    
    // Initialize with default map
    const selectedMap = getSelectedMap();
    if (selectedMap) {
        loadMapBackground(selectedMap);
        loadInitialHeatmapData();
    }
    
    showHeatmapLoading(false);
}

// Get currently selected map from filters or heatmap controls
function getSelectedMap() {
    const mapSelector = document.getElementById('mapSelector');
    const mapFromSelector = mapSelector?.value;
    
    if (mapFromSelector) return mapFromSelector;
    
    // Fallback to main analytics filters
    const mapSelect = document.getElementById('mapSelect');
    return mapSelect?.value || 'de_dust2'; // Default to dust2
}

// Load map background image
function loadMapBackground(mapName) {
    const config = mapConfigs[mapName];
    if (!config || !heatmapMap) return;
    
    // Clear existing layers
    heatmapMap.eachLayer(layer => {
        if (layer instanceof L.ImageOverlay) {
            heatmapMap.removeLayer(layer);
        }
    });
    
    // Add map image overlay
    const imageOverlay = L.imageOverlay(config.image, config.bounds, {
        opacity: 0.8,
        interactive: false
    }).addTo(heatmapMap);
    
    // Fit map to bounds
    heatmapMap.fitBounds(config.bounds);
    
    // Store current map config
    heatmapData.currentMap = mapName;
    heatmapData.currentConfig = config;
}

// Load initial heatmap data
async function loadInitialHeatmapData() {
    await refreshHeatmapData();
}

// Refresh heatmap data from backend
async function refreshHeatmapData() {
    showHeatmapLoading(true);
    
    try {
        const filters = getFilters();
        const selectedMap = getSelectedMap();
        
        if (selectedMap) {
            filters.MapName = selectedMap;
        }
        
        // Load data based on current heatmap type
        const endpoint = getHeatmapEndpoint(currentHeatmapType);
        const params = buildQueryString(filters);
        
        const response = await fetch(`/api/heatmap/${endpoint}?${params}`);
        
        if (response.ok) {
            const data = await response.json();
            displayHeatmapData(data);
            
            // Also load analytics data for enhanced overlays
            await loadAnalyticsOverlay(filters);
        } else {
            showHeatmapError('Failed to load heatmap data');
        }
        
    } catch (error) {
        console.error('Heatmap data load error:', error);
        showHeatmapError('Error loading heatmap data');
    } finally {
        showHeatmapLoading(false);
    }
}

// Get appropriate heatmap endpoint for data type
function getHeatmapEndpoint(type) {
    const endpoints = {
        'position': 'player-positions',
        'kills': 'deaths', // Backend uses 'deaths' for kill locations
        'deaths': 'deaths',
        'utility': 'utility',
        'bomb_events': 'bomb-events',
        'clutch': 'player-positions', // Use position data filtered by clutch situations
        'first-kills': 'deaths' // Use death/kill data filtered by first kills
    };
    
    return endpoints[type] || 'player-positions';
}

// Display heatmap data on the map
function displayHeatmapData(data) {
    if (!heatmapMap || !data.points || data.points.length === 0) {
        return;
    }
    
    // Clear existing heatmap layers
    clearHeatmapLayers();
    
    // Convert backend coordinates to Leaflet coordinates
    const heatPoints = data.points.map(point => [
        transformY(point.y),
        transformX(point.x),
        point.intensity || 1
    ]);
    
    // Create heatmap layer
    const heatLayer = L.heatLayer(heatPoints, {
        radius: parseInt(document.getElementById('heatmapRadius')?.value || 20),
        blur: 15,
        maxZoom: 3,
        max: parseFloat(document.getElementById('heatmapIntensity')?.value || 1),
        gradient: getHeatmapGradient(currentHeatmapType)
    }).addTo(heatmapMap);
    
    heatmapLayers.heat = heatLayer;
    
    // Add individual markers for detailed information
    addDetailMarkers(data.points);
    
    // Update legend based on heatmap type
    updateHeatmapLegend();
    
    // Update info panel
    updateHeatmapStats(data);
}

// Load analytics overlay data
async function loadAnalyticsOverlay(filters) {
    try {
        // Load clutch data for overlay
        if (currentHeatmapType === 'clutch') {
            const clutchParams = buildQueryString(filters);
            const clutchResponse = await fetch(`/api/advanced-analytics/clutch-analysis?${clutchParams}`);
            
            if (clutchResponse.ok) {
                const clutchData = await clutchResponse.json();
                addClutchOverlay(clutchData.Data);
            }
        }
        
        // Load first kill data for overlay
        if (currentHeatmapType === 'first-kills') {
            const firstKillParams = buildQueryString(filters);
            const firstKillResponse = await fetch(`/api/advanced-analytics/first-kill-impact?${firstKillParams}`);
            
            if (firstKillResponse.ok) {
                const firstKillData = await firstKillResponse.json();
                addFirstKillOverlay(firstKillData.Data);
            }
        }
        
    } catch (error) {
        console.error('Analytics overlay load error:', error);
    }
}

// Add clutch situation overlay
function addClutchOverlay(clutchData) {
    if (!clutchData || clutchData.length === 0) return;
    
    // Create clutch markers showing success rates
    clutchData.forEach(clutch => {
        if (clutch.ClutchPlayer && clutch.ClutchSuccessRate) {
            const successRate = parseFloat(clutch.ClutchSuccessRate);
            const color = successRate > 50 ? '#28a745' : successRate > 25 ? '#ffc107' : '#dc3545';
            
            // Add a hypothetical clutch position marker (would need actual position data)
            // This is a placeholder - real implementation would need position coordinates
            const marker = L.circleMarker([0, 0], {
                radius: 8,
                fillColor: color,
                color: '#fff',
                weight: 2,
                opacity: 1,
                fillOpacity: 0.7
            }).addTo(heatmapMap);
            
            marker.bindPopup(`
                <strong>${clutch.ClutchPlayer}</strong><br>
                Success Rate: ${successRate}%<br>
                Attempts: ${clutch.ClutchAttempts}<br>
                Wins: ${clutch.ClutchWins}
            `);
            
            if (!heatmapLayers.clutch) heatmapLayers.clutch = [];
            heatmapLayers.clutch.push(marker);
        }
    });
}

// Add first kill impact overlay
function addFirstKillOverlay(firstKillData) {
    if (!firstKillData || firstKillData.length === 0) return;
    
    // Similar to clutch overlay but for first kill impacts
    // Implementation would depend on available position data
}

// Transform coordinate systems
function transformX(gameX) {
    const config = heatmapData.currentConfig || mapConfigs['de_dust2'];
    return (gameX - config.bounds[0][0]) / (config.bounds[1][0] - config.bounds[0][0]) * 1024 - 512;
}

function transformY(gameY) {
    const config = heatmapData.currentConfig || mapConfigs['de_dust2'];
    return (gameY - config.bounds[0][1]) / (config.bounds[1][1] - config.bounds[0][1]) * 1024 - 512;
}

// Get color gradient for heatmap type
function getHeatmapGradient(type) {
    const gradients = {
        'position': {0.4: 'blue', 0.6: 'cyan', 0.7: 'lime', 0.8: 'yellow', 1.0: 'red'},
        'kills': {0.4: 'purple', 0.6: 'red', 0.7: 'orange', 0.8: 'yellow', 1.0: 'white'},
        'deaths': {0.4: 'darkblue', 0.6: 'blue', 0.7: 'cyan', 0.8: 'lime', 1.0: 'red'},
        'utility': {0.4: 'green', 0.6: 'lime', 0.7: 'yellow', 0.8: 'orange', 1.0: 'red'},
        'bomb_events': {0.4: 'darkred', 0.6: 'red', 0.7: 'orange', 0.8: 'yellow', 1.0: 'white'},
        'clutch': {0.4: 'gold', 0.6: 'orange', 0.7: 'red', 0.8: 'purple', 1.0: 'white'},
        'first-kills': {0.4: 'darkgreen', 0.6: 'green', 0.7: 'lime', 0.8: 'yellow', 1.0: 'gold'}
    };
    
    return gradients[type] || gradients['position'];
}

// Add detail markers for click interactions
function addDetailMarkers(points) {
    if (!points || points.length === 0) return;
    
    // Sample a subset of points for performance
    const sampleSize = Math.min(points.length, 50);
    const sampledPoints = points.slice(0, sampleSize);
    
    sampledPoints.forEach((point, index) => {
        // Get marker style based on event type for bomb events
        const markerStyle = getBombEventMarkerStyle(point);
        
        const marker = L.circleMarker([transformY(point.y), transformX(point.x)], markerStyle);
        
        marker.on('click', () => showPointDetails(point));
        
        if (!heatmapLayers.markers) heatmapLayers.markers = [];
        heatmapLayers.markers.push(marker);
        
        // Only add to map if markers layer is enabled
        if (document.getElementById('layerRounds')?.checked) {
            marker.addTo(heatmapMap);
        }
    });
}

// Get marker style for bomb events with distinct colors and shapes
function getBombEventMarkerStyle(point) {
    // Default marker style for non-bomb events
    const defaultStyle = {
        radius: 3,
        fillColor: 'rgba(255,255,255,0.7)',
        color: '#333',
        weight: 1,
        opacity: 0.8,
        fillOpacity: 0.6
    };
    
    // Check if this is a bomb event
    if (currentHeatmapType !== 'bomb_events' || !point.eventType) {
        return defaultStyle;
    }
    
    // Define bomb event styles
    const bombEventStyles = {
        'plant': {
            radius: 6,
            fillColor: '#ff4444', // Red for bomb plants
            color: '#cc0000',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        },
        'defuse': {
            radius: 5,
            fillColor: '#44ff44', // Green for defuses
            color: '#00cc00',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        },
        'explode': {
            radius: 8,
            fillColor: '#ffaa00', // Orange for explosions
            color: '#cc6600',
            weight: 3,
            opacity: 1,
            fillOpacity: 0.9
        },
        'drop': {
            radius: 4,
            fillColor: '#ffff44', // Yellow for drops
            color: '#cccc00',
            weight: 1,
            opacity: 0.9,
            fillOpacity: 0.7
        },
        'pickup': {
            radius: 4,
            fillColor: '#44ffff', // Cyan for pickups
            color: '#00cccc',
            weight: 1,
            opacity: 0.9,
            fillOpacity: 0.7
        }
    };
    
    const eventType = point.eventType?.toLowerCase();
    return bombEventStyles[eventType] || defaultStyle;
}

// Update heatmap legend based on type
function updateHeatmapLegend() {
    const legend = document.getElementById('heatmapLegend');
    if (!legend) return;
    
    if (currentHeatmapType === 'bomb_events') {
        // Show bomb event legend
        legend.innerHTML = `
            <small class="text-muted fw-bold">Bomb Events:</small><br>
            <small class="d-block mt-1">
                <i class="fas fa-circle" style="color: #ff4444;"></i> Plant
                <i class="fas fa-circle ms-2" style="color: #44ff44;"></i> Defuse
            </small>
            <small class="d-block">
                <i class="fas fa-circle" style="color: #ffaa00;"></i> Explode
                <i class="fas fa-circle ms-2" style="color: #ffff44;"></i> Drop
                <i class="fas fa-circle ms-2" style="color: #44ffff;"></i> Pickup
            </small>
        `;
    } else {
        // Default heatmap legend
        legend.innerHTML = `
            <small class="text-muted">
                <i class="fas fa-circle text-danger"></i> High Activity
                <i class="fas fa-circle text-warning ms-2"></i> Medium
                <i class="fas fa-circle text-success ms-2"></i> Low
            </small>
        `;
    }
}

// Clear all heatmap layers
function clearHeatmapLayers() {
    Object.keys(heatmapLayers).forEach(layerKey => {
        const layer = heatmapLayers[layerKey];
        if (Array.isArray(layer)) {
            layer.forEach(l => heatmapMap.removeLayer(l));
        } else if (layer) {
            heatmapMap.removeLayer(layer);
        }
    });
    heatmapLayers = {};
}

// Map click handler for position analysis
function onMapClick(e) {
    const latlng = e.latlng;
    showPositionAnalysis(latlng.lng, latlng.lat);
}

// Show analysis for clicked position
function showPositionAnalysis(x, y) {
    const panel = document.getElementById('heatmapInfoPanel');
    const content = document.getElementById('heatmapInfoContent');
    
    if (!panel || !content) return;
    
    // Convert coordinates back to game coordinates
    const gameX = reverseTransformX(x);
    const gameY = reverseTransformY(y);
    
    content.innerHTML = `
        <div class="small">
            <strong>Position:</strong> (${Math.round(gameX)}, ${Math.round(gameY)})<br>
            <strong>Map:</strong> ${heatmapData.currentMap}<br>
            <strong>Type:</strong> ${currentHeatmapType}<br>
            <hr class="my-2">
            <em>Loading detailed analysis...</em>
        </div>
    `;
    
    panel.style.display = 'block';
    
    // Load detailed analytics for this position
    loadPositionAnalytics(gameX, gameY);
}

// Load analytics for specific position
async function loadPositionAnalytics(x, y) {
    try {
        const filters = getFilters();
        filters.MapName = getSelectedMap();
        
        // Add position-based filtering (if backend supports it)
        const params = buildQueryString(filters);
        
        // For now, show general stats - could be enhanced with position-specific queries
        const content = document.getElementById('heatmapInfoContent');
        content.innerHTML = `
            <div class="small">
                <strong>Position:</strong> (${Math.round(x)}, ${Math.round(y)})<br>
                <strong>Map:</strong> ${heatmapData.currentMap}<br>
                <strong>Type:</strong> ${currentHeatmapType}<br>
                <hr class="my-2">
                <div class="text-muted">
                    Click elsewhere to analyze different positions<br>
                    <small>Position-specific analytics coming soon</small>
                </div>
            </div>
        `;
    } catch (error) {
        console.error('Position analytics error:', error);
    }
}

// Reverse coordinate transforms
function reverseTransformX(leafletX) {
    const config = heatmapData.currentConfig || mapConfigs['de_dust2'];
    return ((leafletX + 512) / 1024) * (config.bounds[1][0] - config.bounds[0][0]) + config.bounds[0][0];
}

function reverseTransformY(leafletY) {
    const config = heatmapData.currentConfig || mapConfigs['de_dust2'];
    return ((leafletY + 512) / 1024) * (config.bounds[1][1] - config.bounds[0][1]) + config.bounds[0][1];
}

// Update heatmap statistics panel
function updateHeatmapStats(data) {
    const legend = document.getElementById('heatmapLegend');
    if (!legend || !data.stats) return;
    
    legend.innerHTML = `
        <small class="text-muted">
            <strong>${data.stats.totalPoints || 0}</strong> data points<br>
            <i class="fas fa-circle text-danger"></i> High Activity
            <i class="fas fa-circle text-warning ms-2"></i> Medium
            <i class="fas fa-circle text-success ms-2"></i> Low
        </small>
    `;
}

// Heatmap control functions
function changeHeatmapType(type) {
    currentHeatmapType = type;
    
    // Update dropdown UI
    const dropdown = document.getElementById('heatmapTypeDropdown');
    if (dropdown) {
        dropdown.querySelectorAll('.dropdown-item').forEach(item => {
            item.classList.remove('active');
        });
        dropdown.querySelector(`[onclick="changeHeatmapType('${type}')"]`)?.classList.add('active');
    }
    
    // Update legend for new type
    updateHeatmapLegend();
    
    // Refresh data with new type
    refreshHeatmapData();
}

function changeHeatmapMap() {
    const selectedMap = getSelectedMap();
    if (selectedMap) {
        loadMapBackground(selectedMap);
        refreshHeatmapData();
    }
}

function updateHeatmapIntensity() {
    const intensity = parseFloat(document.getElementById('heatmapIntensity')?.value || 1);
    if (heatmapLayers.heat) {
        heatmapLayers.heat.setOptions({max: intensity});
    }
}

function updateHeatmapRadius() {
    const radius = parseInt(document.getElementById('heatmapRadius')?.value || 20);
    if (heatmapLayers.heat) {
        heatmapLayers.heat.setOptions({radius: radius});
    }
}

function toggleLayer(layerType) {
    const isEnabled = document.getElementById(`layer${layerType.charAt(0).toUpperCase() + layerType.slice(1)}`)?.checked;
    
    if (layerType === 'rounds' && heatmapLayers.markers) {
        heatmapLayers.markers.forEach(marker => {
            if (isEnabled) {
                marker.addTo(heatmapMap);
            } else {
                heatmapMap.removeLayer(marker);
            }
        });
    }
}

function toggleHeatmapLayers() {
    // Toggle all layers on/off
    const layerControls = ['layerTeams', 'layerRounds', 'layerTime'];
    const allEnabled = layerControls.every(id => document.getElementById(id)?.checked);
    
    layerControls.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox) {
            checkbox.checked = !allEnabled;
            checkbox.dispatchEvent(new Event('change'));
        }
    });
}

function toggleHeatmapAnimation() {
    if (isHeatmapAnimating) {
        stopHeatmapAnimation();
    } else {
        startHeatmapAnimation();
    }
}

function startHeatmapAnimation() {
    if (!heatmapData.currentMap) return;
    
    isHeatmapAnimating = true;
    const button = document.querySelector('[onclick="toggleHeatmapAnimation()"]');
    if (button) {
        button.innerHTML = '<i class="fas fa-stop me-2"></i>Stop';
        button.classList.add('btn-outline-danger');
        button.classList.remove('btn-outline-success');
    }
    
    // Implement timeline animation (placeholder)
    console.log('Starting heatmap animation...');
}

function stopHeatmapAnimation() {
    isHeatmapAnimating = false;
    const button = document.querySelector('[onclick="toggleHeatmapAnimation()"]');
    if (button) {
        button.innerHTML = '<i class="fas fa-play me-2"></i>Timeline';
        button.classList.remove('btn-outline-danger');
        button.classList.add('btn-outline-success');
    }
    
    if (heatmapAnimation) {
        clearInterval(heatmapAnimation);
        heatmapAnimation = null;
    }
}

function exportHeatmapImage() {
    if (!heatmapMap) return;
    
    // Use Leaflet's built-in screenshot capability
    showNotification('Heatmap image export feature coming soon!', 'info');
}

function showHeatmapLoading(show) {
    const loading = document.getElementById('heatmapLoading');
    if (loading) {
        loading.style.display = show ? 'flex' : 'none';
    }
}

function showHeatmapError(message) {
    const container = document.getElementById('interactiveHeatmapResults');
    if (container) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger';
        errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}`;
        container.appendChild(errorDiv);
    }
}

function showPointDetails(point) {
    console.log('Point details:', point);
    
    // Show info panel with point details
    const infoPanel = document.getElementById('heatmapInfoPanel');
    const infoContent = document.getElementById('heatmapInfoContent');
    
    if (!infoPanel || !infoContent) return;
    
    let content = `
        <strong>Position:</strong><br>
        X: ${Math.round(point.x)}, Y: ${Math.round(point.y)}<br>
        <strong>Player:</strong> ${point.playerName || 'Unknown'}<br>
        <strong>Team:</strong> ${point.team || 'Unknown'}<br>
        <strong>Round:</strong> ${point.roundNumber || 'Unknown'}<br>
    `;
    
    // Add bomb event specific details
    if (currentHeatmapType === 'bomb_events' && point.eventType) {
        const eventTypeDisplay = point.eventType.charAt(0).toUpperCase() + point.eventType.slice(1);
        content += `<strong>Event:</strong> Bomb ${eventTypeDisplay}<br>`;
    }
    
    content += `<strong>Event Count:</strong> ${point.eventCount || 1}`;
    
    infoContent.innerHTML = content;
    infoPanel.style.display = 'block';
    
    // Hide panel after 5 seconds
    setTimeout(() => {
        infoPanel.style.display = 'none';
    }, 5000);
}

// Initialize interactive features when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    loadDropdownData();
    setupInteractiveFilters();
    
    // Initialize UX features
    updateSavedViewsDropdown();
    loadSharedView();
    
    // Apply saved layout
    if (dashboardLayout.style !== 'tabs') {
        document.getElementById('layoutStyle').value = dashboardLayout.style;
        applyLayoutStyle();
    }
    
    // Initialize interactive heatmap when its tab becomes active
    document.addEventListener('shown.bs.tab', function(e) {
        if (e.target.id === 'interactive-heatmap-tab') {
            setTimeout(() => {
                initializeInteractiveHeatmap();
            }, 100);
        }
    });
    
    // Also initialize if heatmap tab is already active on page load
    const heatmapTab = document.getElementById('interactive-heatmap-tab');
    if (heatmapTab && heatmapTab.classList.contains('active')) {
        setTimeout(() => {
            initializeInteractiveHeatmap();
        }, 500);
    }
    
    // Add auto-refresh toggle button
    const refreshButton = document.querySelector('[onclick="refreshAnalytics()"]');
    if (refreshButton) {
        refreshButton.addEventListener('dblclick', toggleAutoRefresh);
        refreshButton.title = 'Click to refresh, double-click to toggle auto-refresh';
    }
});
</script>