@page
@model CS2DemoParserWeb.Pages.AnalyticsModel
@{
    ViewData["Title"] = "Advanced Analytics";
}

<div class="text-center mb-4">
    <h1 class="display-5">üéØ Advanced CS2 Analytics</h1>
    <p class="lead">Deep insights into gameplay patterns, clutch performance, and tactical intelligence</p>
</div>

<div class="row">
    <!-- Analytics Controls -->
    <div class="col-lg-3">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">üìä Analysis Filters</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="demoSelect" class="form-label">Demo File</label>
                    <select class="form-select" id="demoSelect">
                        <option value="">All Demos</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="mapSelect" class="form-label">Map</label>
                    <select class="form-select" id="mapSelect">
                        <option value="">All Maps</option>
                        <option value="de_dust2">de_dust2</option>
                        <option value="de_mirage">de_mirage</option>
                        <option value="de_inferno">de_inferno</option>
                        <option value="de_ancient">de_ancient</option>
                        <option value="de_vertigo">de_vertigo</option>
                        <option value="de_nuke">de_nuke</option>
                        <option value="de_overpass">de_overpass</option>
                        <option value="de_train">de_train</option>
                        <option value="de_cache">de_cache</option>
                        <option value="de_anubis">de_anubis</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="playerSelect" class="form-label">Player</label>
                    <select class="form-select" id="playerSelect">
                        <option value="">All Players</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label for="teamSelect" class="form-label">Team</label>
                    <select class="form-select" id="teamSelect">
                        <option value="">All Teams</option>
                        <option value="TERRORIST">Terrorist</option>
                        <option value="CT">Counter-Terrorist</option>
                    </select>
                </div>
                
                <button type="button" class="btn btn-primary w-100" onclick="refreshAnalytics()">üîÑ Update Analytics</button>
            </div>
        </div>
    </div>
    
    <!-- Analytics Results -->
    <div class="col-lg-9">
        <!-- Analysis Type Tabs -->
        <ul class="nav nav-tabs" id="analyticsTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="clutch-tab" data-bs-toggle="tab" data-bs-target="#clutch" type="button" role="tab">
                    üéØ Clutch Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="trade-kill-tab" data-bs-toggle="tab" data-bs-target="#trade-kill" type="button" role="tab">
                    ‚ö° Trade Kills
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="first-kill-tab" data-bs-toggle="tab" data-bs-target="#first-kill" type="button" role="tab">
                    ü•á First Kill Impact
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="economy-tab" data-bs-toggle="tab" data-bs-target="#economy" type="button" role="tab">
                    üí∞ Economy Intelligence
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="performance-tab" data-bs-toggle="tab" data-bs-target="#performance" type="button" role="tab">
                    üèÜ Player Performance
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="position-tab" data-bs-toggle="tab" data-bs-target="#position" type="button" role="tab">
                    üìç Position Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="master-analytics-tab" data-bs-toggle="tab" data-bs-target="#master-analytics" type="button" role="tab">
                    üèÜ Master Analytics
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="situation-analysis-tab" data-bs-toggle="tab" data-bs-target="#situation-analysis" type="button" role="tab">
                    üéÆ Situational Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button" role="tab">
                    üì¶ Player Inventory
                </button>
            </li>
        </ul>
        
        <!-- Tab Content -->
        <div class="tab-content" id="analyticsTabContent">
            <!-- Clutch Analysis -->
            <div class="tab-pane fade show active" id="clutch" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üéØ Clutch Situation Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('clutch')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Clutch Analysis:</strong> 
                            Analysis of 1vX clutch situations and success rates.
                        </div>
                        <div id="clutchResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                <p>Click "Update Analytics" to load clutch analysis data</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Trade Kill Analysis -->
            <div class="tab-pane fade" id="trade-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">‚ö° Trade Kill Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('trade-kill')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Trade Kill Analysis:</strong> 
                            Analysis of how quickly teammates trade frags and refrag effectiveness.
                        </div>
                        <div id="tradeKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-exchange-alt fa-3x mb-3"></i>
                                <p>Analysis of trade kill timing and effectiveness</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Economy Intelligence -->
            <div class="tab-pane fade" id="economy" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üí∞ Economy Intelligence Dashboard</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('economy')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Economy Intelligence:</strong> 
                            Advanced economy analysis including money efficiency, equipment ROI, and economic state performance correlation.
                        </div>
                        <div id="economyResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-dollar-sign fa-3x mb-3"></i>
                                <p>Money efficiency analysis, equipment ROI, and economic state correlation</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Advanced Player Performance -->
            <div class="tab-pane fade" id="performance" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üèÜ Advanced Player Performance Matrix</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('performance')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Performance Matrix:</strong> 
                            Comprehensive player analysis including HLTV-style ratings, consistency scoring, and multi-kill performance.
                        </div>
                        <div id="performanceResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-trophy fa-3x mb-3"></i>
                                <p>HLTV-style ratings, consistency metrics, and multi-kill analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- First Kill Impact -->
            <div class="tab-pane fade" id="first-kill" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">ü•á First Kill Impact</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('first-kill')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>First Kill Impact:</strong> 
                            Impact of opening frags on round outcomes and team performance.
                        </div>
                        <div id="firstKillResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Impact of opening frags on round outcomes</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Position Analysis -->
            <div class="tab-pane fade" id="position" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üìç Position Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('position')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Position Analysis:</strong> 
                            Death hotspots and dangerous areas by map location analysis.
                        </div>
                        <div id="positionResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-map fa-3x mb-3"></i>
                                <p>Death hotspots and dangerous areas by map location</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Master Analytics Dashboard -->
            <div class="tab-pane fade" id="master-analytics" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üèÜ Master Analytics Dashboard</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('master-analytics')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Master Analytics:</strong> 
                            Comprehensive multi-dimensional analysis integrating all game data: combat, utility, economy, objectives, and performance intelligence with 50+ advanced metrics.
                        </div>
                        <div id="masterAnalyticsResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-chart-line fa-3x mb-3"></i>
                                <p>Comprehensive player performance across all dimensions</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Situational Analysis -->
            <div class="tab-pane fade" id="situation-analysis" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üéÆ Situational Performance Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('situation-analysis')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Situational Analysis:</strong> 
                            Deep dive into player performance across different game situations: clutches, economy states, utility conditions, and time phases with pressure performance scoring.
                        </div>
                        <div id="situationResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-crosshairs fa-3x mb-3"></i>
                                <p>Performance analysis across high-pressure situations</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Player Inventory -->
            <div class="tab-pane fade" id="inventory" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">üì¶ Player Inventory Analysis</h5>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportAnalysis('inventory')">üì• Export CSV</button>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3">
                            <strong>Inventory Analysis:</strong> 
                            Detailed round-by-round player equipment, economy, and loadout analysis with purchase pattern intelligence.
                        </div>
                        <div id="inventoryResults">
                            <div class="text-center text-muted">
                                <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                                <p>Round-by-round equipment and economic analysis</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    loadDropdownData();
});

async function loadDropdownData() {
    try {
        // Load demo files
        const demosResponse = await fetch('/api/demo/demos');
        if (demosResponse.ok) {
            const demos = await demosResponse.json();
            const demoSelect = document.getElementById('demoSelect');
            
            // Clear existing options except "All Demos"
            demoSelect.innerHTML = '<option value="">All Demos</option>';
            
            // Add demo options
            demos.forEach(demo => {
                const option = document.createElement('option');
                option.value = demo.id;
                option.textContent = `${demo.fileName} (${demo.mapName})`;
                demoSelect.appendChild(option);
            });
            
            console.log('Loaded', demos.length, 'demo files');
            
            // Also load unique players for player dropdown
            await loadPlayersData();
        } else {
            console.error('Failed to load demos:', demosResponse.status);
        }
    } catch (error) {
        console.error('Error loading dropdown data:', error);
    }
}

async function loadPlayersData() {
    try {
        const playersResponse = await fetch('/api/reports/player-stats?format=json');
        if (playersResponse.ok) {
            const playersData = await playersResponse.json();
            const playerSelect = document.getElementById('playerSelect');
            
            // Clear existing options except "All Players"
            playerSelect.innerHTML = '<option value="">All Players</option>';
            
            // Get unique player names
            const uniquePlayers = [...new Set(playersData.map(p => p.PlayerName))].sort();
            
            // Add player options
            uniquePlayers.forEach(playerName => {
                const option = document.createElement('option');
                option.value = playerName;
                option.textContent = playerName;
                playerSelect.appendChild(option);
            });
            
            console.log('Loaded', uniquePlayers.length, 'unique players');
        }
    } catch (error) {
        console.error('Error loading players data:', error);
    }
}

async function refreshAnalytics() {
    const filters = getFilters();
    
    // Show loading state
    showLoading();
    
    try {
        // Load all 9 analytics in parallel
        await Promise.all([
            loadClutchAnalysis(filters),
            loadTradeKillAnalysis(filters),
            loadFirstKillAnalysis(filters),
            loadEconomyIntelligence(filters),
            loadPlayerPerformance(filters),
            loadPositionAnalysis(filters),
            loadMasterAnalytics(filters),
            loadSituationAnalysis(filters),
            loadInventoryAnalysis(filters)
        ]);
    } catch (error) {
        console.error('Error refreshing analytics:', error);
        showError('Failed to load analytics data. Please try again.');
    }
}

function getFilters() {
    return {
        demoId: document.getElementById('demoSelect').value || null,
        mapName: document.getElementById('mapSelect').value || null,
        playerName: document.getElementById('playerSelect').value || null,
        team: document.getElementById('teamSelect').value || null
    };
}

function buildQueryString(filters) {
    const params = new URLSearchParams();
    Object.keys(filters).forEach(key => {
        if (filters[key] !== null && filters[key] !== '' && filters[key] !== undefined) {
            params.append(key, filters[key]);
        }
    });
    return params.toString();
}

function showLoading() {
    const containers = ['clutchResults', 'tradeKillResults', 'firstKillResults', 'economyResults', 'performanceResults', 'positionResults', 'masterAnalyticsResults', 'situationResults', 'inventoryResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading analytics...</p>
            </div>
        `;
    });
}

async function loadClutchAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/clutch-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayClutchResults(data);
    } else {
        document.getElementById('clutchResults').innerHTML = '<div class="alert alert-danger">Failed to load clutch analysis</div>';
    }
}

async function loadTradeKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/trade-kill-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayTradeKillResults(data);
    } else {
        document.getElementById('tradeKillResults').innerHTML = '<div class="alert alert-danger">Failed to load trade kill analysis</div>';
    }
}

async function loadEconomyIntelligence(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/economy-intelligence-dashboard?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayEconomyResults(data);
    } else {
        document.getElementById('economyResults').innerHTML = '<div class="alert alert-danger">Failed to load economy intelligence</div>';
    }
}

async function loadFirstKillAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/first-kill-impact?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayFirstKillResults(data);
    } else {
        document.getElementById('firstKillResults').innerHTML = '<div class="alert alert-danger">Failed to load first kill analysis</div>';
    }
}

async function loadPlayerPerformance(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/advanced-player-performance?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPerformanceResults(data);
    } else {
        document.getElementById('performanceResults').innerHTML = '<div class="alert alert-danger">Failed to load player performance</div>';
    }
}

async function loadPositionAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/position-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayPositionResults(data);
    } else {
        document.getElementById('positionResults').innerHTML = '<div class="alert alert-danger">Failed to load position analysis</div>';
    }
}

async function loadMasterAnalytics(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/master-analytics-dashboard?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayMasterAnalyticsResults(data);
    } else {
        document.getElementById('masterAnalyticsResults').innerHTML = '<div class="alert alert-danger">Failed to load master analytics</div>';
    }
}

async function loadSituationAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/situation-analysis?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displaySituationResults(data);
    } else {
        document.getElementById('situationResults').innerHTML = '<div class="alert alert-danger">Failed to load situation analysis</div>';
    }
}

async function loadInventoryAnalysis(filters) {
    const params = buildQueryString(filters);
    const response = await fetch(`/api/advanced-analytics/player-inventory?${params}`);
    
    if (response.ok) {
        const data = await response.json();
        displayInventoryResults(data);
    } else {
        document.getElementById('inventoryResults').innerHTML = '<div class="alert alert-danger">Failed to load inventory analysis</div>';
    }
}

function displayClutchResults(response) {
    const container = document.getElementById('clutchResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No clutch data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Clutch Type</th>
                        <th>Attempts</th>
                        <th>Wins</th>
                        <th>Success Rate</th>
                        <th>Demos</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const successRate = parseFloat(row.ClutchSuccessRate || 0).toFixed(1);
        const successClass = successRate > 50 ? 'bg-success' : successRate > 25 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.ClutchPlayer}</strong></td>
                <td><span class="badge ${row.ClutchTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.ClutchTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-info">${row.ClutchType}</span></td>
                <td>${row.ClutchAttempts}</td>
                <td>${row.ClutchWins}</td>
                <td><span class="badge ${successClass}">${successRate}%</span></td>
                <td>${row.DemosPlayed}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayTradeKillResults(response) {
    const container = document.getElementById('tradeKillResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No trade kill data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Total Trades</th>
                        <th>Avg Time (s)</th>
                        <th>Fastest (s)</th>
                        <th>Fast Trade %</th>
                        <th>Avg Distance</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const avgTime = parseFloat(row.AvgTradeTimeSeconds || 0).toFixed(2);
        const fastestTime = parseFloat(row.FastestTradeSeconds || 0).toFixed(2);
        const avgDistance = parseFloat(row.AvgTradeDistance || 0).toFixed(0);
        const fastTradePercentage = parseFloat(row.FastTradePercentage || 0).toFixed(1);
        
        html += `
            <tr>
                <td><strong>${row.Player}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td>${row.MapName}</td>
                <td>${row.TotalTrades}</td>
                <td>${avgTime}</td>
                <td><span class="badge bg-success">${fastestTime}</span></td>
                <td>${fastTradePercentage}%</td>
                <td>${avgDistance} units</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayEconomyResults(response) {
    const container = document.getElementById('economyResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No economy data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Economy State</th>
                        <th>Win %</th>
                        <th>Equipment ROI</th>
                        <th>Damage/$</th>
                        <th>Avg Equipment Value</th>
                        <th>Low Money Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const winRate = parseFloat(row.WinPercentage || 0).toFixed(1);
        const equipmentROI = parseFloat(row.AvgEquipmentROI || 0).toFixed(3);
        const damagePerDollar = parseFloat(row.AvgDamagePerDollar || 0).toFixed(3);
        const avgEquipment = parseFloat(row.AvgEquipmentValue || 0).toFixed(0);
        const lowMoneyRate = parseFloat(row.LowMoneyRate || 0).toFixed(1);
        
        const winRateClass = winRate > 60 ? 'text-success' : winRate > 45 ? 'text-warning' : 'text-danger';
        const roiClass = equipmentROI > 0.15 ? 'text-success' : equipmentROI > 0.1 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><span class="badge bg-info">${row.EconomyState}</span></td>
                <td><span class="${winRateClass}">${winRate}%</span></td>
                <td><span class="${roiClass}">${equipmentROI}</span></td>
                <td>${damagePerDollar}</td>
                <td>$${avgEquipment}</td>
                <td>${lowMoneyRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPerformanceResults(response) {
    const container = document.getElementById('performanceResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No performance data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Efficiency Score</th>
                        <th>Impact Rating</th>
                        <th>Multi-Kills</th>
                        <th>Survival Rate</th>
                        <th>Consistency</th>
                        <th>Win Rate</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const efficiencyScore = parseFloat(row.EfficiencyScore || 0).toFixed(2);
        const impactRating = parseFloat(row.AvgImpactRating || 0).toFixed(2);
        const survivalRate = parseFloat(row.SurvivalRate || 0).toFixed(1);
        const consistency = (1 / (parseFloat(row.RatingConsistency || 1) + 0.1)).toFixed(2);
        const winRate = parseFloat(row.WinRate || 0).toFixed(1);
        
        const efficiencyClass = efficiencyScore > 1.0 ? 'text-success' : efficiencyScore > 0.7 ? 'text-warning' : 'text-danger';
        const multiKills = (row.TripleKills || 0) + (row.QuadKills || 0);
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><span class="${efficiencyClass}">${efficiencyScore}</span></td>
                <td>${impactRating}</td>
                <td><span class="badge bg-success">${multiKills}</span></td>
                <td>${survivalRate}%</td>
                <td>${consistency}</td>
                <td>${winRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayFirstKillResults(response) {
    const container = document.getElementById('firstKillResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No first kill data found for the selected filters. This endpoint may need configuration or data is not available.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Map</th>
                        <th>Type</th>
                        <th>First Kills</th>
                        <th>Rounds Won</th>
                        <th>Win Rate (%)</th>
                        <th>Headshot %</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const winRate = parseFloat(row.FirstKillWinPercentage || 0).toFixed(1);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        const winRateClass = winRate > 60 ? 'bg-success' : winRate > 45 ? 'bg-warning' : 'bg-danger';
        
        html += `
            <tr>
                <td><strong>${row.FirstKiller}</strong></td>
                <td><span class="badge ${row.FirstKillerTeam === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.FirstKillerTeam}</span></td>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.FirstKillType}</span></td>
                <td>${row.TotalFirstKills}</td>
                <td>${row.RoundsWonAfterFirstKill}</td>
                <td><span class="badge ${winRateClass}">${winRate}%</span></td>
                <td>${headshotRate}%</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

function displayPositionResults(response) {
    const container = document.getElementById('positionResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No position data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Map</th>
                        <th>Area</th>
                        <th>Team</th>
                        <th>Deaths</th>
                        <th>Avg Kill Distance</th>
                        <th>Headshot %</th>
                        <th>Headshot Deaths</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    response.data.forEach(row => {
        const avgDistance = parseFloat(row.AvgKillDistance || 0).toFixed(0);
        const headshotRate = parseFloat(row.HeadshotPercentage || 0).toFixed(1);
        
        html += `
            <tr>
                <td>${row.MapName}</td>
                <td><span class="badge bg-secondary">${row.MapArea}</span></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-danger'}">${row.Team}</span></td>
                <td><strong>${row.TotalDeaths}</strong></td>
                <td>${avgDistance} units</td>
                <td>${headshotRate}%</td>
                <td>${row.HeadshotDeaths}</td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.innerHTML = html;
}

async function exportAnalysis(analysisType) {
    const filters = getFilters();
    filters.format = 'csv';
    
    const endpoints = {
        'clutch': 'clutch-analysis',
        'trade-kill': 'trade-kill-analysis',
        'first-kill': 'first-kill-impact',
        'economy': 'economy-intelligence-dashboard',
        'performance': 'advanced-player-performance',
        'position': 'position-analysis',
        'master-analytics': 'master-analytics-dashboard',
        'situation-analysis': 'situation-analysis',
        'inventory': 'player-inventory'
    };
    
    const endpoint = endpoints[analysisType];
    if (!endpoint) return;
    
    const params = buildQueryString(filters);
    window.location.href = `/api/advanced-analytics/${endpoint}?${params}`;
}

function displayMasterAnalyticsResults(response) {
    const container = document.getElementById('masterAnalyticsResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No master analytics data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Performance Score</th>
                        <th>K/D Ratio</th>
                        <th>Headshot %</th>
                        <th>Damage/Round</th>
                        <th>Utility Efficiency</th>
                        <th>Survival Rate</th>
                        <th>KAST %</th>
                        <th>Clutch Rounds</th>
                        <th>Flash Trade Ratio</th>
                        <th>Bomb Actions</th>
                        <th>Advanced Stats</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        const performanceColor = row.OverallPerformanceScore >= 70 ? 'text-success' : 
                                row.OverallPerformanceScore >= 50 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge ${row.Team === 'CT' ? 'bg-primary' : 'bg-warning'}">${row.Team}</span></td>
                <td><span class="badge bg-info ${performanceColor}">${row.OverallPerformanceScore?.toFixed(1) || 'N/A'}</span></td>
                <td>${row.KDRatio?.toFixed(2) || 'N/A'}</td>
                <td>${row.HeadshotPercentage?.toFixed(1) || 'N/A'}%</td>
                <td>${row.AvgDamagePerRound?.toFixed(1) || 'N/A'}</td>
                <td>${row.UtilityEfficiency?.toFixed(2) || 'N/A'}</td>
                <td>${row.SurvivalRate?.toFixed(1) || 'N/A'}%</td>
                <td>${row.KASTPercentage?.toFixed(1) || 'N/A'}%</td>
                <td>${row.ClutchRounds || 0}</td>
                <td>${row.FlashTradeRatio?.toFixed(2) || 'N/A'}</td>
                <td>${row.BombPlants || 0}/${row.BombDefuses || 0}</td>
                <td>
                    <small>
                        Wallbangs: ${row.WallbangKills || 0}<br>
                        Smoke Kills: ${row.SmokeKills || 0}<br>
                        Grenades: ${row.GrenadesThrown || 0}
                    </small>
                </td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Performance Score combines K/D, survival, utility usage, and accuracy metrics (0-100 scale).
                ${response.data.length} players analyzed with comprehensive multi-dimensional metrics.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function displaySituationResults(response) {
    const container = document.getElementById('situationResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No situational analysis data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Situation</th>
                        <th>Economy State</th>
                        <th>Utility State</th>
                        <th>Frequency</th>
                        <th>Win Rate</th>
                        <th>Survival Rate</th>
                        <th>Pressure Score</th>
                        <th>Difficulty</th>
                        <th>Performance</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        const pressureColor = row.PressurePerformanceScore >= 2.0 ? 'text-success' : 
                             row.PressurePerformanceScore >= 1.0 ? 'text-warning' : 'text-danger';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td><span class="badge bg-secondary">${row.SituationType}</span></td>
                <td><span class="badge bg-info">${row.EconomyState}</span></td>
                <td><span class="badge bg-light text-dark">${row.UtilityState}</span></td>
                <td>${row.TimesInSituation}</td>
                <td>${row.WinPercentageInSituation?.toFixed(1) || 'N/A'}%</td>
                <td>${row.SurvivalRateInSituation?.toFixed(1) || 'N/A'}%</td>
                <td><span class="${pressureColor}">${row.PressurePerformanceScore?.toFixed(2) || 'N/A'}</span></td>
                <td>${row.DifficultyScore}/10</td>
                <td>
                    <small>
                        K/D: ${row.KDRatioInSituation?.toFixed(2) || 'N/A'}<br>
                        Dmg: ${row.AvgDamageInSituation?.toFixed(0) || 'N/A'}<br>
                        Rating: ${row.AvgRatingInSituation?.toFixed(2) || 'N/A'}
                    </small>
                </td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Pressure Performance Score shows performance under stress (higher = better under pressure).
                Difficulty Score: 1vX=9, Force/Eco=6-8, Flashed=7, Standard=3.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function displayInventoryResults(response) {
    const container = document.getElementById('inventoryResults');
    
    if (!response.data || response.data.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No inventory data found for the selected filters.</div>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Player</th>
                        <th>Round</th>
                        <th>Loadout Category</th>
                        <th>Equipment Value</th>
                        <th>Money (Start/End)</th>
                        <th>Primary</th>
                        <th>Armor</th>
                        <th>Weapons</th>
                        <th>Grenades</th>
                        <th>Efficiency</th>
                    </tr>
                </thead>
                <tbody>`;
    
    response.data.forEach(row => {
        const categoryColor = {
            'Full Buy': 'bg-success',
            'Buy Round': 'bg-primary', 
            'Force Buy': 'bg-warning',
            'Eco Round': 'bg-secondary',
            'Save Round': 'bg-danger'
        }[row.LoadoutCategory] || 'bg-secondary';
        
        html += `
            <tr>
                <td><strong>${row.PlayerName}</strong></td>
                <td>${row.RoundNumber}</td>
                <td><span class="badge ${categoryColor}">${row.LoadoutCategory}</span></td>
                <td>$${row.TotalEquipmentValue || 0}</td>
                <td>$${row.RoundStartMoney || 0} ‚Üí $${row.RoundEndMoney || 0}</td>
                <td>${row.HasPrimary === 'Yes' ? '‚úÖ' : '‚ùå'}</td>
                <td>${row.HasArmor === 'Yes' ? 'üõ°Ô∏è' : '‚ùå'}</td>
                <td><small>${row.WeaponsCarried || 'None'}</small></td>
                <td><small>${row.GrenadesCarried || 'None'}</small></td>
                <td>${row.MoneyToEquipmentRatio?.toFixed(2) || 'N/A'}</td>
            </tr>`;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                Equipment efficiency shows money-to-equipment ratio (higher = more economic).
                Loadout categories based on total equipment value and purchase patterns.
            </small>
        </div>`;
    
    container.innerHTML = html;
}

function showError(message) {
    const containers = ['clutchResults', 'tradeKillResults', 'firstKillResults', 'economyResults', 'performanceResults', 'positionResults', 'masterAnalyticsResults', 'situationResults', 'inventoryResults'];
    containers.forEach(containerId => {
        document.getElementById(containerId).innerHTML = `<div class="alert alert-danger">${message}</div>`;
    });
}
</script>