@page
@model CS2DemoParserWeb.Pages.QueryModel
@{
    ViewData["Title"] = "Query Builder";
}

<div class="text-center mb-4">
    <h1 class="display-5">Query Builder</h1>
    <p class="lead">Build custom SQL queries to explore your demo database</p>
</div>

<div class="row justify-content-center">
    <div class="col-lg-10">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">üîç SQL Query Builder</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="tableSelect" class="form-label">Table</label>
                        <select class="form-select" id="tableSelect" required>
                            <option value="">Select a table...</option>
                            <option value="DemoFiles">Demo Files</option>
                            <option value="Players">Players</option>
                            <option value="Matches">Matches</option>
                            <option value="Rounds">Rounds</option>
                            <option value="Kills">Kills</option>
                            <option value="Deaths">Deaths</option>
                            <option value="Damages">Damages</option>
                            <option value="WeaponFires">Weapon Fires</option>
                            <option value="Grenades">Grenades</option>
                            <option value="Bombs">Bomb Events</option>
                            <option value="PlayerPositions">Player Positions</option>
                            <option value="Equipment">Equipment</option>
                            <option value="EconomyEvents">Economy Events</option>
                            <option value="GameEvents">Game Events</option>
                            <option value="FlashEvents">Flash Events</option>
                            <option value="SmokeClouds">Smoke Clouds</option>
                            <option value="PlayerMatchStats">Player Match Stats</option>
                            <option value="PlayerRoundStats">Player Round Stats</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="columnsSelect" class="form-label">Columns</label>
                        <select class="form-select" id="columnsSelect" multiple>
                            <option value="*">All Columns (*)</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="limitInput" class="form-label">Limit</label>
                        <input type="number" class="form-control" id="limitInput" value="100" min="1" max="10000">
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-12">
                        <label for="whereClause" class="form-label">WHERE Clause (optional)</label>
                        <input type="text" class="form-control" id="whereClause" placeholder="e.g., MapName = 'de_dust2' AND Duration > 1000">
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="orderByColumn" class="form-label">Order By (optional)</label>
                        <select class="form-select" id="orderByColumn">
                            <option value="">No ordering</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="orderDirection" class="form-label">Order Direction</label>
                        <select class="form-select" id="orderDirection">
                            <option value="ASC">Ascending</option>
                            <option value="DESC">Descending</option>
                        </select>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="sqlPreview" class="form-label">Generated SQL Query</label>
                    <textarea class="form-control" id="sqlPreview" rows="4" readonly></textarea>
                </div>
                
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" onclick="executeQuery()">Execute Query</button>
                    <button type="button" class="btn btn-secondary" onclick="exportQuery()">Export Results</button>
                    <button type="button" class="btn btn-info" onclick="window.location.href='/SqlCheatSheet'">SQL Cheat Sheet</button>
                </div>
                
                <div id="queryResult" class="mt-4"></div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    setupQueryBuilder();
});

function setupQueryBuilder() {
    const tableSelect = document.getElementById('tableSelect');
    const columnsSelect = document.getElementById('columnsSelect');
    const orderByColumn = document.getElementById('orderByColumn');
    const sqlPreview = document.getElementById('sqlPreview');
    
    // Table columns mapping
    const tableColumns = {
        'DemoFiles': ['Id', 'FileName', 'MapName', 'ParsedAt', 'Duration', 'DemoSource', 'FileSize', 'TickRate', 'ServerName'],
        'Players': ['Id', 'DemoFileId', 'PlayerName', 'SteamId', 'Team', 'PlayerSlot'],
        'Matches': ['Id', 'DemoFileId', 'MapName', 'GameMode', 'StartTime', 'EndTime', 'TotalRounds'],
        'Rounds': ['Id', 'MatchId', 'RoundNumber', 'StartTime', 'EndTime', 'WinnerTeam', 'EndReason'],
        'Kills': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'KillerPlayerId', 'VictimPlayerId', 'WeaponName', 'IsHeadshot', 'Time', 'KillerX', 'KillerY', 'KillerZ', 'VictimX', 'VictimY', 'VictimZ'],
        'Deaths': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'VictimPlayerId', 'KillerPlayerId', 'WeaponName', 'IsHeadshot', 'Time', 'VictimX', 'VictimY', 'VictimZ'],
        'Damages': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'AttackerPlayerId', 'VictimPlayerId', 'WeaponName', 'DamageAmount', 'ArmorDamage', 'Time'],
        'WeaponFires': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'WeaponName', 'Time', 'PlayerX', 'PlayerY', 'PlayerZ'],
        'Grenades': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'GrenadeType', 'ThrowTime', 'DetonateTime', 'ThrowX', 'ThrowY', 'ThrowZ', 'DetonateX', 'DetonateY', 'DetonateZ'],
        'Bombs': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'EventType', 'Time', 'Site', 'PlayerX', 'PlayerY', 'PlayerZ'],
        'PlayerPositions': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'Time', 'X', 'Y', 'Z', 'ViewAngleX', 'ViewAngleY'],
        'Equipment': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'WeaponName', 'Time', 'EventType'],
        'EconomyEvents': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'EventType', 'WeaponName', 'Amount', 'Time'],
        'GameEvents': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'EventType', 'Time', 'Details'],
        'FlashEvents': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'ThrowerPlayerId', 'VictimPlayerId', 'FlashDuration', 'Time'],
        'SmokeClouds': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'StartTime', 'EndTime', 'X', 'Y', 'Z', 'Radius'],
        'PlayerMatchStats': ['Id', 'DemoFileId', 'MatchId', 'PlayerId', 'Kills', 'Deaths', 'Assists', 'Score', 'MVP'],
        'PlayerRoundStats': ['Id', 'DemoFileId', 'MatchId', 'RoundId', 'PlayerId', 'Kills', 'Deaths', 'Assists', 'Damage', 'EquipmentValue']
    };
    
    tableSelect.addEventListener('change', function() {
        const selectedTable = this.value;
        updateColumns(selectedTable);
        updateSqlPreview();
    });
    
    columnsSelect.addEventListener('change', updateSqlPreview);
    document.getElementById('whereClause').addEventListener('input', updateSqlPreview);
    document.getElementById('orderByColumn').addEventListener('change', updateSqlPreview);
    document.getElementById('orderDirection').addEventListener('change', updateSqlPreview);
    document.getElementById('limitInput').addEventListener('input', updateSqlPreview);
    
    function updateColumns(tableName) {
        const columns = tableColumns[tableName] || [];
        columnsSelect.innerHTML = '<option value="*">All Columns (*)</option>';
        orderByColumn.innerHTML = '<option value="">No ordering</option>';
        
        columns.forEach(column => {
            const option = document.createElement('option');
            option.value = column;
            option.textContent = column;
            columnsSelect.appendChild(option);
            
            const orderOption = document.createElement('option');
            orderOption.value = column;
            orderOption.textContent = column;
            orderByColumn.appendChild(orderOption);
        });
    }
    
    function updateSqlPreview() {
        const table = tableSelect.value;
        const selectedColumns = Array.from(columnsSelect.selectedOptions).map(opt => opt.value);
        const whereClause = document.getElementById('whereClause').value;
        const orderBy = document.getElementById('orderByColumn').value;
        const orderDirection = document.getElementById('orderDirection').value;
        const limit = document.getElementById('limitInput').value;
        
        if (!table) {
            sqlPreview.value = 'Please select a table first';
            return;
        }
        
        const columns = selectedColumns.length > 0 ? selectedColumns.join(', ') : '*';
        let sql = `SELECT ${columns} FROM ${table}`;
        
        if (whereClause) {
            sql += ` WHERE ${whereClause}`;
        }
        
        if (orderBy) {
            sql += ` ORDER BY ${orderBy} ${orderDirection}`;
        }
        
        if (limit) {
            sql += ` LIMIT ${limit}`;
        }
        
        sqlPreview.value = sql;
    }
}

async function executeQuery() {
    const sql = document.getElementById('sqlPreview').value;
    const resultDiv = document.getElementById('queryResult');
    
    if (!sql || sql === 'Please select a table first') {
        resultDiv.innerHTML = '<div class="alert alert-warning">Please build a query first.</div>';
        return;
    }
    
    resultDiv.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div><p>Executing query...</p></div>';
    
    try {
        const response = await fetch('/api/querybuilder/execute', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sql: sql })
        });
        
        if (response.ok) {
            const data = await response.json();
            displayQueryResults(data);
        } else {
            const error = await response.text();
            resultDiv.innerHTML = `<div class="alert alert-danger">Error executing query: ${error}</div>`;
        }
    } catch (error) {
        resultDiv.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
    }
}

async function exportQuery() {
    const sql = document.getElementById('sqlPreview').value;
    
    if (!sql || sql === 'Please select a table first') {
        alert('Please build a query first.');
        return;
    }
    
    try {
        const response = await fetch('/api/querybuilder/export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sql: sql })
        });
        
        if (response.ok) {
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);
            const filename = `query_results_${new Date().toISOString().split('T')[0]}.csv`;
            
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            
            URL.revokeObjectURL(url);
        } else {
            const error = await response.text();
            alert(`Error exporting query: ${error}`);
        }
    } catch (error) {
        alert(`Error: ${error.message}`);
    }
}

function displayQueryResults(data) {
    const resultDiv = document.getElementById('queryResult');
    
    if (Array.isArray(data) && data.length > 0) {
        const headers = Object.keys(data[0]);
        
        let html = `
            <div class="alert alert-success">
                <h6>Query Results</h6>
                <p>Found ${data.length} records</p>
            </div>
            <div class="table-responsive">
                <table class="table table-sm table-striped">
                    <thead>
                        <tr>
                            ${headers.map(h => `<th>${h}</th>`).join('')}
                        </tr>
                    </thead>
                    <tbody>
                        ${data.slice(0, 100).map(row => `
                            <tr>
                                ${headers.map(h => `<td>${row[h] || ''}</td>`).join('')}
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        `;
        
        if (data.length > 100) {
            html += `<p class="text-muted">Showing first 100 records of ${data.length} total. Use Export to get all results.</p>`;
        }
        
        resultDiv.innerHTML = html;
    } else {
        resultDiv.innerHTML = '<div class="alert alert-warning">No data found for this query.</div>';
    }
}
</script>